!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/Users/quebec/Downloads/XPEsim/simulator/simulator/hardwaresim/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
$(MAINS:.cpp=)	makefile	/^$(MAINS:.cpp=): $(OBJ) $$@.o$/;"	t
%.o	makefile	/^%.o: %.cpp$/;"	t
.depend	makefile	/^.depend: $(ALLSRC)$/;"	t
ACTIVATIONFUNC_H_	ActivationFunc.h	/^#define ACTIVATIONFUNC_H_$/;"	d
ADDER_H_	Adder.h	/^#define ADDER_H_$/;"	d
ALLOBJ	makefile	/^ALLOBJ := $(ALLSRC:.cpp=.o)$/;"	m
ALLSRC	makefile	/^ALLSRC := $(wildcard *.cpp)$/;"	m
AVG_RATIO_LEAK_2INPUT_NAND	constant.h	/^#define AVG_RATIO_LEAK_2INPUT_NAND /;"	d
AVG_RATIO_LEAK_2INPUT_NOR	constant.h	/^#define AVG_RATIO_LEAK_2INPUT_NOR /;"	d
AVG_RATIO_LEAK_3INPUT_NAND	constant.h	/^#define AVG_RATIO_LEAK_3INPUT_NAND /;"	d
AVG_RATIO_LEAK_3INPUT_NOR	constant.h	/^#define AVG_RATIO_LEAK_3INPUT_NOR /;"	d
ActivationFunc	ActivationFunc.cpp	/^ActivationFunc::ActivationFunc(const InputParameter& _inputParameter,$/;"	f	class:ActivationFunc
ActivationFunc	ActivationFunc.h	/^class ActivationFunc: public FunctionUnit$/;"	c
ActivationFunction	typedef.h	/^enum ActivationFunction$/;"	g
Adder	Adder.cpp	/^Adder::Adder(const InputParameter& _inputParameter, const Technology& _tech, const MemCell& _cel/;"	f	class:Adder
Adder	Adder.h	/^class Adder: public FunctionUnit {$/;"	c
AnalogRRAMTHU	typedef.h	/^		AnalogRRAMTHU$/;"	e	enum:Type::CellType
AreaModify	typedef.h	/^enum AreaModify$/;"	g
Area_Opt	typedef.h	/^	Area_Opt,$/;"	e	enum:DesignOptimization
BJT_access	typedef.h	/^	BJT_access,$/;"	e	enum:CellAccessType
CMOS	typedef.h	/^	CMOS,		\/* Normal read circuit *\/$/;"	e	enum:ReadCircuitMode
CMOS_access	typedef.h	/^	CMOS_access,$/;"	e	enum:CellAccessType
COL_MODE	constant.h	/^#define	COL_MODE	/;"	d
COMPARATOR_H_	Comparator.h	/^#define COMPARATOR_H_$/;"	d
CONSTANT_H_	constant.h	/^#define CONSTANT_H_$/;"	d
CONTACT_SIZE	constant.h	/^#define CONTACT_SIZE	/;"	d
CORE_H_	Core.h	/^#define CORE_H_$/;"	d
CURRENTSENSEAMP_H_	CurrentSenseAmp.h	/^#define CURRENTSENSEAMP_H_$/;"	d
CXX	makefile	/^CXX := g++$/;"	m
CalculateArea	ActivationFunc.cpp	/^void ActivationFunc::CalculateArea(double numInput, double IOBits,$/;"	f	class:ActivationFunc	typeref:typename:void
CalculateArea	Adder.cpp	/^void Adder::CalculateArea(double _newHeight, double _newWidth, AreaModify _option) {$/;"	f	class:Adder	typeref:typename:void
CalculateArea	Comparator.cpp	/^void Comparator::CalculateArea(double widthArray){$/;"	f	class:Comparator	typeref:typename:void
CalculateArea	Core.cpp	/^void Core::CalculateArea()$/;"	f	class:Core	typeref:typename:void
CalculateArea	CurrentSenseAmp.cpp	/^void CurrentSenseAmp::CalculateArea(double widthArray) {	\/\/ adjust CurrentSenseAmp area by fix/;"	f	class:CurrentSenseAmp	typeref:typename:void
CalculateArea	DFF.cpp	/^void DFF::CalculateArea(double _newHeight, double _newWidth, AreaModify _option) {$/;"	f	class:DFF	typeref:typename:void
CalculateArea	DeMux.cpp	/^void DeMux::CalculateArea(double _newHeight, double _newWidth, AreaModify _option){$/;"	f	class:DeMux	typeref:typename:void
CalculateArea	DecoderDriver.cpp	/^void DecoderDriver::CalculateArea(double _newHeight, double _newWidth, AreaModify _option) {$/;"	f	class:DecoderDriver	typeref:typename:void
CalculateArea	HWsim.cpp	/^void HWsim::CalculateArea()$/;"	f	class:HWsim	typeref:typename:void
CalculateArea	HWsim.py	/^    def CalculateArea(self):$/;"	m	class:HWsim
CalculateArea	LUT.cpp	/^void LUT::CalculateArea(double _newHeight, double _newWidth, AreaModify _option) {$/;"	f	class:LUT	typeref:typename:void
CalculateArea	MultilevelSAEncoder.cpp	/^void MultilevelSAEncoder::CalculateArea(double _newHeight, double _newWidth, AreaModify _option)/;"	f	class:MultilevelSAEncoder	typeref:typename:void
CalculateArea	MultilevelSenseAmp.cpp	/^void MultilevelSenseAmp::CalculateArea(double heightArray, double widthArray, AreaModify _option/;"	f	class:MultilevelSenseAmp	typeref:typename:void
CalculateArea	Mux.cpp	/^void Mux::CalculateArea(double _newHeight, double _newWidth, AreaModify _option){$/;"	f	class:Mux	typeref:typename:void
CalculateArea	NewSwitchMatrix.cpp	/^void NewSwitchMatrix::CalculateArea(double _newHeight, double _newWidth, AreaModify _option) {$/;"	f	class:NewSwitchMatrix	typeref:typename:void
CalculateArea	Precharger.cpp	/^void Precharger::CalculateArea(double _newHeight, double _newWidth, AreaModify _option) {$/;"	f	class:Precharger	typeref:typename:void
CalculateArea	ReadCircuit.cpp	/^void ReadCircuit::CalculateArea(double _newWidth) {	\/\/ Just add up the area of all the compone/;"	f	class:ReadCircuit	typeref:typename:void
CalculateArea	RippleCounter.cpp	/^void RippleCounter::CalculateArea(double _newHeight, double _newWidth, AreaModify _option) {$/;"	f	class:RippleCounter	typeref:typename:void
CalculateArea	RowDecoder.cpp	/^void RowDecoder::CalculateArea(double _newHeight, double _newWidth, AreaModify _option) {$/;"	f	class:RowDecoder	typeref:typename:void
CalculateArea	SRAMWriteDriver.cpp	/^void SRAMWriteDriver::CalculateArea(double _newHeight, double _newWidth, AreaModify _option) {$/;"	f	class:SRAMWriteDriver	typeref:typename:void
CalculateArea	SenseAmp.cpp	/^void SenseAmp::CalculateArea(double _newHeight, double _newWidth, AreaModify _option) {$/;"	f	class:SenseAmp	typeref:typename:void
CalculateArea	ShiftAdd.cpp	/^void ShiftAdd::CalculateArea(double _newHeight, double _newWidth, AreaModify _option) {$/;"	f	class:ShiftAdd	typeref:typename:void
CalculateArea	SubArray.cpp	/^void SubArray::CalculateArea() {  \/\/calculate layout area for total design$/;"	f	class:SubArray	typeref:typename:void
CalculateArea	Sum.cpp	/^void Sum::CalculateArea(double heightArray,  double widthArray, AreaModify _option) $/;"	f	class:Sum	typeref:typename:void
CalculateArea	SwitchMatrix.cpp	/^void SwitchMatrix::CalculateArea(double _newHeight, double _newWidth, AreaModify _option) {$/;"	f	class:SwitchMatrix	typeref:typename:void
CalculateArea	VoltageSenseAmp.cpp	/^void VoltageSenseAmp::CalculateArea(double _widthVoltageSenseAmp) {	\/\/ Just add up the area of/;"	f	class:VoltageSenseAmp	typeref:typename:void
CalculateArea	WLDecoderOutput.cpp	/^void WLDecoderOutput::CalculateArea(double _newHeight, double _newWidth, AreaModify _option) {$/;"	f	class:WLDecoderOutput	typeref:typename:void
CalculateArea	WLNewDecoderDriver.cpp	/^void WLNewDecoderDriver::CalculateArea(double _newHeight, double _newWidth, AreaModify _option) /;"	f	class:WLNewDecoderDriver	typeref:typename:void
CalculateDrainCap	formula.cpp	/^double CalculateDrainCap($/;"	f	typeref:typename:double
CalculateGateArea	formula.cpp	/^double CalculateGateArea(	\/\/ Calculate layout area and width of logic gate given fixed layout /;"	f	typeref:typename:double
CalculateGateCap	formula.cpp	/^double CalculateGateCap(double width, Technology tech) {$/;"	f	typeref:typename:double
CalculateGateCapacitance	formula.cpp	/^void CalculateGateCapacitance($/;"	f	typeref:typename:void
CalculateGateLeakage	formula.cpp	/^double CalculateGateLeakage($/;"	f	typeref:typename:double
CalculateLatency	ActivationFunc.cpp	/^void ActivationFunc::CalculateLatency(double _rampInput, double _capLoad, double numRead)$/;"	f	class:ActivationFunc	typeref:typename:void
CalculateLatency	Adder.cpp	/^void Adder::CalculateLatency(double _rampInput, double _capLoad, double numRead){$/;"	f	class:Adder	typeref:typename:void
CalculateLatency	Comparator.cpp	/^void Comparator::CalculateLatency(double _rampInput, double _capLoad, double numRead){$/;"	f	class:Comparator	typeref:typename:void
CalculateLatency	Core.cpp	/^void Core::CalculateLatency(double _rampInput)$/;"	f	class:Core	typeref:typename:void
CalculateLatency	CurrentSenseAmp.cpp	/^void CurrentSenseAmp::CalculateLatency(double numRead, int currentlevel) {$/;"	f	class:CurrentSenseAmp	typeref:typename:void
CalculateLatency	DFF.cpp	/^void DFF::CalculateLatency(double _rampInput, double numRead){$/;"	f	class:DFF	typeref:typename:void
CalculateLatency	DeMux.cpp	/^void DeMux::CalculateLatency(double _rampInput, double numRead) {	\/\/ rampInput actually is not/;"	f	class:DeMux	typeref:typename:void
CalculateLatency	DecoderDriver.cpp	/^void DecoderDriver::CalculateLatency(double _rampInput, double _capLoad1, double _capLoad2, doub/;"	f	class:DecoderDriver	typeref:typename:void
CalculateLatency	HWsim.cpp	/^void HWsim::CalculateLatency()$/;"	f	class:HWsim	typeref:typename:void
CalculateLatency	HWsim.py	/^    def CalculateLatency(self):$/;"	m	class:HWsim
CalculateLatency	LUT.cpp	/^void LUT::CalculateLatency(double _capLoad, double numRead) {$/;"	f	class:LUT	typeref:typename:void
CalculateLatency	MultilevelSAEncoder.cpp	/^void MultilevelSAEncoder::CalculateLatency(double _rampInput, double numRead){$/;"	f	class:MultilevelSAEncoder	typeref:typename:void
CalculateLatency	MultilevelSenseAmp.cpp	/^void MultilevelSenseAmp::CalculateLatency(double numRead) {$/;"	f	class:MultilevelSenseAmp	typeref:typename:void
CalculateLatency	Mux.cpp	/^void Mux::CalculateLatency(double _rampInput, double _capLoad, double numRead) {  \/\/ rampInput/;"	f	class:Mux	typeref:typename:void
CalculateLatency	NewSwitchMatrix.cpp	/^void NewSwitchMatrix::CalculateLatency(double _rampInput, double _capLoad, double _resLoad, doub/;"	f	class:NewSwitchMatrix	typeref:typename:void
CalculateLatency	Precharger.cpp	/^void Precharger::CalculateLatency(double _rampInput, double _capLoad, double numRead, double num/;"	f	class:Precharger	typeref:typename:void
CalculateLatency	ReadCircuit.cpp	/^void ReadCircuit::CalculateLatency(double numRead) {$/;"	f	class:ReadCircuit	typeref:typename:void
CalculateLatency	RippleCounter.cpp	/^void RippleCounter::CalculateLatency(double numRead) {    \/\/ numRead = number of columns share/;"	f	class:RippleCounter	typeref:typename:void
CalculateLatency	RowDecoder.cpp	/^void RowDecoder::CalculateLatency(double _rampInput, double _capLoad1, double _capLoad2, double /;"	f	class:RowDecoder	typeref:typename:void
CalculateLatency	SRAMWriteDriver.cpp	/^void SRAMWriteDriver::CalculateLatency(double _rampInput, double _capLoad, double _resLoad, doub/;"	f	class:SRAMWriteDriver	typeref:typename:void
CalculateLatency	SenseAmp.cpp	/^void SenseAmp::CalculateLatency(double numRead) {$/;"	f	class:SenseAmp	typeref:typename:void
CalculateLatency	ShiftAdd.cpp	/^void ShiftAdd::CalculateLatency(double numRead) {$/;"	f	class:ShiftAdd	typeref:typename:void
CalculateLatency	SubArray.cpp	/^void SubArray::CalculateLatency(double _rampInput) {   \/\/calculate latency for different mode $/;"	f	class:SubArray	typeref:typename:void
CalculateLatency	Sum.cpp	/^void Sum::CalculateLatency(double numRead)$/;"	f	class:Sum	typeref:typename:void
CalculateLatency	SwitchMatrix.cpp	/^void SwitchMatrix::CalculateLatency(double _rampInput, double _capLoad, double _resLoad, double /;"	f	class:SwitchMatrix	typeref:typename:void
CalculateLatency	VoltageSenseAmp.cpp	/^void VoltageSenseAmp::CalculateLatency(double capInputLoad, double numRead) {$/;"	f	class:VoltageSenseAmp	typeref:typename:void
CalculateLatency	WLDecoderOutput.cpp	/^void WLDecoderOutput::CalculateLatency(double _rampInput, double _capLoad, double _resLoad, doub/;"	f	class:WLDecoderOutput	typeref:typename:void
CalculateLatency	WLNewDecoderDriver.cpp	/^void WLNewDecoderDriver::CalculateLatency(double _rampInput, double _capLoad, double _resLoad, d/;"	f	class:WLNewDecoderDriver	typeref:typename:void
CalculateOnResistance	formula.cpp	/^double CalculateOnResistance(double width, int type, double temperature, Technology tech) {$/;"	f	typeref:typename:double
CalculatePassGateArea	formula.cpp	/^double CalculatePassGateArea(	\/\/ Calculate layout area, height and width of pass gate given th/;"	f	typeref:typename:double
CalculatePower	ActivationFunc.cpp	/^void ActivationFunc::CalculatePower(double numRead) $/;"	f	class:ActivationFunc	typeref:typename:void
CalculatePower	Adder.cpp	/^void Adder::CalculatePower(double numRead, int numAdderPerOperation) {$/;"	f	class:Adder	typeref:typename:void
CalculatePower	Comparator.cpp	/^void Comparator::CalculatePower(double numRead, int numComparatorPerOperation) {$/;"	f	class:Comparator	typeref:typename:void
CalculatePower	Core.cpp	/^void Core::CalculatePower(double activityRowRead)$/;"	f	class:Core	typeref:typename:void
CalculatePower	CurrentSenseAmp.cpp	/^void CurrentSenseAmp::CalculatePower(double numRead, int currentlevel) {$/;"	f	class:CurrentSenseAmp	typeref:typename:void
CalculatePower	DFF.cpp	/^void DFF::CalculatePower(double numRead, double numDffPerOperation) {$/;"	f	class:DFF	typeref:typename:void
CalculatePower	DeMux.cpp	/^void DeMux::CalculatePower(double numRead) {$/;"	f	class:DeMux	typeref:typename:void
CalculatePower	DecoderDriver.cpp	/^void DecoderDriver::CalculatePower(double numReadCellPerOp, double numWriteCellPerOp, double num/;"	f	class:DecoderDriver	typeref:typename:void
CalculatePower	HWsim.cpp	/^void HWsim::CalculatePower(double activityRowRead)$/;"	f	class:HWsim	typeref:typename:void
CalculatePower	HWsim.py	/^    def CalculatePower(self, activityRowRead):$/;"	m	class:HWsim
CalculatePower	LUT.cpp	/^void LUT::CalculatePower(double numRead) {$/;"	f	class:LUT	typeref:typename:void
CalculatePower	MultilevelSAEncoder.cpp	/^void MultilevelSAEncoder::CalculatePower(double numRead) {$/;"	f	class:MultilevelSAEncoder	typeref:typename:void
CalculatePower	MultilevelSenseAmp.cpp	/^void MultilevelSenseAmp::CalculatePower(double numof1, double numof2, double numof3, double numo/;"	f	class:MultilevelSenseAmp	typeref:typename:void
CalculatePower	Mux.cpp	/^void Mux::CalculatePower(double numRead) {$/;"	f	class:Mux	typeref:typename:void
CalculatePower	NewSwitchMatrix.cpp	/^void NewSwitchMatrix::CalculatePower(double numRead, double numWrite, double activityRowRead) { /;"	f	class:NewSwitchMatrix	typeref:typename:void
CalculatePower	Precharger.cpp	/^void Precharger::CalculatePower(double numRead, double numWrite) {$/;"	f	class:Precharger	typeref:typename:void
CalculatePower	ReadCircuit.cpp	/^void ReadCircuit::CalculatePower(double numRead) {$/;"	f	class:ReadCircuit	typeref:typename:void
CalculatePower	RippleCounter.cpp	/^void RippleCounter::CalculatePower(double numRead) {$/;"	f	class:RippleCounter	typeref:typename:void
CalculatePower	RowDecoder.cpp	/^void RowDecoder::CalculatePower(double numRead, double numWrite) {$/;"	f	class:RowDecoder	typeref:typename:void
CalculatePower	SRAMWriteDriver.cpp	/^void SRAMWriteDriver::CalculatePower(double numWrite) {$/;"	f	class:SRAMWriteDriver	typeref:typename:void
CalculatePower	SenseAmp.cpp	/^void SenseAmp::CalculatePower(double numRead) {$/;"	f	class:SenseAmp	typeref:typename:void
CalculatePower	ShiftAdd.cpp	/^void ShiftAdd::CalculatePower(double numRead) {$/;"	f	class:ShiftAdd	typeref:typename:void
CalculatePower	SubArray.cpp	/^void SubArray::CalculatePower(double activityRowRead) {$/;"	f	class:SubArray	typeref:typename:void
CalculatePower	Sum.cpp	/^void Sum::CalculatePower(double numRead) $/;"	f	class:Sum	typeref:typename:void
CalculatePower	SwitchMatrix.cpp	/^void SwitchMatrix::CalculatePower(double numRead, double numWrite, double activityRowRead, doubl/;"	f	class:SwitchMatrix	typeref:typename:void
CalculatePower	VoltageSenseAmp.cpp	/^void VoltageSenseAmp::CalculatePower(double numRead) {$/;"	f	class:VoltageSenseAmp	typeref:typename:void
CalculatePower	WLDecoderOutput.cpp	/^void WLDecoderOutput::CalculatePower(double numRead, double numWrite) {$/;"	f	class:WLDecoderOutput	typeref:typename:void
CalculatePower	WLNewDecoderDriver.cpp	/^void WLNewDecoderDriver::CalculatePower(double numRead, double numWrite) {$/;"	f	class:WLNewDecoderDriver	typeref:typename:void
CalculateTransconductance	formula.cpp	/^double CalculateTransconductance(double width, int type, Technology tech) {$/;"	f	typeref:typename:double
CalculateUnitArea	Comparator.cpp	/^void Comparator::CalculateUnitArea(AreaModify _option) {$/;"	f	class:Comparator	typeref:typename:void
CalculateUnitArea	CurrentSenseAmp.cpp	/^void CurrentSenseAmp::CalculateUnitArea() {$/;"	f	class:CurrentSenseAmp	typeref:typename:void
CalculateUnitArea	ReadCircuit.cpp	/^void ReadCircuit::CalculateUnitArea() {$/;"	f	class:ReadCircuit	typeref:typename:void
CalculateUnitArea	VoltageSenseAmp.cpp	/^void VoltageSenseAmp::CalculateUnitArea() {$/;"	f	class:VoltageSenseAmp	typeref:typename:void
CellAccessType	typedef.h	/^enum CellAccessType$/;"	g
CellBits	ReadParam.h	/^	int CellBits;					$/;"	m	class:ReadParam	typeref:typename:int
CellType	typedef.h	/^	enum CellType {$/;"	g	namespace:Type
Comparator	Comparator.cpp	/^Comparator::Comparator(const InputParameter& _inputParameter, const Technology& _tech, const Mem/;"	f	class:Comparator
Comparator	Comparator.h	/^class Comparator: public FunctionUnit {$/;"	c
Core	Core.cpp	/^Core::Core(InputParameter& _inputParameter, Technology& _tech,$/;"	f	class:Core
Core	Core.h	/^class Core: public FunctionUnit {$/;"	c
CurrentSenseAmp	CurrentSenseAmp.cpp	/^CurrentSenseAmp::CurrentSenseAmp(const InputParameter& _inputParameter, const Technology& _tech,/;"	f	class:CurrentSenseAmp
CurrentSenseAmp	CurrentSenseAmp.h	/^class CurrentSenseAmp: public FunctionUnit {$/;"	c
DEMUX_H_	DeMux.h	/^#define DEMUX_H_$/;"	d
DFF	DFF.cpp	/^DFF::DFF(const InputParameter& _inputParameter, const Technology& _tech, const MemCell& _cell): /;"	f	class:DFF
DFF	DFF.h	/^class DFF: public FunctionUnit {$/;"	c
DFF_H_	DFF.h	/^#define DFF_H_$/;"	d
DeMux	DeMux.cpp	/^DeMux::DeMux(const InputParameter& _inputParameter, const Technology& _tech, const MemCell& _cel/;"	f	class:DeMux
DeMux	DeMux.h	/^class DeMux: public FunctionUnit {$/;"	c
DecoderDriver	DecoderDriver.cpp	/^DecoderDriver::DecoderDriver(const InputParameter& _inputParameter, const Technology& _tech, con/;"	f	class:DecoderDriver
DecoderDriver	DecoderDriver.h	/^class DecoderDriver: public FunctionUnit {$/;"	c
DecoderDriver_H_	DecoderDriver.h	/^#define DecoderDriver_H_$/;"	d
DecoderMode	typedef.h	/^enum DecoderMode$/;"	g
DesignMode	typedef.h	/^enum DesignMode$/;"	g
DesignOptimization	typedef.h	/^enum DesignOptimization$/;"	g
DeviceRoadmap	typedef.h	/^enum DeviceRoadmap$/;"	g
DigitalComplementalCode	typedef.h	/^	DigitalComplementalCode$/;"	e	enum:DesignMode
DigitalRRAMTHU	typedef.h	/^		DigitalRRAMTHU,$/;"	e	enum:Type::CellType
FET_2D	typedef.h	/^	FET_2D,			\/* 2D FET *\/$/;"	e	enum:TransistorType
FPGA	MultilevelSenseAmp.h	/^	bool FPGA;$/;"	m	class:MultilevelSenseAmp	typeref:typename:bool
FPGA	Mux.h	/^	bool FPGA;$/;"	m	class:Mux	typeref:typename:bool
FPGA	Precharger.h	/^	bool FPGA;$/;"	m	class:Precharger	typeref:typename:bool
FPGA	SRAMWriteDriver.h	/^	bool FPGA;$/;"	m	class:SRAMWriteDriver	typeref:typename:bool
FPGA	SenseAmp.h	/^	bool FPGA;$/;"	m	class:SenseAmp	typeref:typename:bool
FPGA	SubArray.h	/^	bool FPGA;			\/\/ FPGA mode$/;"	m	class:SubArray	typeref:typename:bool
FULL_Opt	typedef.h	/^	FULL_Opt$/;"	e	enum:DesignOptimization
FUNCTIONUNIT_H_	FunctionUnit.h	/^#define FUNCTIONUNIT_H_$/;"	d
FirstLayer	SubArray.h	/^	bool FirstLayer;       \/\/ First layer ANN$/;"	m	class:SubArray	typeref:typename:bool
Func	ActivationFunc.h	/^	ActivationFunction Func;$/;"	m	class:ActivationFunc	typeref:typename:ActivationFunction
FunctionUnit	FunctionUnit.cpp	/^FunctionUnit::FunctionUnit() {$/;"	f	class:FunctionUnit
FunctionUnit	FunctionUnit.h	/^class FunctionUnit {$/;"	c
FunctionUnit	HWsim.py	/^class FunctionUnit(_object):$/;"	c
FunctionUnit_swigregister	HWsim.py	/^FunctionUnit_swigregister = _HWsim.FunctionUnit_swigregister$/;"	v
FunctionUnit_swigregister	HWsim_wrap.cxx	/^SWIGINTERN PyObject *FunctionUnit_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {$/;"	f	typeref:typename:SWIGINTERN PyObject *
GCC_HASCLASSVISIBILITY	HWsim_wrap.cxx	/^#    define GCC_HASCLASSVISIBILITY$/;"	d	file:
HEIGHT_WIDTH_RATIO_LIMIT	constant.h	/^#define HEIGHT_WIDTH_RATIO_LIMIT	/;"	d
HP	typedef.h	/^	HP,		\/* High performance *\/$/;"	e	enum:DeviceRoadmap
HWSIM_H_	HWsim.h	/^#define HWSIM_H_$/;"	d
HWsim	HWsim.cpp	/^HWsim::HWsim()$/;"	f	class:HWsim
HWsim	HWsim.h	/^class HWsim: public FunctionUnit {$/;"	c
HWsim	HWsim.py	/^class HWsim(FunctionUnit):$/;"	c
HWsim_swigregister	HWsim.py	/^HWsim_swigregister = _HWsim.HWsim_swigregister$/;"	v
HWsim_swigregister	HWsim_wrap.cxx	/^SWIGINTERN PyObject *HWsim_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {$/;"	f	typeref:typename:SWIGINTERN PyObject *
INPUTPARAMETER_H_	InputParameter.h	/^#define INPUTPARAMETER_H_$/;"	d
INV	constant.h	/^#define INV	/;"	d
IOBits	ReadParam.h	/^	int IOBits;$/;"	m	class:ReadParam	typeref:typename:int
IR_DROP_TOLERANCE	constant.h	/^#define IR_DROP_TOLERANCE /;"	d
Initialize	ActivationFunc.cpp	/^void ActivationFunc::Initialize(int _numCol, int _numIOBit, ActivationFunction _Func)$/;"	f	class:ActivationFunc	typeref:typename:void
Initialize	Adder.cpp	/^void Adder::Initialize(int _numBit, int _numAdder){$/;"	f	class:Adder	typeref:typename:void
Initialize	Comparator.cpp	/^void Comparator::Initialize(int _numBit, int _numComparator) {$/;"	f	class:Comparator	typeref:typename:void
Initialize	Core.cpp	/^void Core::Initialize(double _unitWireRes)$/;"	f	class:Core	typeref:typename:void
Initialize	CurrentSenseAmp.cpp	/^void CurrentSenseAmp::Initialize(int _numCol, bool _parallel, bool _rowbyrow, double _clkFreq, i/;"	f	class:CurrentSenseAmp	typeref:typename:void
Initialize	DFF.cpp	/^void DFF::Initialize(int _numDff, double _clkFreq){$/;"	f	class:DFF	typeref:typename:void
Initialize	DeMux.cpp	/^void DeMux::Initialize(int _numInput, int numRow){$/;"	f	class:DeMux	typeref:typename:void
Initialize	DecoderDriver.cpp	/^void DecoderDriver::Initialize(int _mode, int _numOutput \/* # of array rows\/columns *\/, int n/;"	f	class:DecoderDriver	typeref:typename:void
Initialize	HWsim.cpp	/^void HWsim::Initialize()$/;"	f	class:HWsim	typeref:typename:void
Initialize	HWsim.py	/^    def Initialize(self):$/;"	m	class:HWsim
Initialize	LUT.cpp	/^void LUT::Initialize(bool _SRAM, int _numYbit, int _numEntry, double _clkFreq) {$/;"	f	class:LUT	typeref:typename:void
Initialize	MultilevelSAEncoder.cpp	/^void MultilevelSAEncoder::Initialize(int _numLevel, int _numEncoder){$/;"	f	class:MultilevelSAEncoder	typeref:typename:void
Initialize	MultilevelSenseAmp.cpp	/^void MultilevelSenseAmp::Initialize(int _numCol, int _levelOutput, double _clkFreq, int _numRead/;"	f	class:MultilevelSenseAmp	typeref:typename:void
Initialize	Mux.cpp	/^void Mux::Initialize(int _numInput, int _numSelection, double _resTg, bool _FPGA){$/;"	f	class:Mux	typeref:typename:void
Initialize	NewSwitchMatrix.cpp	/^void NewSwitchMatrix::Initialize(int _numOutput, double _clkFreq){$/;"	f	class:NewSwitchMatrix	typeref:typename:void
Initialize	Precharger.cpp	/^void Precharger::Initialize(int _numCol, double _resLoad, bool _FPGA, bool _neuro, double _activ/;"	f	class:Precharger	typeref:typename:void
Initialize	ReadCircuit.cpp	/^void ReadCircuit::Initialize(ReadCircuitMode _mode, int _numReadCol, int _maxNumIntBit, SpikingM/;"	f	class:ReadCircuit	typeref:typename:void
Initialize	RippleCounter.cpp	/^void RippleCounter::Initialize(int _numBit, double _clkFreq) {$/;"	f	class:RippleCounter	typeref:typename:void
Initialize	RowDecoder.cpp	/^void RowDecoder::Initialize(DecoderMode _mode, int _numAddrRow, bool _MUX, bool _parallel) {$/;"	f	class:RowDecoder	typeref:typename:void
Initialize	SRAMWriteDriver.cpp	/^void SRAMWriteDriver::Initialize(int _numCol, bool _FPGA, bool _neuro, double _activityColWrite,/;"	f	class:SRAMWriteDriver	typeref:typename:void
Initialize	SenseAmp.cpp	/^void SenseAmp::Initialize(int _numCol, bool _currentSense, double _senseVoltage, double _pitchSe/;"	f	class:SenseAmp	typeref:typename:void
Initialize	ShiftAdd.cpp	/^void ShiftAdd::Initialize(int _numUnit, int _numAdderBit, double _clkFreq, SpikingMode _spikingM/;"	f	class:ShiftAdd	typeref:typename:void
Initialize	SubArray.cpp	/^void SubArray::Initialize(int _numRow, int _numCol, double _unitWireRes){  \/\/initialization mo/;"	f	class:SubArray	typeref:typename:void
Initialize	Sum.cpp	/^void Sum::Initialize(int _numCol, int _numCellPerSynapse, int _numSumBit)$/;"	f	class:Sum	typeref:typename:void
Initialize	SwitchMatrix.cpp	/^void SwitchMatrix::Initialize(int _mode, int _numOutput, double _resTg, bool _neuro, bool _paral/;"	f	class:SwitchMatrix	typeref:typename:void
Initialize	Technology.cpp	/^void Technology::Initialize(int _featureSizeInNano, DeviceRoadmap _deviceRoadmap, TransistorType/;"	f	class:Technology	typeref:typename:void
Initialize	VoltageSenseAmp.cpp	/^void VoltageSenseAmp::Initialize(int _numReadCol, double _clkFreq) {$/;"	f	class:VoltageSenseAmp	typeref:typename:void
Initialize	WLDecoderOutput.cpp	/^void WLDecoderOutput::Initialize(int _numWLRow, bool _multifunctional, bool _neuro) {$/;"	f	class:WLDecoderOutput	typeref:typename:void
Initialize	WLNewDecoderDriver.cpp	/^void WLNewDecoderDriver::Initialize(int _numWLRow) {$/;"	f	class:WLNewDecoderDriver	typeref:typename:void
InputParameter	InputParameter.h	/^class InputParameter {$/;"	c
LLONG_MAX	HWsim_wrap.cxx	/^#   define LLONG_MAX /;"	d	file:
LLONG_MIN	HWsim_wrap.cxx	/^#   define LLONG_MIN /;"	d	file:
LSTP	typedef.h	/^	LSTP	\/* Low standby power *\/$/;"	e	enum:DeviceRoadmap
LUT	LUT.cpp	/^LUT::LUT(const InputParameter& _inputParameter, const Technology& _tech, const MemCell& _cell): /;"	f	class:LUT
LUT	LUT.h	/^class LUT: public FunctionUnit {$/;"	c
LUT_H_	LUT.h	/^#define LUT_H_$/;"	d
LUT_dynamic	SubArray.h	/^	bool LUT_dynamic;   \/\/ Parameter for FPGA$/;"	m	class:SubArray	typeref:typename:bool
Leakage_Opt	typedef.h	/^	Leakage_Opt,$/;"	e	enum:DesignOptimization
M2_PITCH	constant.h	/^#define M2_PITCH	/;"	d
M3_PITCH	constant.h	/^#define M3_PITCH	/;"	d
MAGIC	typedef.h	/^	MAGIC,		\/* Use magic folding based on the original area *\/$/;"	e	enum:AreaModify
MAINS	makefile	/^MAINS := HWsim_test.cpp  HWsimMain.cpp$/;"	m
MAX	formula.h	/^#define MAX(/;"	d
MAX_NMOS_SIZE	constant.h	/^#define MAX_NMOS_SIZE	/;"	d
MAX_TRANSISTOR_HEIGHT	constant.h	/^#define MAX_TRANSISTOR_HEIGHT /;"	d
MIN	formula.h	/^#define MIN(/;"	d
MIN_GAP_BET_CONTACT_POLY	constant.h	/^#define MIN_GAP_BET_CONTACT_POLY	/;"	d
MIN_GAP_BET_FIELD_POLY	constant.h	/^#define MIN_GAP_BET_FIELD_POLY	/;"	d
MIN_GAP_BET_GATE_POLY	constant.h	/^#define MIN_GAP_BET_GATE_POLY	/;"	d
MIN_GAP_BET_P_AND_N_DIFFS	constant.h	/^#define MIN_GAP_BET_P_AND_N_DIFFS	/;"	d
MIN_GAP_BET_SAME_TYPE_DIFFS	constant.h	/^#define MIN_GAP_BET_SAME_TYPE_DIFFS	/;"	d
MIN_NMOS_SIZE	constant.h	/^#define MIN_NMOS_SIZE	/;"	d
MIN_POLY_EXT_DIFF	constant.h	/^#define MIN_POLY_EXT_DIFF	/;"	d
MIN_WIDTH_POWER_RAIL	constant.h	/^#define MIN_WIDTH_POWER_RAIL	/;"	d
MULTILEVELSENSEAMP_H_	MultilevelSenseAmp.h	/^#define MULTILEVELSENSEAMP_H_$/;"	d
MUX	RowDecoder.h	/^	bool MUX;	\/\/ MUX mode$/;"	m	class:RowDecoder	typeref:typename:bool
MUX_H_	Mux.h	/^#define MUX_H_$/;"	d
MagicLayout	FunctionUnit.cpp	/^void FunctionUnit::MagicLayout() {$/;"	f	class:FunctionUnit	typeref:typename:void
MagicLayout	HWsim.py	/^    def MagicLayout(self):$/;"	m	class:FunctionUnit
MemCell	MemCell.h	/^class MemCell {$/;"	c
MemCellType	typedef.h	/^	enum MemCellType {$/;"	g	namespace:Type
MultilevelSAEncoder	MultilevelSAEncoder.cpp	/^MultilevelSAEncoder::MultilevelSAEncoder(const InputParameter& _inputParameter, const Technology/;"	f	class:MultilevelSAEncoder
MultilevelSAEncoder	MultilevelSAEncoder.h	/^class MultilevelSAEncoder: public FunctionUnit {$/;"	c
MultilevelSAEncoder_H_	MultilevelSAEncoder.h	/^#define MultilevelSAEncoder_H_$/;"	d
MultilevelSenseAmp	MultilevelSenseAmp.cpp	/^MultilevelSenseAmp::MultilevelSenseAmp(const InputParameter& _inputParameter, const Technology& /;"	f	class:MultilevelSenseAmp
MultilevelSenseAmp	MultilevelSenseAmp.h	/^class MultilevelSenseAmp: public FunctionUnit {$/;"	c
Mux	Mux.cpp	/^Mux::Mux(const InputParameter& _inputParameter, const Technology& _tech, const MemCell& _cell): /;"	f	class:Mux
Mux	Mux.h	/^class Mux: public FunctionUnit {$/;"	c
NAND	constant.h	/^#define NAND	/;"	d
NEUROSIM_FORMULA_H_	formula.h	/^#define NEUROSIM_FORMULA_H_$/;"	d
NEWSWITCHMATRIX_H_	NewSwitchMatrix.h	/^#define NEWSWITCHMATRIX_H_$/;"	d
NMOS	constant.h	/^#define NMOS	/;"	d
NONE	typedef.h	/^	NONE,		\/* No action, just use the original area calculation *\/$/;"	e	enum:AreaModify
NONSPIKING	typedef.h	/^	NONSPIKING,	\/* Binary format *\/$/;"	e	enum:SpikingMode
NOR	constant.h	/^#define NOR	/;"	d
NewSwitchMatrix	NewSwitchMatrix.cpp	/^NewSwitchMatrix::NewSwitchMatrix(const InputParameter& _inputParameter, const Technology& _tech,/;"	f	class:NewSwitchMatrix
NewSwitchMatrix	NewSwitchMatrix.h	/^class NewSwitchMatrix: public FunctionUnit {$/;"	c
None	typedef.h	/^	None,$/;"	e	enum:DesignOptimization
NonlinearResistance	formula.cpp	/^double NonlinearResistance(double R, double NL, double Vw, double Vr, double V) {	\/\/ Nonlinear/;"	f	typeref:typename:double
OBJ	makefile	/^OBJ := $(SRC:.cpp=.o)$/;"	m
OSCILLATION	typedef.h	/^	OSCILLATION	\/* NbO2 *\/$/;"	e	enum:ReadCircuitMode
OVERRIDE	typedef.h	/^	OVERRIDE	\/* directly modify the height and width and calculate new area *\/$/;"	e	enum:AreaModify
OverrideLayout	FunctionUnit.cpp	/^void FunctionUnit::OverrideLayout() {$/;"	f	class:FunctionUnit	typeref:typename:void
OverrideLayout	HWsim.py	/^    def OverrideLayout(self):$/;"	m	class:FunctionUnit
PMOS	constant.h	/^#define PMOS	/;"	d
POLY_WIDTH	constant.h	/^#define POLY_WIDTH	/;"	d
PRECHARGER_H_	Precharger.h	/^#define PRECHARGER_H_$/;"	d
PY_SSIZE_T_MAX	HWsim_wrap.cxx	/^# define PY_SSIZE_T_MAX /;"	d	file:
PY_SSIZE_T_MIN	HWsim_wrap.cxx	/^# define PY_SSIZE_T_MIN /;"	d	file:
PitchFin	Technology.h	/^	double PitchFin;	\/* Fin pitch, Unit: m *\/$/;"	m	class:Technology	typeref:typename:double
Precharger	Precharger.cpp	/^Precharger::Precharger(const InputParameter& _inputParameter, const Technology& _tech, const Mem/;"	f	class:Precharger
Precharger	Precharger.h	/^class Precharger: public FunctionUnit {$/;"	c
PrintParameter	ReadParam.cpp	/^void ReadParam::PrintParameter() $/;"	f	class:ReadParam	typeref:typename:void
PrintProperty	ActivationFunc.cpp	/^void ActivationFunc::PrintProperty(const char* str) {$/;"	f	class:ActivationFunc	typeref:typename:void
PrintProperty	Adder.cpp	/^void Adder::PrintProperty(const char* str) {$/;"	f	class:Adder	typeref:typename:void
PrintProperty	Comparator.cpp	/^void Comparator::PrintProperty(const char* str) {$/;"	f	class:Comparator	typeref:typename:void
PrintProperty	Core.cpp	/^void Core::PrintProperty()$/;"	f	class:Core	typeref:typename:void
PrintProperty	CurrentSenseAmp.cpp	/^void CurrentSenseAmp::PrintProperty(const char* str) {$/;"	f	class:CurrentSenseAmp	typeref:typename:void
PrintProperty	DFF.cpp	/^void DFF::PrintProperty(const char* str) {$/;"	f	class:DFF	typeref:typename:void
PrintProperty	DeMux.cpp	/^void DeMux::PrintProperty(const char* str) {$/;"	f	class:DeMux	typeref:typename:void
PrintProperty	DecoderDriver.cpp	/^void DecoderDriver::PrintProperty(const char* str) {$/;"	f	class:DecoderDriver	typeref:typename:void
PrintProperty	FunctionUnit.cpp	/^void FunctionUnit::PrintProperty(const char* str) {$/;"	f	class:FunctionUnit	typeref:typename:void
PrintProperty	HWsim.cpp	/^void HWsim::PrintProperty()$/;"	f	class:HWsim	typeref:typename:void
PrintProperty	HWsim.py	/^    def PrintProperty(self):$/;"	m	class:HWsim
PrintProperty	HWsim.py	/^    def PrintProperty(self, str):$/;"	m	class:FunctionUnit
PrintProperty	LUT.cpp	/^void LUT::PrintProperty(const char* str) {$/;"	f	class:LUT	typeref:typename:void
PrintProperty	MultilevelSAEncoder.cpp	/^void MultilevelSAEncoder::PrintProperty(const char* str) {$/;"	f	class:MultilevelSAEncoder	typeref:typename:void
PrintProperty	MultilevelSenseAmp.cpp	/^void MultilevelSenseAmp::PrintProperty(const char* str) {$/;"	f	class:MultilevelSenseAmp	typeref:typename:void
PrintProperty	Mux.cpp	/^void Mux::PrintProperty(const char* str) {$/;"	f	class:Mux	typeref:typename:void
PrintProperty	NewSwitchMatrix.cpp	/^void NewSwitchMatrix::PrintProperty(const char* str) {$/;"	f	class:NewSwitchMatrix	typeref:typename:void
PrintProperty	Precharger.cpp	/^void Precharger::PrintProperty(const char* str) {$/;"	f	class:Precharger	typeref:typename:void
PrintProperty	ReadCircuit.cpp	/^void ReadCircuit::PrintProperty(const char* str) {$/;"	f	class:ReadCircuit	typeref:typename:void
PrintProperty	RippleCounter.cpp	/^void RippleCounter::PrintProperty(const char* str) {$/;"	f	class:RippleCounter	typeref:typename:void
PrintProperty	RowDecoder.cpp	/^void RowDecoder::PrintProperty(const char* str) {$/;"	f	class:RowDecoder	typeref:typename:void
PrintProperty	SRAMWriteDriver.cpp	/^void SRAMWriteDriver::PrintProperty(const char* str) {$/;"	f	class:SRAMWriteDriver	typeref:typename:void
PrintProperty	SenseAmp.cpp	/^void SenseAmp::PrintProperty(const char* str) {$/;"	f	class:SenseAmp	typeref:typename:void
PrintProperty	ShiftAdd.cpp	/^void ShiftAdd::PrintProperty(const char* str) {$/;"	f	class:ShiftAdd	typeref:typename:void
PrintProperty	SubArray.cpp	/^void SubArray::PrintProperty() {$/;"	f	class:SubArray	typeref:typename:void
PrintProperty	Sum.cpp	/^void Sum::PrintProperty(const char* str) {$/;"	f	class:Sum	typeref:typename:void
PrintProperty	SwitchMatrix.cpp	/^void SwitchMatrix::PrintProperty(const char* str) {$/;"	f	class:SwitchMatrix	typeref:typename:void
PrintProperty	Technology.cpp	/^void Technology::PrintProperty() {$/;"	f	class:Technology	typeref:typename:void
PrintProperty	VoltageSenseAmp.cpp	/^void VoltageSenseAmp::PrintProperty(const char* str) {$/;"	f	class:VoltageSenseAmp	typeref:typename:void
PrintProperty	WLDecoderOutput.cpp	/^void WLDecoderOutput::PrintProperty(const char* str) {$/;"	f	class:WLDecoderOutput	typeref:typename:void
PrintProperty	WLNewDecoderDriver.cpp	/^void WLNewDecoderDriver::PrintProperty(const char* str) {$/;"	f	class:WLNewDecoderDriver	typeref:typename:void
PyBool_FromLong	HWsim_wrap.cxx	/^PyObject *PyBool_FromLong(long ok)$/;"	f	typeref:typename:PyObject *	file:
PyClass_Check	HWsim_wrap.cxx	/^#define PyClass_Check(/;"	d	file:
PyDescr_NAME	HWsim_wrap.cxx	/^#define PyDescr_NAME(/;"	d	file:
PyDescr_TYPE	HWsim_wrap.cxx	/^#define PyDescr_TYPE(/;"	d	file:
PyExc_StopIteration	HWsim_wrap.cxx	/^#  define PyExc_StopIteration /;"	d	file:
PyHeapTypeObject	HWsim_wrap.cxx	/^} PyHeapTypeObject;$/;"	t	typeref:struct:__anon571c7d070108	file:
PyInt_AsLong	HWsim_wrap.cxx	/^#define PyInt_AsLong(/;"	d	file:
PyInt_Check	HWsim_wrap.cxx	/^#define PyInt_Check(/;"	d	file:
PyInt_FromLong	HWsim_wrap.cxx	/^#define PyInt_FromLong(/;"	d	file:
PyInt_FromSize_t	HWsim_wrap.cxx	/^#define PyInt_FromSize_t(/;"	d	file:
PyModule_AddObject	HWsim_wrap.cxx	/^PyModule_AddObject(PyObject *m, char *name, PyObject *o)$/;"	f	typeref:typename:SWIGINTERN int
PyNumber_AsSsize_t	HWsim_wrap.cxx	/^static long PyNumber_AsSsize_t (PyObject *x, void *SWIGUNUSEDPARM(exc))$/;"	f	typeref:typename:long	file:
PyOS_snprintf	HWsim_wrap.cxx	/^#  define PyOS_snprintf /;"	d	file:
PyObject_DEL	HWsim_wrap.cxx	/^# define PyObject_DEL /;"	d	file:
PyObject_Del	HWsim_wrap.cxx	/^# define PyObject_Del(/;"	d	file:
PyObject_GenericGetAttr	HWsim_wrap.cxx	/^#  define PyObject_GenericGetAttr /;"	d	file:
PySequence_Size	HWsim_wrap.cxx	/^#  define PySequence_Size /;"	d	file:
PyString_AS_STRING	HWsim_wrap.cxx	/^#define PyString_AS_STRING(/;"	d	file:
PyString_AsString	HWsim_wrap.cxx	/^#define PyString_AsString(/;"	d	file:
PyString_AsStringAndSize	HWsim_wrap.cxx	/^#  define PyString_AsStringAndSize(/;"	d	file:
PyString_Check	HWsim_wrap.cxx	/^#define PyString_Check(/;"	d	file:
PyString_Format	HWsim_wrap.cxx	/^#define PyString_Format(/;"	d	file:
PyString_FromFormat	HWsim_wrap.cxx	/^PyString_FromFormat(const char *fmt, ...) {$/;"	f	typeref:typename:PyObject *	file:
PyString_FromString	HWsim_wrap.cxx	/^#define PyString_FromString(/;"	d	file:
PyString_InternFromString	HWsim_wrap.cxx	/^#define PyString_InternFromString(/;"	d	file:
PyString_Size	HWsim_wrap.cxx	/^#define PyString_Size(/;"	d	file:
Py_None	HWsim_wrap.cxx	/^#   define Py_None /;"	d	file:
Py_NotImplemented	HWsim_wrap.cxx	/^#  define Py_NotImplemented /;"	d	file:
Py_TPFLAGS_HAVE_CLASS	HWsim_wrap.cxx	/^#define Py_TPFLAGS_HAVE_CLASS /;"	d	file:
Py_TYPE	HWsim_wrap.cxx	/^#  define Py_TYPE(/;"	d	file:
Py_VISIT	HWsim_wrap.cxx	/^#define Py_VISIT(/;"	d	file:
Py_ssize_t	HWsim_wrap.cxx	/^typedef int Py_ssize_t;$/;"	t	typeref:typename:int	file:
RATIO_READ_THRESHOLD_VS_VOLTAGE	constant.h	/^#define RATIO_READ_THRESHOLD_VS_VOLTAGE	/;"	d
READCIRCUIT_H_	ReadCircuit.h	/^#define READCIRCUIT_H_$/;"	d
READPARAM_H_	ReadParam.h	/^#define READPARAM_H_$/;"	d
REGULAR_COL	typedef.h	/^	REGULAR_COL,	\/* Regular column mode *\/$/;"	e	enum:DecoderMode
REGULAR_ROW	typedef.h	/^	REGULAR_ROW,	\/* Regular row mode *\/$/;"	e	enum:DecoderMode
RIPPLECOUNTER_H_	RippleCounter.h	/^#define RIPPLECOUNTER_H_$/;"	d
ROWDECODER_H_	RowDecoder.h	/^#define ROWDECODER_H_$/;"	d
ROW_MODE	constant.h	/^#define	ROW_MODE	/;"	d
RRAM	typedef.h	/^		RRAM$/;"	e	enum:Type::MemCellType
RRAMFeatureSize	Technology.h	/^	double RRAMFeatureSize;	\/* Process feature size of RRAM, Unit: m *\/$/;"	m	class:Technology	typeref:typename:double
R_OSC_OFF	ReadCircuit.h	/^	double Vhold, Vth, Vrow, Vcol, R_OSC_OFF;$/;"	m	class:ReadCircuit	typeref:typename:double
ReLU	typedef.h	/^	ReLU,$/;"	e	enum:ActivationFunction
ReadCircuit	ReadCircuit.cpp	/^ReadCircuit::ReadCircuit(const InputParameter& _inputParameter, const Technology& _tech, const M/;"	f	class:ReadCircuit
ReadCircuit	ReadCircuit.h	/^class ReadCircuit: public FunctionUnit {$/;"	c
ReadCircuitMode	typedef.h	/^enum ReadCircuitMode$/;"	g
ReadDynamicEnergy_Opt	typedef.h	/^	ReadDynamicEnergy_Opt,$/;"	e	enum:DesignOptimization
ReadLatency_Opt	typedef.h	/^	ReadLatency_Opt,$/;"	e	enum:DesignOptimization
ReadParam	ReadParam.cpp	/^ReadParam::ReadParam() $/;"	f	class:ReadParam
ReadParam	ReadParam.h	/^class ReadParam {$/;"	c
ReadParameterFromFile	ReadParam.cpp	/^void ReadParam::ReadParameterFromFile(const string & inputFile)$/;"	f	class:ReadParam	typeref:typename:void
ReadPulseWidth	ReadParam.h	/^	double ReadPulseWidth;			\/* Read Pulse Width, Unit: s *\/$/;"	m	class:ReadParam	typeref:typename:double
ReadVoltage	ReadParam.h	/^	double ReadVoltage;				\/* Read Voltage, Unit: V *\/$/;"	m	class:ReadParam	typeref:typename:double
ResetPulseWidth	ReadParam.h	/^	double ResetPulseWidth;			\/* Reset Pulse Width, Unit: s *\/$/;"	m	class:ReadParam	typeref:typename:double
ResetVoltage	ReadParam.h	/^	double ResetVoltage;			\/* Reset Voltage, Unit: V *\/$/;"	m	class:ReadParam	typeref:typename:double
RippleCounter	RippleCounter.cpp	/^RippleCounter::RippleCounter(const InputParameter& _inputParameter, const Technology& _tech, con/;"	f	class:RippleCounter
RippleCounter	RippleCounter.h	/^class RippleCounter: public FunctionUnit {$/;"	c
Rmax	ReadParam.h	/^	int Rmax;						\/* Max resistance of cell, Unit: ohm *\/$/;"	m	class:ReadParam	typeref:typename:int
Rmin	ReadParam.h	/^	int Rmin;						\/* Min resistance of cell, Unit: ohm *\/$/;"	m	class:ReadParam	typeref:typename:int
RowDecoder	RowDecoder.cpp	/^RowDecoder::RowDecoder(const InputParameter& _inputParameter, const Technology& _tech, const Mem/;"	f	class:RowDecoder
RowDecoder	RowDecoder.h	/^class RowDecoder: public FunctionUnit {$/;"	c
SABits	ReadParam.h	/^	int SABits;						\/* SA bits *\/$/;"	m	class:ReadParam	typeref:typename:int
SENSEAMP_H_	SenseAmp.h	/^#define SENSEAMP_H_$/;"	d
SHIFTADD_H_	ShiftAdd.h	/^#define SHIFTADD_H_$/;"	d
SPIKING	typedef.h	/^	SPIKING$/;"	e	enum:SpikingMode
SRAM	LUT.h	/^	bool SRAM;$/;"	m	class:LUT	typeref:typename:bool
SRAM	typedef.h	/^		SRAM,$/;"	e	enum:Type::MemCellType
SRAMWRITEDRIVER_H_	SRAMWriteDriver.h	/^#define SRAMWRITEDRIVER_H_$/;"	d
SRAMWriteDriver	SRAMWriteDriver.cpp	/^SRAMWriteDriver::SRAMWriteDriver(const InputParameter& _inputParameter, const Technology& _tech,/;"	f	class:SRAMWriteDriver
SRAMWriteDriver	SRAMWriteDriver.h	/^class SRAMWriteDriver: public FunctionUnit {$/;"	c
SRC	makefile	/^SRC := $(filter-out $(MAINS),$(ALLSRC))$/;"	m
SUBARRAY_H_	SubArray.h	/^#define SUBARRAY_H_$/;"	d
SUM_H_	Sum.h	/^#define SUM_H_$/;"	d
SWIGEXPORT	HWsim_wrap.cxx	/^#     define SWIGEXPORT /;"	d	file:
SWIGEXPORT	HWsim_wrap.cxx	/^#     define SWIGEXPORT$/;"	d	file:
SWIGINLINE	HWsim_wrap.cxx	/^#   define SWIGINLINE /;"	d	file:
SWIGINLINE	HWsim_wrap.cxx	/^#   define SWIGINLINE$/;"	d	file:
SWIGINTERN	HWsim_wrap.cxx	/^# define SWIGINTERN /;"	d	file:
SWIGINTERNINLINE	HWsim_wrap.cxx	/^# define SWIGINTERNINLINE /;"	d	file:
SWIGPYTHON	HWsim_wrap.cxx	/^#define SWIGPYTHON$/;"	d	file:
SWIGPY_CAPSULE_NAME	HWsim_wrap.cxx	/^# define SWIGPY_CAPSULE_NAME /;"	d	file:
SWIGPY_SLICE_ARG	HWsim_wrap.cxx	/^# define SWIGPY_SLICE_ARG(/;"	d	file:
SWIGPY_USE_CAPSULE	HWsim_wrap.cxx	/^# define SWIGPY_USE_CAPSULE$/;"	d	file:
SWIGRUNTIME	HWsim_wrap.cxx	/^# define SWIGRUNTIME /;"	d	file:
SWIGRUNTIMEINLINE	HWsim_wrap.cxx	/^# define SWIGRUNTIMEINLINE /;"	d	file:
SWIGSTDCALL	HWsim_wrap.cxx	/^#   define SWIGSTDCALL /;"	d	file:
SWIGSTDCALL	HWsim_wrap.cxx	/^#   define SWIGSTDCALL$/;"	d	file:
SWIGTEMPLATEDISAMBIGUATOR	HWsim_wrap.cxx	/^#  define SWIGTEMPLATEDISAMBIGUATOR /;"	d	file:
SWIGTEMPLATEDISAMBIGUATOR	HWsim_wrap.cxx	/^#  define SWIGTEMPLATEDISAMBIGUATOR$/;"	d	file:
SWIGTYPE_p_Core	HWsim_wrap.cxx	/^#define SWIGTYPE_p_Core /;"	d	file:
SWIGTYPE_p_FunctionUnit	HWsim_wrap.cxx	/^#define SWIGTYPE_p_FunctionUnit /;"	d	file:
SWIGTYPE_p_HWsim	HWsim_wrap.cxx	/^#define SWIGTYPE_p_HWsim /;"	d	file:
SWIGTYPE_p_InputParameter	HWsim_wrap.cxx	/^#define SWIGTYPE_p_InputParameter /;"	d	file:
SWIGTYPE_p_MemCell	HWsim_wrap.cxx	/^#define SWIGTYPE_p_MemCell /;"	d	file:
SWIGTYPE_p_ReadParam	HWsim_wrap.cxx	/^#define SWIGTYPE_p_ReadParam /;"	d	file:
SWIGTYPE_p_Technology	HWsim_wrap.cxx	/^#define SWIGTYPE_p_Technology /;"	d	file:
SWIGTYPE_p_char	HWsim_wrap.cxx	/^#define SWIGTYPE_p_char /;"	d	file:
SWIGTYPE_p_std__invalid_argument	HWsim_wrap.cxx	/^#define SWIGTYPE_p_std__invalid_argument /;"	d	file:
SWIGTYPE_p_swig__SwigPyIterator	HWsim_wrap.cxx	/^#define SWIGTYPE_p_swig__SwigPyIterator /;"	d	file:
SWIGUNUSED	HWsim_wrap.cxx	/^#     define SWIGUNUSED /;"	d	file:
SWIGUNUSED	HWsim_wrap.cxx	/^#     define SWIGUNUSED$/;"	d	file:
SWIGUNUSED	HWsim_wrap.cxx	/^#   define SWIGUNUSED /;"	d	file:
SWIGUNUSED	HWsim_wrap.cxx	/^#   define SWIGUNUSED$/;"	d	file:
SWIGUNUSEDPARM	HWsim_wrap.cxx	/^#   define SWIGUNUSEDPARM(/;"	d	file:
SWIGVERSION	HWsim_wrap.cxx	/^#define SWIGVERSION /;"	d	file:
SWIG_AcquirePtr	HWsim_wrap.cxx	/^#define SWIG_AcquirePtr(/;"	d	file:
SWIG_AddCast	HWsim_wrap.cxx	/^#  define SWIG_AddCast(/;"	d	file:
SWIG_AddCast	HWsim_wrap.cxx	/^SWIGINTERNINLINE int SWIG_AddCast(int r) {$/;"	f	typeref:typename:SWIGINTERNINLINE int
SWIG_AddNewMask	HWsim_wrap.cxx	/^#define SWIG_AddNewMask(/;"	d	file:
SWIG_AddTmpMask	HWsim_wrap.cxx	/^#define SWIG_AddTmpMask(/;"	d	file:
SWIG_ArgError	HWsim_wrap.cxx	/^#define SWIG_ArgError(/;"	d	file:
SWIG_AsCharPtrAndSize	HWsim_wrap.cxx	/^SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)$/;"	f	typeref:typename:SWIGINTERN int
SWIG_AsVal_bool	HWsim_wrap.cxx	/^SWIG_AsVal_bool (PyObject *obj, bool *val)$/;"	f	typeref:typename:SWIGINTERN int
SWIG_AsVal_double	HWsim_wrap.cxx	/^SWIG_AsVal_double (PyObject *obj, double *val)$/;"	f	typeref:typename:SWIGINTERN int
SWIG_AsVal_int	HWsim_wrap.cxx	/^SWIG_AsVal_int (PyObject * obj, int *val)$/;"	f	typeref:typename:SWIGINTERN int
SWIG_AsVal_long	HWsim_wrap.cxx	/^SWIG_AsVal_long (PyObject *obj, long* val)$/;"	f	typeref:typename:SWIGINTERN int
SWIG_AsVal_ptrdiff_t	HWsim_wrap.cxx	/^SWIG_AsVal_ptrdiff_t (PyObject * obj, ptrdiff_t *val)$/;"	f	typeref:typename:SWIGINTERNINLINE int
SWIG_AsVal_size_t	HWsim_wrap.cxx	/^SWIG_AsVal_size_t (PyObject * obj, size_t *val)$/;"	f	typeref:typename:SWIGINTERNINLINE int
SWIG_AsVal_unsigned_SS_long	HWsim_wrap.cxx	/^SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) $/;"	f	typeref:typename:SWIGINTERN int
SWIG_AttributeError	HWsim_wrap.cxx	/^#define  SWIG_AttributeError /;"	d	file:
SWIG_BADOBJ	HWsim_wrap.cxx	/^#define SWIG_BADOBJ /;"	d	file:
SWIG_BUFFER_SIZE	HWsim_wrap.cxx	/^# define SWIG_BUFFER_SIZE /;"	d	file:
SWIG_BUILTIN_INIT	HWsim_wrap.cxx	/^#define SWIG_BUILTIN_INIT	/;"	d	file:
SWIG_BUILTIN_TP_INIT	HWsim_wrap.cxx	/^#define SWIG_BUILTIN_TP_INIT	/;"	d	file:
SWIG_CASTRANKLIMIT	HWsim_wrap.cxx	/^#define SWIG_CASTRANKLIMIT /;"	d	file:
SWIG_CASTRANKMASK	HWsim_wrap.cxx	/^#  define SWIG_CASTRANKMASK /;"	d	file:
SWIG_CAST_NEW_MEMORY	HWsim_wrap.cxx	/^#define SWIG_CAST_NEW_MEMORY /;"	d	file:
SWIG_CanCastAsInteger	HWsim_wrap.cxx	/^SWIG_CanCastAsInteger(double *d, double min, double max) {$/;"	f	typeref:typename:SWIGINTERNINLINE int
SWIG_CastRank	HWsim_wrap.cxx	/^#  define SWIG_CastRank(/;"	d	file:
SWIG_CheckImplicit	HWsim_wrap.cxx	/^#define SWIG_CheckImplicit(/;"	d	file:
SWIG_CheckState	HWsim_wrap.cxx	/^#  define SWIG_CheckState(/;"	d	file:
SWIG_CheckState	HWsim_wrap.cxx	/^SWIGINTERNINLINE int SWIG_CheckState(int r) {$/;"	f	typeref:typename:SWIGINTERNINLINE int
SWIG_ConvertFunctionPtr	HWsim_wrap.cxx	/^#define SWIG_ConvertFunctionPtr(/;"	d	file:
SWIG_ConvertInstance	HWsim_wrap.cxx	/^#define SWIG_ConvertInstance(/;"	d	file:
SWIG_ConvertMember	HWsim_wrap.cxx	/^#define SWIG_ConvertMember(/;"	d	file:
SWIG_ConvertPacked	HWsim_wrap.cxx	/^#define SWIG_ConvertPacked(/;"	d	file:
SWIG_ConvertPtr	HWsim_wrap.cxx	/^#define SWIG_ConvertPtr(/;"	d	file:
SWIG_ConvertPtrAndOwn	HWsim_wrap.cxx	/^#define SWIG_ConvertPtrAndOwn(/;"	d	file:
SWIG_DelNewMask	HWsim_wrap.cxx	/^#define SWIG_DelNewMask(/;"	d	file:
SWIG_DelTmpMask	HWsim_wrap.cxx	/^#define SWIG_DelTmpMask(/;"	d	file:
SWIG_DivisionByZero	HWsim_wrap.cxx	/^#define  SWIG_DivisionByZero /;"	d	file:
SWIG_ERROR	HWsim_wrap.cxx	/^#define SWIG_ERROR /;"	d	file:
SWIG_EXPAND_AND_QUOTE_STRING	HWsim_wrap.cxx	/^# define SWIG_EXPAND_AND_QUOTE_STRING(/;"	d	file:
SWIG_Error	HWsim_wrap.cxx	/^#define SWIG_Error(/;"	d	file:
SWIG_ErrorType	HWsim_wrap.cxx	/^#define SWIG_ErrorType(/;"	d	file:
SWIG_From_bool	HWsim_wrap.cxx	/^  SWIG_From_bool  (bool value)$/;"	f	typeref:typename:SWIGINTERNINLINE PyObject *
SWIG_From_double	HWsim_wrap.cxx	/^  #define SWIG_From_double /;"	d	file:
SWIG_From_int	HWsim_wrap.cxx	/^  SWIG_From_int  (int value)$/;"	f	typeref:typename:SWIGINTERNINLINE PyObject *
SWIG_From_long	HWsim_wrap.cxx	/^  #define SWIG_From_long /;"	d	file:
SWIG_From_ptrdiff_t	HWsim_wrap.cxx	/^SWIG_From_ptrdiff_t  (ptrdiff_t value)$/;"	f	typeref:typename:SWIGINTERNINLINE PyObject *
SWIG_GetModule	HWsim_wrap.cxx	/^#define SWIG_GetModule(/;"	d	file:
SWIG_IOError	HWsim_wrap.cxx	/^#define  SWIG_IOError /;"	d	file:
SWIG_IndexError	HWsim_wrap.cxx	/^#define  SWIG_IndexError /;"	d	file:
SWIG_InitializeModule	HWsim_wrap.cxx	/^SWIG_InitializeModule(void *clientdata) {$/;"	f	typeref:typename:SWIGRUNTIME void
SWIG_InstallConstants	HWsim_wrap.cxx	/^#define SWIG_InstallConstants(/;"	d	file:
SWIG_InternalNewPointerObj	HWsim_wrap.cxx	/^#define SWIG_InternalNewPointerObj(/;"	d	file:
SWIG_IsNewObj	HWsim_wrap.cxx	/^#define SWIG_IsNewObj(/;"	d	file:
SWIG_IsOK	HWsim_wrap.cxx	/^#define SWIG_IsOK(/;"	d	file:
SWIG_IsTmpObj	HWsim_wrap.cxx	/^#define SWIG_IsTmpObj(/;"	d	file:
SWIG_MAXCASTRANK	HWsim_wrap.cxx	/^#    define SWIG_MAXCASTRANK /;"	d	file:
SWIG_MangledTypeQuery	HWsim_wrap.cxx	/^#define SWIG_MangledTypeQuery(/;"	d	file:
SWIG_MangledTypeQueryModule	HWsim_wrap.cxx	/^SWIG_MangledTypeQueryModule(swig_module_info *start,$/;"	f	typeref:typename:SWIGRUNTIME swig_type_info *
SWIG_MemoryError	HWsim_wrap.cxx	/^#define  SWIG_MemoryError /;"	d	file:
SWIG_MustGetPtr	HWsim_wrap.cxx	/^#define SWIG_MustGetPtr(/;"	d	file:
SWIG_NEWOBJ	HWsim_wrap.cxx	/^#define SWIG_NEWOBJ /;"	d	file:
SWIG_NEWOBJMASK	HWsim_wrap.cxx	/^#define SWIG_NEWOBJMASK /;"	d	file:
SWIG_NewClientData	HWsim_wrap.cxx	/^#define SWIG_NewClientData(/;"	d	file:
SWIG_NewFunctionPtrObj	HWsim_wrap.cxx	/^#define SWIG_NewFunctionPtrObj(/;"	d	file:
SWIG_NewInstanceObj	HWsim_wrap.cxx	/^#define SWIG_NewInstanceObj(/;"	d	file:
SWIG_NewMemberObj	HWsim_wrap.cxx	/^#define SWIG_NewMemberObj(/;"	d	file:
SWIG_NewPackedObj	HWsim_wrap.cxx	/^#define SWIG_NewPackedObj(/;"	d	file:
SWIG_NewPointerObj	HWsim_wrap.cxx	/^#define SWIG_NewPointerObj(/;"	d	file:
SWIG_NullReferenceError	HWsim_wrap.cxx	/^#define  SWIG_NullReferenceError /;"	d	file:
SWIG_OK	HWsim_wrap.cxx	/^#define SWIG_OK /;"	d	file:
SWIG_OLDOBJ	HWsim_wrap.cxx	/^#define SWIG_OLDOBJ /;"	d	file:
SWIG_OverflowError	HWsim_wrap.cxx	/^#define  SWIG_OverflowError /;"	d	file:
SWIG_POINTER_DISOWN	HWsim_wrap.cxx	/^#define SWIG_POINTER_DISOWN /;"	d	file:
SWIG_POINTER_EXCEPTION	HWsim_wrap.cxx	/^#define SWIG_POINTER_EXCEPTION /;"	d	file:
SWIG_POINTER_IMPLICIT_CONV	HWsim_wrap.cxx	/^#define SWIG_POINTER_IMPLICIT_CONV /;"	d	file:
SWIG_POINTER_NEW	HWsim_wrap.cxx	/^#define SWIG_POINTER_NEW /;"	d	file:
SWIG_POINTER_NOSHADOW	HWsim_wrap.cxx	/^#define SWIG_POINTER_NOSHADOW /;"	d	file:
SWIG_POINTER_OWN	HWsim_wrap.cxx	/^#define SWIG_POINTER_OWN /;"	d	file:
SWIG_PYBUFFER_SIZE	HWsim_wrap.cxx	/^# define SWIG_PYBUFFER_SIZE /;"	d	file:
SWIG_PYTHON_BUILD_NONE	HWsim_wrap.cxx	/^#      define SWIG_PYTHON_BUILD_NONE$/;"	d	file:
SWIG_PYTHON_DIRECTOR_NO_VTABLE	HWsim_wrap.cxx	/^#define SWIG_PYTHON_DIRECTOR_NO_VTABLE$/;"	d	file:
SWIG_PYTHON_INITIALIZE_THREADS	HWsim_wrap.cxx	/^#      define SWIG_PYTHON_INITIALIZE_THREADS$/;"	d	file:
SWIG_PYTHON_INITIALIZE_THREADS	HWsim_wrap.cxx	/^#     define SWIG_PYTHON_INITIALIZE_THREADS /;"	d	file:
SWIG_PYTHON_INITIALIZE_THREADS	HWsim_wrap.cxx	/^#  define SWIG_PYTHON_INITIALIZE_THREADS$/;"	d	file:
SWIG_PYTHON_SLOW_GETSET_THIS	HWsim_wrap.cxx	/^#define SWIG_PYTHON_SLOW_GETSET_THIS /;"	d	file:
SWIG_PYTHON_THREAD_BEGIN_ALLOW	HWsim_wrap.cxx	/^#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW /;"	d	file:
SWIG_PYTHON_THREAD_BEGIN_ALLOW	HWsim_wrap.cxx	/^#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW$/;"	d	file:
SWIG_PYTHON_THREAD_BEGIN_ALLOW	HWsim_wrap.cxx	/^#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW$/;"	d	file:
SWIG_PYTHON_THREAD_BEGIN_BLOCK	HWsim_wrap.cxx	/^#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK /;"	d	file:
SWIG_PYTHON_THREAD_BEGIN_BLOCK	HWsim_wrap.cxx	/^#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK$/;"	d	file:
SWIG_PYTHON_THREAD_BEGIN_BLOCK	HWsim_wrap.cxx	/^#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK$/;"	d	file:
SWIG_PYTHON_THREAD_END_ALLOW	HWsim_wrap.cxx	/^#      define SWIG_PYTHON_THREAD_END_ALLOW /;"	d	file:
SWIG_PYTHON_THREAD_END_ALLOW	HWsim_wrap.cxx	/^#      define SWIG_PYTHON_THREAD_END_ALLOW$/;"	d	file:
SWIG_PYTHON_THREAD_END_ALLOW	HWsim_wrap.cxx	/^#  define SWIG_PYTHON_THREAD_END_ALLOW$/;"	d	file:
SWIG_PYTHON_THREAD_END_BLOCK	HWsim_wrap.cxx	/^#      define SWIG_PYTHON_THREAD_END_BLOCK /;"	d	file:
SWIG_PYTHON_THREAD_END_BLOCK	HWsim_wrap.cxx	/^#      define SWIG_PYTHON_THREAD_END_BLOCK$/;"	d	file:
SWIG_PYTHON_THREAD_END_BLOCK	HWsim_wrap.cxx	/^#  define SWIG_PYTHON_THREAD_END_BLOCK$/;"	d	file:
SWIG_PYTHON_USE_GIL	HWsim_wrap.cxx	/^#      define SWIG_PYTHON_USE_GIL$/;"	d	file:
SWIG_PY_BINARY	HWsim_wrap.cxx	/^#define SWIG_PY_BINARY /;"	d	file:
SWIG_PY_POINTER	HWsim_wrap.cxx	/^#define SWIG_PY_POINTER /;"	d	file:
SWIG_PackData	HWsim_wrap.cxx	/^SWIG_PackData(char *c, void *ptr, size_t sz) {$/;"	f	typeref:typename:SWIGRUNTIME char *
SWIG_PackDataName	HWsim_wrap.cxx	/^SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {$/;"	f	typeref:typename:SWIGRUNTIME char *
SWIG_PackVoidPtr	HWsim_wrap.cxx	/^SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {$/;"	f	typeref:typename:SWIGRUNTIME char *
SWIG_PropagateClientData	HWsim_wrap.cxx	/^SWIG_PropagateClientData(void) {$/;"	f	typeref:typename:SWIGRUNTIME void
SWIG_PyInstanceMethod_New	HWsim_wrap.cxx	/^SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUN/;"	f	typeref:typename:SWIGRUNTIME PyObject *
SWIG_PyInstanceMethod_New	HWsim_wrap.cxx	/^SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func)$/;"	f	typeref:typename:SWIGRUNTIME PyObject *
SWIG_Py_None	HWsim_wrap.cxx	/^SWIG_Py_None(void)$/;"	f	typeref:typename:SWIGRUNTIME PyObject *
SWIG_Py_Void	HWsim_wrap.cxx	/^SWIG_Py_Void(void)$/;"	f	typeref:typename:SWIGRUNTIMEINLINE PyObject *
SWIG_Python_AcquirePtr	HWsim_wrap.cxx	/^SWIG_Python_AcquirePtr(PyObject *obj, int own) {$/;"	f	typeref:typename:SWIGRUNTIME int
SWIG_Python_AddErrMesg	HWsim_wrap.cxx	/^SWIG_Python_AddErrMesg(const char* mesg, int infront)$/;"	f	typeref:typename:SWIGRUNTIME int
SWIG_Python_AddErrorMsg	HWsim_wrap.cxx	/^SWIG_Python_AddErrorMsg(const char* mesg)$/;"	f	typeref:typename:SWIGRUNTIME void
SWIG_Python_AppendOutput	HWsim_wrap.cxx	/^SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {$/;"	f	typeref:typename:SWIGINTERN PyObject *
SWIG_Python_ArgFail	HWsim_wrap.cxx	/^SWIG_Python_ArgFail(int argnum)$/;"	f	typeref:typename:SWIGRUNTIME int
SWIG_Python_CallFunctor	HWsim_wrap.cxx	/^#define SWIG_Python_CallFunctor(/;"	d	file:
SWIG_Python_CheckImplicit	HWsim_wrap.cxx	/^SWIG_Python_CheckImplicit(swig_type_info *ty)$/;"	f	typeref:typename:SWIGRUNTIMEINLINE int
SWIG_Python_ConvertFunctionPtr	HWsim_wrap.cxx	/^SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {$/;"	f	typeref:typename:SWIGRUNTIME int
SWIG_Python_ConvertPacked	HWsim_wrap.cxx	/^SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {$/;"	f	typeref:typename:SWIGRUNTIME int
SWIG_Python_ConvertPtr	HWsim_wrap.cxx	/^#define SWIG_Python_ConvertPtr(/;"	d	file:
SWIG_Python_ConvertPtrAndOwn	HWsim_wrap.cxx	/^SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own)/;"	f	typeref:typename:SWIGRUNTIME int
SWIG_Python_DestroyModule	HWsim_wrap.cxx	/^SWIG_Python_DestroyModule(PyObject *obj)$/;"	f	typeref:typename:SWIGRUNTIME void
SWIG_Python_ErrorType	HWsim_wrap.cxx	/^SWIG_Python_ErrorType(int code) {$/;"	f	typeref:typename:SWIGRUNTIME PyObject *
SWIG_Python_ExceptionType	HWsim_wrap.cxx	/^SWIG_Python_ExceptionType(swig_type_info *desc) {$/;"	f	typeref:typename:SWIGRUNTIMEINLINE PyObject *
SWIG_Python_FixMethods	HWsim_wrap.cxx	/^  SWIG_Python_FixMethods(PyMethodDef *methods,$/;"	f	typeref:typename:SWIGINTERN void
SWIG_Python_GetModule	HWsim_wrap.cxx	/^SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {$/;"	f	typeref:typename:SWIGRUNTIME swig_module_info *
SWIG_Python_GetSwigThis	HWsim_wrap.cxx	/^SWIG_Python_GetSwigThis(PyObject *pyobj) $/;"	f	typeref:typename:SWIGRUNTIME SwigPyObject *
SWIG_Python_InitShadowInstance	HWsim_wrap.cxx	/^SWIG_Python_InitShadowInstance(PyObject *args) {$/;"	f	typeref:typename:SWIGINTERN PyObject *
SWIG_Python_InstallConstants	HWsim_wrap.cxx	/^  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {$/;"	f	typeref:typename:SWIGINTERN void
SWIG_Python_MustGetPtr	HWsim_wrap.cxx	/^SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags)/;"	f	typeref:typename:SWIGRUNTIME void *
SWIG_Python_NewPackedObj	HWsim_wrap.cxx	/^SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {$/;"	f	typeref:typename:SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPointerObj	HWsim_wrap.cxx	/^SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {$/;"	f	typeref:typename:SWIGRUNTIME PyObject *
SWIG_Python_NewShadowInstance	HWsim_wrap.cxx	/^SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)$/;"	f	typeref:typename:SWIGRUNTIME PyObject *
SWIG_Python_NonDynamicSetAttr	HWsim_wrap.cxx	/^SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {$/;"	f	typeref:typename:SWIGRUNTIME int
SWIG_Python_Raise	HWsim_wrap.cxx	/^#define SWIG_Python_Raise(/;"	d	file:
SWIG_Python_SetConstant	HWsim_wrap.cxx	/^SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj/;"	f	typeref:typename:SWIGINTERN void
SWIG_Python_SetConstant	HWsim_wrap.cxx	/^SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   $/;"	f	typeref:typename:SWIGINTERN void
SWIG_Python_SetErrorMsg	HWsim_wrap.cxx	/^SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {$/;"	f	typeref:typename:SWIGINTERN void
SWIG_Python_SetErrorObj	HWsim_wrap.cxx	/^SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {$/;"	f	typeref:typename:SWIGINTERN void
SWIG_Python_SetModule	HWsim_wrap.cxx	/^SWIG_Python_SetModule(swig_module_info *swig_module) {$/;"	f	typeref:typename:SWIGRUNTIME void
SWIG_Python_SetSwigThis	HWsim_wrap.cxx	/^SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)$/;"	f	typeref:typename:SWIGRUNTIME void
SWIG_Python_Thread_Allow	HWsim_wrap.cxx	/^         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}$/;"	f	class:SWIG_Python_Thread_Allow	file:
SWIG_Python_Thread_Allow	HWsim_wrap.cxx	/^       class SWIG_Python_Thread_Allow {$/;"	c	file:
SWIG_Python_Thread_Block	HWsim_wrap.cxx	/^         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}$/;"	f	class:SWIG_Python_Thread_Block	file:
SWIG_Python_Thread_Block	HWsim_wrap.cxx	/^       class SWIG_Python_Thread_Block {$/;"	c	file:
SWIG_Python_TypeCache	HWsim_wrap.cxx	/^SWIG_Python_TypeCache(void) {$/;"	f	typeref:typename:SWIGRUNTIME PyObject *
SWIG_Python_TypeError	HWsim_wrap.cxx	/^SWIG_Python_TypeError(const char *type, PyObject *obj)$/;"	f	typeref:typename:SWIGRUNTIME void
SWIG_Python_TypeQuery	HWsim_wrap.cxx	/^SWIG_Python_TypeQuery(const char *type)$/;"	f	typeref:typename:SWIGRUNTIME swig_type_info *
SWIG_Python_UnpackTuple	HWsim_wrap.cxx	/^SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObje/;"	f	typeref:typename:SWIGINTERN Py_ssize_t
SWIG_Python_addvarlink	HWsim_wrap.cxx	/^  SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(P/;"	f	typeref:typename:SWIGINTERN void
SWIG_Python_newvarlink	HWsim_wrap.cxx	/^  SWIG_Python_newvarlink(void) {$/;"	f	typeref:typename:SWIGINTERN PyObject *
SWIG_Python_str_AsChar	HWsim_wrap.cxx	/^SWIG_Python_str_AsChar(PyObject *str)$/;"	f	typeref:typename:SWIGINTERN char *
SWIG_Python_str_DelForPy3	HWsim_wrap.cxx	/^#  define SWIG_Python_str_DelForPy3(/;"	d	file:
SWIG_Python_str_FromChar	HWsim_wrap.cxx	/^SWIG_Python_str_FromChar(const char *c)$/;"	f	typeref:typename:SWIGINTERN PyObject *
SWIG_Python_str_FromFormat	HWsim_wrap.cxx	/^#  define SWIG_Python_str_FromFormat /;"	d	file:
SWIG_QUOTE_STRING	HWsim_wrap.cxx	/^# define SWIG_QUOTE_STRING(/;"	d	file:
SWIG_RUNTIME_VERSION	HWsim_wrap.cxx	/^#define SWIG_RUNTIME_VERSION /;"	d	file:
SWIG_RuntimeError	HWsim_wrap.cxx	/^#define  SWIG_RuntimeError /;"	d	file:
SWIG_STATIC_POINTER	HWsim_wrap.cxx	/^#define SWIG_STATIC_POINTER(/;"	d	file:
SWIG_STD_NOMODERN_STL	HWsim_wrap.cxx	/^#     define SWIG_STD_NOMODERN_STL$/;"	d	file:
SWIG_SetErrorMsg	HWsim_wrap.cxx	/^#define SWIG_SetErrorMsg /;"	d	file:
SWIG_SetErrorObj	HWsim_wrap.cxx	/^#define SWIG_SetErrorObj /;"	d	file:
SWIG_SetModule	HWsim_wrap.cxx	/^#define SWIG_SetModule(/;"	d	file:
SWIG_SyntaxError	HWsim_wrap.cxx	/^#define  SWIG_SyntaxError /;"	d	file:
SWIG_SystemError	HWsim_wrap.cxx	/^#define  SWIG_SystemError /;"	d	file:
SWIG_TMPOBJ	HWsim_wrap.cxx	/^#define SWIG_TMPOBJ /;"	d	file:
SWIG_TMPOBJMASK	HWsim_wrap.cxx	/^#define SWIG_TMPOBJMASK /;"	d	file:
SWIG_TYPE_TABLE_NAME	HWsim_wrap.cxx	/^# define SWIG_TYPE_TABLE_NAME /;"	d	file:
SWIG_TYPE_TABLE_NAME	HWsim_wrap.cxx	/^# define SWIG_TYPE_TABLE_NAME$/;"	d	file:
SWIG_This	HWsim_wrap.cxx	/^SWIG_This(void)$/;"	f	typeref:typename:SWIGRUNTIME PyObject *
SWIG_TypeCast	HWsim_wrap.cxx	/^SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {$/;"	f	typeref:typename:SWIGRUNTIMEINLINE void *
SWIG_TypeCheck	HWsim_wrap.cxx	/^SWIG_TypeCheck(const char *c, swig_type_info *ty) {$/;"	f	typeref:typename:SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct	HWsim_wrap.cxx	/^SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {$/;"	f	typeref:typename:SWIGRUNTIME swig_cast_info *
SWIG_TypeClientData	HWsim_wrap.cxx	/^SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {$/;"	f	typeref:typename:SWIGRUNTIME void
SWIG_TypeCmp	HWsim_wrap.cxx	/^SWIG_TypeCmp(const char *nb, const char *tb) {$/;"	f	typeref:typename:SWIGRUNTIME int
SWIG_TypeDynamicCast	HWsim_wrap.cxx	/^SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {$/;"	f	typeref:typename:SWIGRUNTIME swig_type_info *
SWIG_TypeEquiv	HWsim_wrap.cxx	/^SWIG_TypeEquiv(const char *nb, const char *tb) {$/;"	f	typeref:typename:SWIGRUNTIME int
SWIG_TypeError	HWsim_wrap.cxx	/^#define  SWIG_TypeError /;"	d	file:
SWIG_TypeName	HWsim_wrap.cxx	/^SWIG_TypeName(const swig_type_info *ty) {$/;"	f	typeref:typename:SWIGRUNTIMEINLINE const char *
SWIG_TypeNameComp	HWsim_wrap.cxx	/^SWIG_TypeNameComp(const char *f1, const char *l1,$/;"	f	typeref:typename:SWIGRUNTIME int
SWIG_TypeNewClientData	HWsim_wrap.cxx	/^SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {$/;"	f	typeref:typename:SWIGRUNTIME void
SWIG_TypePrettyName	HWsim_wrap.cxx	/^SWIG_TypePrettyName(const swig_type_info *type) {$/;"	f	typeref:typename:SWIGRUNTIME const char *
SWIG_TypeQuery	HWsim_wrap.cxx	/^#define SWIG_TypeQuery(/;"	d	file:
SWIG_TypeQueryModule	HWsim_wrap.cxx	/^SWIG_TypeQueryModule(swig_module_info *start,$/;"	f	typeref:typename:SWIGRUNTIME swig_type_info *
SWIG_TypeRank	HWsim_wrap.cxx	/^#    define SWIG_TypeRank /;"	d	file:
SWIG_UnknownError	HWsim_wrap.cxx	/^#define  SWIG_UnknownError /;"	d	file:
SWIG_UnpackData	HWsim_wrap.cxx	/^SWIG_UnpackData(const char *c, void *ptr, size_t sz) {$/;"	f	typeref:typename:SWIGRUNTIME const char *
SWIG_UnpackDataName	HWsim_wrap.cxx	/^SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {$/;"	f	typeref:typename:SWIGRUNTIME const char *
SWIG_UnpackVoidPtr	HWsim_wrap.cxx	/^SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {$/;"	f	typeref:typename:SWIGRUNTIME const char *
SWIG_VERSION	HWsim_wrap.cxx	/^#define SWIG_VERSION /;"	d	file:
SWIG_ValueError	HWsim_wrap.cxx	/^#define  SWIG_ValueError /;"	d	file:
SWIG_addvarlink	HWsim_wrap.cxx	/^#define SWIG_addvarlink(/;"	d	file:
SWIG_arg_fail	HWsim_wrap.cxx	/^#define SWIG_arg_fail(/;"	d	file:
SWIG_as_voidptr	HWsim_wrap.cxx	/^#define SWIG_as_voidptr(/;"	d	file:
SWIG_as_voidptrptr	HWsim_wrap.cxx	/^#define SWIG_as_voidptrptr(/;"	d	file:
SWIG_contract_assert	HWsim_wrap.cxx	/^#define SWIG_contract_assert(/;"	d	file:
SWIG_exception	HWsim_wrap.cxx	/^  #define SWIG_exception(/;"	d	file:
SWIG_exception_fail	HWsim_wrap.cxx	/^#define SWIG_exception_fail(/;"	d	file:
SWIG_fail	HWsim_wrap.cxx	/^#define SWIG_fail /;"	d	file:
SWIG_globals	HWsim_wrap.cxx	/^  SWIG_globals(void) {$/;"	f	typeref:typename:SWIGINTERN PyObject *
SWIG_init	HWsim_wrap.cxx	/^#  define SWIG_init /;"	d	file:
SWIG_init	HWsim_wrap.cxx	/^SWIG_init(void) {$/;"	f	typeref:typename:SWIGEXPORT PyObject *
SWIG_name	HWsim_wrap.cxx	/^#define SWIG_name /;"	d	file:
SWIG_newvarlink	HWsim_wrap.cxx	/^#define SWIG_newvarlink(/;"	d	file:
SWIG_pchar_descriptor	HWsim_wrap.cxx	/^SWIG_pchar_descriptor(void)$/;"	f	typeref:typename:SWIGINTERN swig_type_info *
SWITCHMATRIX_H_	SwitchMatrix.h	/^#define SWITCHMATRIX_H_$/;"	d
SaveOutput	ActivationFunc.cpp	/^void ActivationFunc::SaveOutput(const char* str, const char* outputFile)$/;"	f	class:ActivationFunc	typeref:typename:void
SaveOutput	Adder.cpp	/^void Adder::SaveOutput(const char* str, const char* outputFile)$/;"	f	class:Adder	typeref:typename:void
SaveOutput	Comparator.cpp	/^void Comparator::SaveOutput(const char* str, const char* outputFile)$/;"	f	class:Comparator	typeref:typename:void
SaveOutput	Core.cpp	/^void Core::SaveOutput(const int& CoreIndex, const char* outputFile)$/;"	f	class:Core	typeref:typename:void
SaveOutput	CurrentSenseAmp.cpp	/^void CurrentSenseAmp::SaveOutput(const char* str, const char* outputFile)$/;"	f	class:CurrentSenseAmp	typeref:typename:void
SaveOutput	DFF.cpp	/^void DFF::SaveOutput(const char* str, const char* outputFile)$/;"	f	class:DFF	typeref:typename:void
SaveOutput	DeMux.cpp	/^void DeMux::SaveOutput(const char* str, const char* outputFile)$/;"	f	class:DeMux	typeref:typename:void
SaveOutput	DecoderDriver.cpp	/^void DecoderDriver::SaveOutput(const char* str, const char* outputFile)$/;"	f	class:DecoderDriver	typeref:typename:void
SaveOutput	FunctionUnit.cpp	/^void FunctionUnit::SaveOutput(const char* str, const char* outputFile) {$/;"	f	class:FunctionUnit	typeref:typename:void
SaveOutput	HWsim.cpp	/^void HWsim::SaveOutput(int CoreIndex, const char* outputFile)$/;"	f	class:HWsim	typeref:typename:void
SaveOutput	HWsim.py	/^    def SaveOutput(self, CoreIndex, outputFile):$/;"	m	class:HWsim
SaveOutput	HWsim.py	/^    def SaveOutput(self, str, outputFile):$/;"	m	class:FunctionUnit
SaveOutput	LUT.cpp	/^void LUT::SaveOutput(const char* str, const char* outputFile)$/;"	f	class:LUT	typeref:typename:void
SaveOutput	MultilevelSAEncoder.cpp	/^void MultilevelSAEncoder::SaveOutput(const char* str, const char* outputFile)$/;"	f	class:MultilevelSAEncoder	typeref:typename:void
SaveOutput	MultilevelSenseAmp.cpp	/^void MultilevelSenseAmp::SaveOutput(const char* str, const char* outputFile)$/;"	f	class:MultilevelSenseAmp	typeref:typename:void
SaveOutput	Mux.cpp	/^void Mux::SaveOutput(const char* str, const char* outputFile)$/;"	f	class:Mux	typeref:typename:void
SaveOutput	NewSwitchMatrix.cpp	/^void NewSwitchMatrix::SaveOutput(const char* str, const char* outputFile)$/;"	f	class:NewSwitchMatrix	typeref:typename:void
SaveOutput	Precharger.cpp	/^void Precharger::SaveOutput(const char* str, const char* outputFile)$/;"	f	class:Precharger	typeref:typename:void
SaveOutput	ReadCircuit.cpp	/^void ReadCircuit::SaveOutput(const char* str, const char* outputFile)$/;"	f	class:ReadCircuit	typeref:typename:void
SaveOutput	RippleCounter.cpp	/^void RippleCounter::SaveOutput(const char* str, const char* outputFile)$/;"	f	class:RippleCounter	typeref:typename:void
SaveOutput	RowDecoder.cpp	/^void RowDecoder::SaveOutput(const char* str, const char* outputFile)$/;"	f	class:RowDecoder	typeref:typename:void
SaveOutput	SRAMWriteDriver.cpp	/^void SRAMWriteDriver::SaveOutput(const char* str, const char* outputFile)$/;"	f	class:SRAMWriteDriver	typeref:typename:void
SaveOutput	SenseAmp.cpp	/^void SenseAmp::SaveOutput(const char* str, const char* outputFile)$/;"	f	class:SenseAmp	typeref:typename:void
SaveOutput	ShiftAdd.cpp	/^void ShiftAdd::SaveOutput(const char* str, const char* outputFile)$/;"	f	class:ShiftAdd	typeref:typename:void
SaveOutput	SubArray.cpp	/^void SubArray::SaveOutput(const char* outputFile) {$/;"	f	class:SubArray	typeref:typename:void
SaveOutput	Sum.cpp	/^void Sum::SaveOutput(const char* str, const char* outputFile)$/;"	f	class:Sum	typeref:typename:void
SaveOutput	SwitchMatrix.cpp	/^void SwitchMatrix::SaveOutput(const char* str, const char* outputFile)$/;"	f	class:SwitchMatrix	typeref:typename:void
SaveOutput	VoltageSenseAmp.cpp	/^void VoltageSenseAmp::SaveOutput(const char* str, const char* outputFile)$/;"	f	class:VoltageSenseAmp	typeref:typename:void
SaveOutput	WLDecoderOutput.cpp	/^void WLDecoderOutput::SaveOutput(const char* str, const char* outputFile)$/;"	f	class:WLDecoderOutput	typeref:typename:void
SaveOutput	WLNewDecoderDriver.cpp	/^void WLNewDecoderDriver::SaveOutput(const char* str, const char* outputFile)$/;"	f	class:WLNewDecoderDriver	typeref:typename:void
SenseAmp	SenseAmp.cpp	/^SenseAmp::SenseAmp(const InputParameter& _inputParameter, const Technology& _tech, const MemCell/;"	f	class:SenseAmp
SenseAmp	SenseAmp.h	/^class SenseAmp: public FunctionUnit {$/;"	c
SetPulseWidth	ReadParam.h	/^	double SetPulseWidth;			\/* Set Pulse Width, Unit: s *\/$/;"	m	class:ReadParam	typeref:typename:double
SetVoltage	ReadParam.h	/^	double SetVoltage;				\/* Set Voltage, Unit: V *\/$/;"	m	class:ReadParam	typeref:typename:double
ShiftAdd	ShiftAdd.cpp	/^ShiftAdd::ShiftAdd(const InputParameter& _inputParameter, const Technology& _tech, const MemCell/;"	f	class:ShiftAdd
ShiftAdd	ShiftAdd.h	/^class ShiftAdd: public FunctionUnit {$/;"	c
Sigmoid	typedef.h	/^	Sigmoid,$/;"	e	enum:ActivationFunction
SpikingMode	typedef.h	/^enum SpikingMode$/;"	g
SubArray	SubArray.cpp	/^SubArray::SubArray(InputParameter& _inputParameter, Technology& _tech, MemCell& _cell):$/;"	f	class:SubArray
SubArray	SubArray.h	/^class SubArray: public FunctionUnit {$/;"	c
Sum	Sum.cpp	/^Sum::Sum(const InputParameter& _inputParameter,$/;"	f	class:Sum
Sum	Sum.h	/^class Sum: public FunctionUnit {$/;"	c
SwigMethods	HWsim_wrap.cxx	/^static PyMethodDef SwigMethods[] = {$/;"	v	typeref:typename:PyMethodDef[]	file:
SwigMovePointer	HWsim_wrap.cxx	/^    SwigMovePointer(T *p) : ptr(p) { }$/;"	f	struct:SwigValueWrapper::SwigMovePointer	file:
SwigMovePointer	HWsim_wrap.cxx	/^  struct SwigMovePointer {$/;"	s	class:SwigValueWrapper	file:
SwigPtr_PyObject	HWsim_wrap.cxx	/^    SwigPtr_PyObject() :_obj(0)$/;"	f	class:swig::SwigPtr_PyObject	file:
SwigPtr_PyObject	HWsim_wrap.cxx	/^    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)$/;"	f	class:swig::SwigPtr_PyObject	file:
SwigPtr_PyObject	HWsim_wrap.cxx	/^    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)$/;"	f	class:swig::SwigPtr_PyObject	file:
SwigPtr_PyObject	HWsim_wrap.cxx	/^  class SwigPtr_PyObject {$/;"	c	namespace:swig	file:
SwigPyBuiltin_AddPublicSymbol	HWsim_wrap.cxx	/^SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {$/;"	f	typeref:typename:SWIGINTERN void
SwigPyClientData	HWsim_wrap.cxx	/^} SwigPyClientData;$/;"	t	typeref:struct:__anon571c7d070208	file:
SwigPyClientData_Del	HWsim_wrap.cxx	/^SwigPyClientData_Del(SwigPyClientData *data) {$/;"	f	typeref:typename:SWIGRUNTIME void
SwigPyClientData_New	HWsim_wrap.cxx	/^SwigPyClientData_New(PyObject* obj)$/;"	f	typeref:typename:SWIGRUNTIME SwigPyClientData *
SwigPyIterator	HWsim.py	/^class SwigPyIterator(_object):$/;"	c
SwigPyIterator	HWsim_wrap.cxx	/^    SwigPyIterator(PyObject *seq) : _seq(seq)$/;"	f	struct:swig::SwigPyIterator	file:
SwigPyIterator	HWsim_wrap.cxx	/^  struct SwigPyIterator {$/;"	s	namespace:swig	file:
SwigPyIterator_swigregister	HWsim.py	/^SwigPyIterator_swigregister = _HWsim.SwigPyIterator_swigregister$/;"	v
SwigPyIterator_swigregister	HWsim_wrap.cxx	/^SWIGINTERN PyObject *SwigPyIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args)/;"	f	typeref:typename:SWIGINTERN PyObject *
SwigPyObject	HWsim_wrap.cxx	/^} SwigPyObject;$/;"	t	typeref:struct:__anon571c7d070308	file:
SwigPyObject_Check	HWsim_wrap.cxx	/^SwigPyObject_Check(PyObject *op) {$/;"	f	typeref:typename:SWIGRUNTIMEINLINE int
SwigPyObject_GetDesc	HWsim_wrap.cxx	/^SwigPyObject_GetDesc(PyObject *self)$/;"	f	typeref:typename:SWIGRUNTIMEINLINE const char *
SwigPyObject_New	HWsim_wrap.cxx	/^SwigPyObject_New(void *ptr, swig_type_info *ty, int own)$/;"	f	typeref:typename:SWIGRUNTIME PyObject *
SwigPyObject_TypeOnce	HWsim_wrap.cxx	/^SwigPyObject_TypeOnce(void) {$/;"	f	typeref:typename:SWIGRUNTIME PyTypeObject *
SwigPyObject_acquire	HWsim_wrap.cxx	/^SwigPyObject_acquire(PyObject *v)$/;"	f	typeref:typename:SWIGINTERN PyObject *
SwigPyObject_append	HWsim_wrap.cxx	/^SwigPyObject_append(PyObject* v, PyObject* next)$/;"	f	typeref:typename:SWIGRUNTIME PyObject *
SwigPyObject_compare	HWsim_wrap.cxx	/^SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)$/;"	f	typeref:typename:SWIGRUNTIME int
SwigPyObject_dealloc	HWsim_wrap.cxx	/^SwigPyObject_dealloc(PyObject *v)$/;"	f	typeref:typename:SWIGRUNTIME void
SwigPyObject_disown	HWsim_wrap.cxx	/^SwigPyObject_disown(PyObject *v)$/;"	f	typeref:typename:SWIGINTERN PyObject *
SwigPyObject_format	HWsim_wrap.cxx	/^SwigPyObject_format(const char* fmt, SwigPyObject *v)$/;"	f	typeref:typename:SWIGRUNTIME PyObject *
SwigPyObject_get___dict__	HWsim_wrap.cxx	/^SwigPyObject_get___dict__(PyObject *v, PyObject *SWIGUNUSEDPARM(args))$/;"	f	typeref:typename:SWIGRUNTIME PyObject *
SwigPyObject_getattr	HWsim_wrap.cxx	/^SwigPyObject_getattr(SwigPyObject *sobj,char *name)$/;"	f	typeref:typename:SWIGINTERN PyObject *
SwigPyObject_hex	HWsim_wrap.cxx	/^SwigPyObject_hex(SwigPyObject *v)$/;"	f	typeref:typename:SWIGRUNTIME PyObject *
SwigPyObject_long	HWsim_wrap.cxx	/^SwigPyObject_long(SwigPyObject *v)$/;"	f	typeref:typename:SWIGRUNTIME PyObject *
SwigPyObject_next	HWsim_wrap.cxx	/^SwigPyObject_next(PyObject* v)$/;"	f	typeref:typename:SWIGRUNTIME PyObject *
SwigPyObject_oct	HWsim_wrap.cxx	/^SwigPyObject_oct(SwigPyObject *v)$/;"	f	typeref:typename:SWIGRUNTIME PyObject *
SwigPyObject_own	HWsim_wrap.cxx	/^SwigPyObject_own(PyObject *v, PyObject *args)$/;"	f	typeref:typename:SWIGINTERN PyObject *
SwigPyObject_repr	HWsim_wrap.cxx	/^SwigPyObject_repr(SwigPyObject *v)$/;"	f	typeref:typename:SWIGRUNTIME PyObject *
SwigPyObject_richcompare	HWsim_wrap.cxx	/^SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)$/;"	f	typeref:typename:SWIGRUNTIME PyObject *
SwigPyObject_stype	HWsim_wrap.cxx	/^static swig_type_info *SwigPyObject_stype = 0;$/;"	v	typeref:typename:swig_type_info *	file:
SwigPyObject_type	HWsim_wrap.cxx	/^SwigPyObject_type(void) {$/;"	f	typeref:typename:SWIGRUNTIME PyTypeObject *
SwigPyPacked	HWsim_wrap.cxx	/^} SwigPyPacked;$/;"	t	typeref:struct:__anon571c7d070408	file:
SwigPyPacked_Check	HWsim_wrap.cxx	/^SwigPyPacked_Check(PyObject *op) {$/;"	f	typeref:typename:SWIGRUNTIMEINLINE int
SwigPyPacked_New	HWsim_wrap.cxx	/^SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)$/;"	f	typeref:typename:SWIGRUNTIME PyObject *
SwigPyPacked_TypeOnce	HWsim_wrap.cxx	/^SwigPyPacked_TypeOnce(void) {$/;"	f	typeref:typename:SWIGRUNTIME PyTypeObject *
SwigPyPacked_UnpackData	HWsim_wrap.cxx	/^SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)$/;"	f	typeref:typename:SWIGRUNTIME swig_type_info *
SwigPyPacked_compare	HWsim_wrap.cxx	/^SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)$/;"	f	typeref:typename:SWIGRUNTIME int
SwigPyPacked_dealloc	HWsim_wrap.cxx	/^SwigPyPacked_dealloc(PyObject *v)$/;"	f	typeref:typename:SWIGRUNTIME void
SwigPyPacked_print	HWsim_wrap.cxx	/^SwigPyPacked_print(SwigPyPacked *v, FILE *fp, int SWIGUNUSEDPARM(flags))$/;"	f	typeref:typename:SWIGRUNTIME int
SwigPyPacked_repr	HWsim_wrap.cxx	/^SwigPyPacked_repr(SwigPyPacked *v)$/;"	f	typeref:typename:SWIGRUNTIME PyObject *
SwigPyPacked_str	HWsim_wrap.cxx	/^SwigPyPacked_str(SwigPyPacked *v)$/;"	f	typeref:typename:SWIGRUNTIME PyObject *
SwigPyPacked_type	HWsim_wrap.cxx	/^SwigPyPacked_type(void) {$/;"	f	typeref:typename:SWIGRUNTIME PyTypeObject *
SwigValueInit	HWsim_wrap.cxx	/^template <typename T> T SwigValueInit() {$/;"	f	typeref:typename:T
SwigValueWrapper	HWsim_wrap.cxx	/^  SwigValueWrapper() : pointer(0) { }$/;"	f	class:SwigValueWrapper	file:
SwigValueWrapper	HWsim_wrap.cxx	/^template<typename T> class SwigValueWrapper {$/;"	c	file:
SwigVar_PyObject	HWsim_wrap.cxx	/^    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }$/;"	f	struct:swig::SwigVar_PyObject	file:
SwigVar_PyObject	HWsim_wrap.cxx	/^  struct SwigVar_PyObject : SwigPtr_PyObject {$/;"	s	namespace:swig	file:
SwitchMatrix	SwitchMatrix.cpp	/^SwitchMatrix::SwitchMatrix(const InputParameter& _inputParameter, const Technology& _tech, const/;"	f	class:SwitchMatrix
SwitchMatrix	SwitchMatrix.h	/^class SwitchMatrix: public FunctionUnit {$/;"	c
TECHNOLOGY_H_	Technology.h	/^#define TECHNOLOGY_H_$/;"	d
TFET	typedef.h	/^	TFET$/;"	e	enum:TransistorType
TYPEDEF_H_	typedef.h	/^#define TYPEDEF_H_$/;"	d
Tanh	typedef.h	/^	Tanh$/;"	e	enum:ActivationFunction
Technology	Technology.cpp	/^Technology::Technology() {$/;"	f	class:Technology
Technology	Technology.h	/^class Technology {$/;"	c
TgHeight	DecoderDriver.h	/^	double TgHeight, TgWidth;$/;"	m	class:DecoderDriver	typeref:typename:double
TgHeight	NewSwitchMatrix.h	/^	double TgHeight, TgWidth;$/;"	m	class:NewSwitchMatrix	typeref:typename:double
TgHeight	SwitchMatrix.h	/^	double TgHeight, TgWidth;$/;"	m	class:SwitchMatrix	typeref:typename:double
TgWidth	DecoderDriver.h	/^	double TgHeight, TgWidth;$/;"	m	class:DecoderDriver	typeref:typename:double
TgWidth	Mux.h	/^	double TgWidth;$/;"	m	class:Mux	typeref:typename:double
TgWidth	NewSwitchMatrix.h	/^	double TgHeight, TgWidth;$/;"	m	class:NewSwitchMatrix	typeref:typename:double
TgWidth	SwitchMatrix.h	/^	double TgHeight, TgWidth;$/;"	m	class:SwitchMatrix	typeref:typename:double
TransistorType	typedef.h	/^enum TransistorType$/;"	g
Type	typedef.h	/^namespace Type {	\/\/ To prevent name collision$/;"	n
ULLONG_MAX	HWsim_wrap.cxx	/^#   define ULLONG_MAX /;"	d	file:
VOLTAGESENSEAMP_H_	VoltageSenseAmp.h	/^#define VOLTAGESENSEAMP_H_$/;"	d
Vcol	ReadCircuit.h	/^	double Vhold, Vth, Vrow, Vcol, R_OSC_OFF;$/;"	m	class:ReadCircuit	typeref:typename:double
Vhold	ReadCircuit.h	/^	double Vhold, Vth, Vrow, Vcol, R_OSC_OFF;$/;"	m	class:ReadCircuit	typeref:typename:double
VoltageSenseAmp	VoltageSenseAmp.cpp	/^VoltageSenseAmp::VoltageSenseAmp(const InputParameter& _inputParameter, const Technology& _tech,/;"	f	class:VoltageSenseAmp
VoltageSenseAmp	VoltageSenseAmp.h	/^class VoltageSenseAmp: public FunctionUnit {$/;"	c
Vrow	ReadCircuit.h	/^	double Vhold, Vth, Vrow, Vcol, R_OSC_OFF;$/;"	m	class:ReadCircuit	typeref:typename:double
Vth	ReadCircuit.h	/^	double Vhold, Vth, Vrow, Vcol, R_OSC_OFF;$/;"	m	class:ReadCircuit	typeref:typename:double
WLDecoderOutput	WLDecoderOutput.cpp	/^WLDecoderOutput::WLDecoderOutput(const InputParameter& _inputParameter, const Technology& _tech,/;"	f	class:WLDecoderOutput
WLDecoderOutput	WLDecoderOutput.h	/^class WLDecoderOutput: public FunctionUnit {$/;"	c
WLDecoderOutput_H_	WLDecoderOutput.h	/^#define WLDecoderOutput_H_$/;"	d
WLNewDecoderDriver	WLNewDecoderDriver.cpp	/^WLNewDecoderDriver::WLNewDecoderDriver(const InputParameter& _inputParameter, const Technology& /;"	f	class:WLNewDecoderDriver
WLNewDecoderDriver	WLNewDecoderDriver.h	/^class WLNewDecoderDriver : public FunctionUnit {$/;"	c
WLNewDecoderDriver_H_	WLNewDecoderDriver.h	/^#define WLNewDecoderDriver_H_$/;"	d
W_SENSE_EN	constant.h	/^#define W_SENSE_EN	/;"	d
W_SENSE_ISO	constant.h	/^#define W_SENSE_ISO	/;"	d
W_SENSE_MUX	constant.h	/^#define W_SENSE_MUX	/;"	d
W_SENSE_N	constant.h	/^#define W_SENSE_N	/;"	d
W_SENSE_P	constant.h	/^#define W_SENSE_P	/;"	d
WeightBits	ReadParam.h	/^	int WeightBits;					\/* The Number of weight bits *\/$/;"	m	class:ReadParam	typeref:typename:int
WriteDynamicEnergy_Opt	typedef.h	/^	WriteDynamicEnergy_Opt,$/;"	e	enum:DesignOptimization
WriteLatency_Opt	typedef.h	/^	WriteLatency_Opt,$/;"	e	enum:DesignOptimization
XNORModeDoubleEnded	SubArray.h	/^	bool XNORModeDoubleEnded;      \/\/ XNOR Double-ended mode using parallel RRAM$/;"	m	class:SubArray	typeref:typename:bool
XNORModeSingleEnded	SubArray.h	/^	bool XNORModeSingleEnded;      \/\/ XNOR Single-ended mode using parallel RRAM$/;"	m	class:SubArray	typeref:typename:bool
_CRT_SECURE_NO_DEPRECATE	HWsim_wrap.cxx	/^# define _CRT_SECURE_NO_DEPRECATE$/;"	d	file:
_DEBUG	HWsim_wrap.cxx	/^# define _DEBUG$/;"	d	file:
_HWsim	HWsim.py	/^    _HWsim = swig_import_helper()$/;"	v
_MEMCELL_H_	MemCell.h	/^#define _MEMCELL_H_$/;"	d
_PyLong_FromSsize_t	HWsim_wrap.cxx	/^#define _PyLong_FromSsize_t(/;"	d	file:
_SCL_SECURE_NO_DEPRECATE	HWsim_wrap.cxx	/^# define _SCL_SECURE_NO_DEPRECATE$/;"	d	file:
_SWIG_Py_None	HWsim_wrap.cxx	/^_SWIG_Py_None(void)$/;"	f	typeref:typename:SWIGRUNTIMEINLINE PyObject *
_SWIG_This	HWsim_wrap.cxx	/^_SWIG_This(void)$/;"	f	typeref:typename:SWIGRUNTIMEINLINE PyObject *
__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES	HWsim_wrap.cxx	/^# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES /;"	d	file:
__add__	HWsim.py	/^    def __add__(self, n):$/;"	m	class:SwigPyIterator
__anon571c7d070108	HWsim_wrap.cxx	/^typedef struct {$/;"	s	file:
__anon571c7d070208	HWsim_wrap.cxx	/^typedef struct {$/;"	s	file:
__anon571c7d070308	HWsim_wrap.cxx	/^typedef struct {$/;"	s	file:
__anon571c7d070408	HWsim_wrap.cxx	/^typedef struct {$/;"	s	file:
__del__	HWsim.py	/^    __del__ = lambda self: None$/;"	m	class:FunctionUnit
__del__	HWsim.py	/^    __del__ = lambda self: None$/;"	m	class:HWsim
__del__	HWsim.py	/^    __del__ = lambda self: None$/;"	m	class:SwigPyIterator
__eq__	HWsim.py	/^    def __eq__(self, x):$/;"	m	class:SwigPyIterator
__getattr__	HWsim.py	/^    __getattr__ = lambda self, name: _swig_getattr(self, FunctionUnit, name)$/;"	m	class:FunctionUnit
__getattr__	HWsim.py	/^    __getattr__ = lambda self, name: _swig_getattr(self, HWsim, name)$/;"	m	class:HWsim
__getattr__	HWsim.py	/^    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)$/;"	m	class:SwigPyIterator
__iadd__	HWsim.py	/^    def __iadd__(self, n):$/;"	m	class:SwigPyIterator
__init__	HWsim.py	/^    def __init__(self):$/;"	m	class:FunctionUnit
__init__	HWsim.py	/^    def __init__(self):$/;"	m	class:HWsim
__init__	HWsim.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:SwigPyIterator
__isub__	HWsim.py	/^    def __isub__(self, n):$/;"	m	class:SwigPyIterator
__iter__	HWsim.py	/^    def __iter__(self):$/;"	m	class:SwigPyIterator
__ne__	HWsim.py	/^    def __ne__(self, x):$/;"	m	class:SwigPyIterator
__next__	HWsim.py	/^    def __next__(self):$/;"	m	class:SwigPyIterator
__next__	HWsim_wrap.cxx	/^    PyObject *__next__()$/;"	f	struct:swig::SwigPyIterator	typeref:typename:PyObject *	file:
__repr__	HWsim.py	/^    __repr__ = _swig_repr$/;"	v	class:FunctionUnit	file:
__repr__	HWsim.py	/^    __repr__ = _swig_repr$/;"	v	class:HWsim	file:
__repr__	HWsim.py	/^    __repr__ = _swig_repr$/;"	v	class:SwigPyIterator	file:
__setattr__	HWsim.py	/^    __setattr__ = lambda self, name, value: _swig_setattr(self, FunctionUnit, name, value)$/;"	m	class:FunctionUnit
__setattr__	HWsim.py	/^    __setattr__ = lambda self, name, value: _swig_setattr(self, HWsim, name, value)$/;"	m	class:HWsim
__setattr__	HWsim.py	/^    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)$/;"	m	class:SwigPyIterator
__sub__	HWsim.py	/^    def __sub__(self, *args):$/;"	m	class:SwigPyIterator
__swig_destroy__	HWsim.py	/^    __swig_destroy__ = _HWsim.delete_FunctionUnit$/;"	v	class:FunctionUnit	file:
__swig_destroy__	HWsim.py	/^    __swig_destroy__ = _HWsim.delete_HWsim$/;"	v	class:HWsim	file:
__swig_destroy__	HWsim.py	/^    __swig_destroy__ = _HWsim.delete_SwigPyIterator$/;"	v	class:SwigPyIterator	file:
__swig_getmethods__	HWsim.py	/^    __swig_getmethods__ = {}$/;"	v	class:FunctionUnit	file:
__swig_getmethods__	HWsim.py	/^    __swig_getmethods__ = {}$/;"	v	class:HWsim	file:
__swig_getmethods__	HWsim.py	/^    __swig_getmethods__ = {}$/;"	v	class:SwigPyIterator	file:
__swig_setmethods__	HWsim.py	/^    __swig_setmethods__ = {}$/;"	v	class:FunctionUnit	file:
__swig_setmethods__	HWsim.py	/^    __swig_setmethods__ = {}$/;"	v	class:HWsim	file:
__swig_setmethods__	HWsim.py	/^    __swig_setmethods__ = {}$/;"	v	class:SwigPyIterator	file:
_newclass	HWsim.py	/^    _newclass = 0$/;"	v
_newclass	HWsim.py	/^    _newclass = 1$/;"	v
_obj	HWsim_wrap.cxx	/^    PyObject *_obj;$/;"	m	class:swig::SwigPtr_PyObject	typeref:typename:PyObject *	file:
_object	HWsim.py	/^    class _object:$/;"	c
_p_HWsimTo_p_FunctionUnit	HWsim_wrap.cxx	/^static void *_p_HWsimTo_p_FunctionUnit(void *x, int *SWIGUNUSEDPARM(newmemory)) {$/;"	f	typeref:typename:void *	file:
_seq	HWsim_wrap.cxx	/^    SwigPtr_PyObject _seq;$/;"	m	struct:swig::SwigPyIterator	typeref:typename:SwigPtr_PyObject	file:
_swig_getattr	HWsim.py	/^def _swig_getattr(self, class_type, name):$/;"	f
_swig_getattr_nondynamic	HWsim.py	/^def _swig_getattr_nondynamic(self, class_type, name, static=1):$/;"	f
_swig_repr	HWsim.py	/^def _swig_repr(self):$/;"	f
_swig_setattr	HWsim.py	/^def _swig_setattr(self, class_type, name, value):$/;"	f
_swig_setattr_nondynamic	HWsim.py	/^def _swig_setattr_nondynamic(self, class_type, name, value, static=1):$/;"	f
_swigc__p_Core	HWsim_wrap.cxx	/^static swig_cast_info _swigc__p_Core[] = {  {&_swigt__p_Core, 0, 0, 0},{0, 0, 0, 0}};$/;"	v	typeref:typename:swig_cast_info[]	file:
_swigc__p_FunctionUnit	HWsim_wrap.cxx	/^static swig_cast_info _swigc__p_FunctionUnit[] = {  {&_swigt__p_FunctionUnit, 0, 0, 0},  {&_swig/;"	v	typeref:typename:swig_cast_info[]	file:
_swigc__p_HWsim	HWsim_wrap.cxx	/^static swig_cast_info _swigc__p_HWsim[] = {  {&_swigt__p_HWsim, 0, 0, 0},{0, 0, 0, 0}};$/;"	v	typeref:typename:swig_cast_info[]	file:
_swigc__p_InputParameter	HWsim_wrap.cxx	/^static swig_cast_info _swigc__p_InputParameter[] = {  {&_swigt__p_InputParameter, 0, 0, 0},{0, 0/;"	v	typeref:typename:swig_cast_info[]	file:
_swigc__p_MemCell	HWsim_wrap.cxx	/^static swig_cast_info _swigc__p_MemCell[] = {  {&_swigt__p_MemCell, 0, 0, 0},{0, 0, 0, 0}};$/;"	v	typeref:typename:swig_cast_info[]	file:
_swigc__p_ReadParam	HWsim_wrap.cxx	/^static swig_cast_info _swigc__p_ReadParam[] = {  {&_swigt__p_ReadParam, 0, 0, 0},{0, 0, 0, 0}};$/;"	v	typeref:typename:swig_cast_info[]	file:
_swigc__p_Technology	HWsim_wrap.cxx	/^static swig_cast_info _swigc__p_Technology[] = {  {&_swigt__p_Technology, 0, 0, 0},{0, 0, 0, 0}}/;"	v	typeref:typename:swig_cast_info[]	file:
_swigc__p_char	HWsim_wrap.cxx	/^static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};$/;"	v	typeref:typename:swig_cast_info[]	file:
_swigc__p_std__invalid_argument	HWsim_wrap.cxx	/^static swig_cast_info _swigc__p_std__invalid_argument[] = {  {&_swigt__p_std__invalid_argument, /;"	v	typeref:typename:swig_cast_info[]	file:
_swigc__p_swig__SwigPyIterator	HWsim_wrap.cxx	/^static swig_cast_info _swigc__p_swig__SwigPyIterator[] = {  {&_swigt__p_swig__SwigPyIterator, 0,/;"	v	typeref:typename:swig_cast_info[]	file:
_swigt__p_Core	HWsim_wrap.cxx	/^static swig_type_info _swigt__p_Core = {"_p_Core", "Core *", 0, 0, (void*)0, 0};$/;"	v	typeref:typename:swig_type_info	file:
_swigt__p_FunctionUnit	HWsim_wrap.cxx	/^static swig_type_info _swigt__p_FunctionUnit = {"_p_FunctionUnit", "FunctionUnit *", 0, 0, (void/;"	v	typeref:typename:swig_type_info	file:
_swigt__p_HWsim	HWsim_wrap.cxx	/^static swig_type_info _swigt__p_HWsim = {"_p_HWsim", "HWsim *", 0, 0, (void*)0, 0};$/;"	v	typeref:typename:swig_type_info	file:
_swigt__p_InputParameter	HWsim_wrap.cxx	/^static swig_type_info _swigt__p_InputParameter = {"_p_InputParameter", "InputParameter *", 0, 0,/;"	v	typeref:typename:swig_type_info	file:
_swigt__p_MemCell	HWsim_wrap.cxx	/^static swig_type_info _swigt__p_MemCell = {"_p_MemCell", "MemCell *", 0, 0, (void*)0, 0};$/;"	v	typeref:typename:swig_type_info	file:
_swigt__p_ReadParam	HWsim_wrap.cxx	/^static swig_type_info _swigt__p_ReadParam = {"_p_ReadParam", "ReadParam *", 0, 0, (void*)0, 0};$/;"	v	typeref:typename:swig_type_info	file:
_swigt__p_Technology	HWsim_wrap.cxx	/^static swig_type_info _swigt__p_Technology = {"_p_Technology", "Technology *", 0, 0, (void*)0, 0/;"	v	typeref:typename:swig_type_info	file:
_swigt__p_char	HWsim_wrap.cxx	/^static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};$/;"	v	typeref:typename:swig_type_info	file:
_swigt__p_std__invalid_argument	HWsim_wrap.cxx	/^static swig_type_info _swigt__p_std__invalid_argument = {"_p_std__invalid_argument", "std::inval/;"	v	typeref:typename:swig_type_info	file:
_swigt__p_swig__SwigPyIterator	HWsim_wrap.cxx	/^static swig_type_info _swigt__p_swig__SwigPyIterator = {"_p_swig__SwigPyIterator", "swig::SwigPy/;"	v	typeref:typename:swig_type_info	file:
_wrap_FunctionUnit_MagicLayout	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_FunctionUnit_MagicLayout(PyObject *SWIGUNUSEDPARM(self), PyObject *ar/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_FunctionUnit_OverrideLayout	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_FunctionUnit_OverrideLayout(PyObject *SWIGUNUSEDPARM(self), PyObject /;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_FunctionUnit_PrintProperty	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_FunctionUnit_PrintProperty(PyObject *SWIGUNUSEDPARM(self), PyObject */;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_FunctionUnit_SaveOutput	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_FunctionUnit_SaveOutput(PyObject *SWIGUNUSEDPARM(self), PyObject *arg/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_FunctionUnit_area_get	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_FunctionUnit_area_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args)/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_FunctionUnit_area_set	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_FunctionUnit_area_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args)/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_FunctionUnit_emptyArea_get	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_FunctionUnit_emptyArea_get(PyObject *SWIGUNUSEDPARM(self), PyObject */;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_FunctionUnit_emptyArea_set	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_FunctionUnit_emptyArea_set(PyObject *SWIGUNUSEDPARM(self), PyObject */;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_FunctionUnit_height_get	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_FunctionUnit_height_get(PyObject *SWIGUNUSEDPARM(self), PyObject *arg/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_FunctionUnit_height_set	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_FunctionUnit_height_set(PyObject *SWIGUNUSEDPARM(self), PyObject *arg/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_FunctionUnit_leakage_get	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_FunctionUnit_leakage_get(PyObject *SWIGUNUSEDPARM(self), PyObject *ar/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_FunctionUnit_leakage_set	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_FunctionUnit_leakage_set(PyObject *SWIGUNUSEDPARM(self), PyObject *ar/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_FunctionUnit_newHeight_get	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_FunctionUnit_newHeight_get(PyObject *SWIGUNUSEDPARM(self), PyObject */;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_FunctionUnit_newHeight_set	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_FunctionUnit_newHeight_set(PyObject *SWIGUNUSEDPARM(self), PyObject */;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_FunctionUnit_newWidth_get	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_FunctionUnit_newWidth_get(PyObject *SWIGUNUSEDPARM(self), PyObject *a/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_FunctionUnit_newWidth_set	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_FunctionUnit_newWidth_set(PyObject *SWIGUNUSEDPARM(self), PyObject *a/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_FunctionUnit_readDynamicEnergy_get	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_FunctionUnit_readDynamicEnergy_get(PyObject *SWIGUNUSEDPARM(self), Py/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_FunctionUnit_readDynamicEnergy_set	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_FunctionUnit_readDynamicEnergy_set(PyObject *SWIGUNUSEDPARM(self), Py/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_FunctionUnit_readLatency_get	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_FunctionUnit_readLatency_get(PyObject *SWIGUNUSEDPARM(self), PyObject/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_FunctionUnit_readLatency_set	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_FunctionUnit_readLatency_set(PyObject *SWIGUNUSEDPARM(self), PyObject/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_FunctionUnit_readPower_get	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_FunctionUnit_readPower_get(PyObject *SWIGUNUSEDPARM(self), PyObject */;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_FunctionUnit_readPower_set	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_FunctionUnit_readPower_set(PyObject *SWIGUNUSEDPARM(self), PyObject */;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_FunctionUnit_totalArea_get	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_FunctionUnit_totalArea_get(PyObject *SWIGUNUSEDPARM(self), PyObject */;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_FunctionUnit_totalArea_set	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_FunctionUnit_totalArea_set(PyObject *SWIGUNUSEDPARM(self), PyObject */;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_FunctionUnit_usedArea_get	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_FunctionUnit_usedArea_get(PyObject *SWIGUNUSEDPARM(self), PyObject *a/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_FunctionUnit_usedArea_set	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_FunctionUnit_usedArea_set(PyObject *SWIGUNUSEDPARM(self), PyObject *a/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_FunctionUnit_width_get	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_FunctionUnit_width_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_FunctionUnit_width_set	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_FunctionUnit_width_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_FunctionUnit_writeDynamicEnergy_get	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_FunctionUnit_writeDynamicEnergy_get(PyObject *SWIGUNUSEDPARM(self), P/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_FunctionUnit_writeDynamicEnergy_set	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_FunctionUnit_writeDynamicEnergy_set(PyObject *SWIGUNUSEDPARM(self), P/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_FunctionUnit_writeLatency_get	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_FunctionUnit_writeLatency_get(PyObject *SWIGUNUSEDPARM(self), PyObjec/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_FunctionUnit_writeLatency_set	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_FunctionUnit_writeLatency_set(PyObject *SWIGUNUSEDPARM(self), PyObjec/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_FunctionUnit_writePower_get	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_FunctionUnit_writePower_get(PyObject *SWIGUNUSEDPARM(self), PyObject /;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_FunctionUnit_writePower_set	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_FunctionUnit_writePower_set(PyObject *SWIGUNUSEDPARM(self), PyObject /;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_HWsim_CalculateArea	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_HWsim_CalculateArea(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {$/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_HWsim_CalculateLatency	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_HWsim_CalculateLatency(PyObject *SWIGUNUSEDPARM(self), PyObject *args/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_HWsim_CalculatePower	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_HWsim_CalculatePower(PyObject *SWIGUNUSEDPARM(self), PyObject *args) /;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_HWsim_Initialize	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_HWsim_Initialize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {$/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_HWsim_PrintProperty	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_HWsim_PrintProperty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {$/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_HWsim_SaveOutput	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_HWsim_SaveOutput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {$/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_HWsim_cell_get	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_HWsim_cell_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {$/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_HWsim_cell_set	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_HWsim_cell_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {$/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_HWsim_core_get	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_HWsim_core_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {$/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_HWsim_core_set	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_HWsim_core_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {$/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_HWsim_initialized_get	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_HWsim_initialized_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args)/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_HWsim_initialized_set	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_HWsim_initialized_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args)/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_HWsim_inputParameter_get	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_HWsim_inputParameter_get(PyObject *SWIGUNUSEDPARM(self), PyObject *ar/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_HWsim_inputParameter_set	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_HWsim_inputParameter_set(PyObject *SWIGUNUSEDPARM(self), PyObject *ar/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_HWsim_numArrayCol_get	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_HWsim_numArrayCol_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args)/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_HWsim_numArrayCol_set	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_HWsim_numArrayCol_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args)/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_HWsim_numArrayRow_get	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_HWsim_numArrayRow_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args)/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_HWsim_numArrayRow_set	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_HWsim_numArrayRow_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args)/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_HWsim_numBitInput_get	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_HWsim_numBitInput_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args)/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_HWsim_numBitInput_set	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_HWsim_numBitInput_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args)/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_HWsim_numBitPartialSum_get	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_HWsim_numBitPartialSum_get(PyObject *SWIGUNUSEDPARM(self), PyObject */;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_HWsim_numBitPartialSum_set	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_HWsim_numBitPartialSum_set(PyObject *SWIGUNUSEDPARM(self), PyObject */;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_HWsim_numCellBit_get	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_HWsim_numCellBit_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) /;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_HWsim_numCellBit_set	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_HWsim_numCellBit_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) /;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_HWsim_numCellPerSynapse_get	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_HWsim_numCellPerSynapse_get(PyObject *SWIGUNUSEDPARM(self), PyObject /;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_HWsim_numCellPerSynapse_set	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_HWsim_numCellPerSynapse_set(PyObject *SWIGUNUSEDPARM(self), PyObject /;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_HWsim_numOutput_get	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_HWsim_numOutput_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {$/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_HWsim_numOutput_set	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_HWsim_numOutput_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {$/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_HWsim_numSABit_get	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_HWsim_numSABit_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {$/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_HWsim_numSABit_set	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_HWsim_numSABit_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {$/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_HWsim_numWeightBit_get	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_HWsim_numWeightBit_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_HWsim_numWeightBit_set	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_HWsim_numWeightBit_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_HWsim_numof10_get	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_HWsim_numof10_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {$/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_HWsim_numof10_set	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_HWsim_numof10_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {$/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_HWsim_numof1_get	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_HWsim_numof1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {$/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_HWsim_numof1_set	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_HWsim_numof1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {$/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_HWsim_numof2_get	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_HWsim_numof2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {$/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_HWsim_numof2_set	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_HWsim_numof2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {$/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_HWsim_numof3_get	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_HWsim_numof3_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {$/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_HWsim_numof3_set	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_HWsim_numof3_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {$/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_HWsim_numof4_get	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_HWsim_numof4_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {$/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_HWsim_numof4_set	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_HWsim_numof4_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {$/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_HWsim_numof5_get	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_HWsim_numof5_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {$/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_HWsim_numof5_set	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_HWsim_numof5_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {$/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_HWsim_numof6_get	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_HWsim_numof6_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {$/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_HWsim_numof6_set	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_HWsim_numof6_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {$/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_HWsim_numof7_get	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_HWsim_numof7_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {$/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_HWsim_numof7_set	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_HWsim_numof7_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {$/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_HWsim_numof8_get	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_HWsim_numof8_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {$/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_HWsim_numof8_set	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_HWsim_numof8_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {$/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_HWsim_numof9_get	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_HWsim_numof9_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {$/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_HWsim_numof9_set	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_HWsim_numof9_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {$/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_HWsim_params_get	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_HWsim_params_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {$/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_HWsim_params_set	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_HWsim_params_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {$/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_HWsim_tech_get	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_HWsim_tech_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {$/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_HWsim_tech_set	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_HWsim_tech_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {$/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_HWsim_wireWidth_get	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_HWsim_wireWidth_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {$/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_HWsim_wireWidth_set	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_HWsim_wireWidth_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {$/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_SwigPyIterator___add__	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_SwigPyIterator___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_SwigPyIterator___eq__	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_SwigPyIterator___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args)/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_SwigPyIterator___iadd__	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_SwigPyIterator___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *arg/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_SwigPyIterator___isub__	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_SwigPyIterator___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *arg/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_SwigPyIterator___ne__	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_SwigPyIterator___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args)/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_SwigPyIterator___next__	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_SwigPyIterator___next__(PyObject *SWIGUNUSEDPARM(self), PyObject *arg/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_SwigPyIterator___sub__	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_SwigPyIterator___sub__(PyObject *self, PyObject *args) {$/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_SwigPyIterator___sub____SWIG_0	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObje/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_SwigPyIterator___sub____SWIG_1	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObje/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_SwigPyIterator_advance	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_SwigPyIterator_advance(PyObject *SWIGUNUSEDPARM(self), PyObject *args/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_SwigPyIterator_copy	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_SwigPyIterator_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {$/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_SwigPyIterator_decr	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_SwigPyIterator_decr(PyObject *self, PyObject *args) {$/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_SwigPyIterator_decr__SWIG_0	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject /;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_SwigPyIterator_decr__SWIG_1	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject /;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_SwigPyIterator_distance	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_SwigPyIterator_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *arg/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_SwigPyIterator_equal	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_SwigPyIterator_equal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) /;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_SwigPyIterator_incr	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_SwigPyIterator_incr(PyObject *self, PyObject *args) {$/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_SwigPyIterator_incr__SWIG_0	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject /;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_SwigPyIterator_incr__SWIG_1	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject /;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_SwigPyIterator_next	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_SwigPyIterator_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {$/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_SwigPyIterator_previous	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_SwigPyIterator_previous(PyObject *SWIGUNUSEDPARM(self), PyObject *arg/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_SwigPyIterator_value	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_SwigPyIterator_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) /;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_delete_FunctionUnit	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_delete_FunctionUnit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {$/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_delete_HWsim	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_delete_HWsim(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {$/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_delete_SwigPyIterator	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_delete_SwigPyIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args)/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_new_FunctionUnit	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_new_FunctionUnit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {$/;"	f	typeref:typename:SWIGINTERN PyObject *
_wrap_new_HWsim	HWsim_wrap.cxx	/^SWIGINTERN PyObject *_wrap_new_HWsim(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {$/;"	f	typeref:typename:SWIGINTERN PyObject *
a	testHW.py	/^a = HWsim.HWsim()$/;"	v
accessType	MemCell.h	/^	CellAccessType accessType;	\/* Cell access type: CMOS, BJT, or diode *\/$/;"	m	class:MemCell	typeref:typename:CellAccessType
accessVoltage	MemCell.h	/^	double accessVoltage;$/;"	m	class:MemCell	typeref:typename:double
accessVoltage	ReadParam.h	/^	double accessVoltage;			\/* Voltage on the gate of MOSFET in 1T1R cell, Unit: s *\/$/;"	m	class:ReadParam	typeref:typename:double
activityColWrite	NewSwitchMatrix.h	/^	double activityColWrite;$/;"	m	class:NewSwitchMatrix	typeref:typename:double
activityColWrite	Precharger.h	/^	double activityColWrite;$/;"	m	class:Precharger	typeref:typename:double
activityColWrite	SRAMWriteDriver.h	/^	double activityColWrite;$/;"	m	class:SRAMWriteDriver	typeref:typename:double
activityColWrite	SubArray.h	/^	double activityColWrite;	\/\/ Activity for # of columns in the write$/;"	m	class:SubArray	typeref:typename:double
activityColWrite	SwitchMatrix.h	/^	double activityColWrite;$/;"	m	class:SwitchMatrix	typeref:typename:double
activityRowRead	Core.h	/^	double activityRowRead;$/;"	m	class:Core	typeref:typename:double
activityRowRead	NewSwitchMatrix.h	/^	double activityRowRead;$/;"	m	class:NewSwitchMatrix	typeref:typename:double
activityRowRead	SubArray.h	/^	double activityRowRead;		\/\/ Activity for # of rows in the read$/;"	m	class:SubArray	typeref:typename:double
activityRowRead	SwitchMatrix.h	/^	double activityRowRead;$/;"	m	class:SwitchMatrix	typeref:typename:double
activityRowWrite	SubArray.h	/^	double activityRowWrite;	\/\/ Activity for # of rows in the write$/;"	m	class:SubArray	typeref:typename:double
adder	ShiftAdd.h	/^	Adder adder;$/;"	m	class:ShiftAdd	typeref:typename:Adder
adder	SubArray.h	/^	Adder adder;$/;"	m	class:SubArray	typeref:typename:Adder
adder	Sum.h	/^	Adder adder;$/;"	m	class:Sum	typeref:typename:Adder
advance	HWsim.py	/^    def advance(self, n):$/;"	m	class:SwigPyIterator
advance	HWsim_wrap.cxx	/^    SwigPyIterator *advance(ptrdiff_t n)$/;"	f	struct:swig::SwigPyIterator	typeref:typename:SwigPyIterator *	file:
all	makefile	/^all: $(MAINS:.cpp=)$/;"	t
area	FunctionUnit.h	/^	double area;		\/* Unit: m^2 *\/$/;"	m	class:FunctionUnit	typeref:typename:double
area	HWsim.py	/^        area = _swig_property(_HWsim.FunctionUnit_area_get, _HWsim.FunctionUnit_area_set)$/;"	v	class:FunctionUnit
area	MemCell.h	/^	double area;			\/* Cell area, Unit: F^2 *\/$/;"	m	class:MemCell	typeref:typename:double
areaArray	SubArray.h	/^	double areaArray;$/;"	m	class:SubArray	typeref:typename:double
areaDff	ReadCircuit.h	/^	double areaUnit, hUnit, wUnit, areaReadBody, hReadBody, wReadBody, areaDff, hDff, wDff;$/;"	m	class:ReadCircuit	typeref:typename:double
areaReadBody	ReadCircuit.h	/^	double areaUnit, hUnit, wUnit, areaReadBody, hReadBody, wReadBody, areaDff, hDff, wDff;$/;"	m	class:ReadCircuit	typeref:typename:double
areaUnit	Comparator.h	/^    double areaUnit;$/;"	m	class:Comparator	typeref:typename:double
areaUnit	CurrentSenseAmp.h	/^	double areaUnit;$/;"	m	class:CurrentSenseAmp	typeref:typename:double
areaUnit	ReadCircuit.h	/^	double areaUnit, hUnit, wUnit, areaReadBody, hReadBody, wReadBody, areaDff, hDff, wDff;$/;"	m	class:ReadCircuit	typeref:typename:double
areaUnit	VoltageSenseAmp.h	/^	double areaUnit;$/;"	m	class:VoltageSenseAmp	typeref:typename:double
as_buffer	HWsim_wrap.cxx	/^  PyBufferProcs as_buffer;$/;"	m	struct:__anon571c7d070108	typeref:typename:PyBufferProcs	file:
as_mapping	HWsim_wrap.cxx	/^  PyMappingMethods as_mapping;$/;"	m	struct:__anon571c7d070108	typeref:typename:PyMappingMethods	file:
as_number	HWsim_wrap.cxx	/^  PyNumberMethods as_number;$/;"	m	struct:__anon571c7d070108	typeref:typename:PyNumberMethods	file:
as_sequence	HWsim_wrap.cxx	/^  PySequenceMethods as_sequence;$/;"	m	struct:__anon571c7d070108	typeref:typename:PySequenceMethods	file:
aspectRatio	MemCell.h	/^	double aspectRatio;		\/* Cell aspect ratio, H\/W *\/$/;"	m	class:MemCell	typeref:typename:double
avgWeightBit	SubArray.h	/^	int avgWeightBit;		\/\/ Average weight for each synapse (value can range from 0 to numCellPerSy/;"	m	class:SubArray	typeref:typename:int
backToBack	SubArray.h	/^	bool backToBack;    \/\/ Parameter for FPGA Mux (2 Mux triangles can combine into a Mux rectang/;"	m	class:SubArray	typeref:typename:bool
blSwitchMatrix	SubArray.h	/^	SwitchMatrix    blSwitchMatrix;$/;"	m	class:SubArray	typeref:typename:SwitchMatrix
buildInPotential	Technology.h	/^	double buildInPotential;	\/* Bottom junction built-in potential(PB in BSIM4 model), Unit: V *\//;"	m	class:Technology	typeref:typename:double
capCellAccess	SubArray.h	/^	double capCellAccess;	\/\/ Capacitance of access device, Unit: ohm$/;"	m	class:SubArray	typeref:typename:double
capCol	SubArray.h	/^	double capCol;		\/\/ Capacitance of column, Unit: F$/;"	m	class:SubArray	typeref:typename:double
capDffInvInput	ReadCircuit.h	/^	double capDffTgGateN, capDffTgGateP, capDffTgDrain, capDffInvInput, capDffInvOutput, capNorInpu/;"	m	class:ReadCircuit	typeref:typename:double
capDffInvOutput	ReadCircuit.h	/^	double capDffTgGateN, capDffTgGateP, capDffTgDrain, capDffInvInput, capDffInvOutput, capNorInpu/;"	m	class:ReadCircuit	typeref:typename:double
capDffTgDrain	ReadCircuit.h	/^	double capDffTgGateN, capDffTgGateP, capDffTgDrain, capDffInvInput, capDffInvOutput, capNorInpu/;"	m	class:ReadCircuit	typeref:typename:double
capDffTgGateN	ReadCircuit.h	/^	double capDffTgGateN, capDffTgGateP, capDffTgDrain, capDffInvInput, capDffInvOutput, capNorInpu/;"	m	class:ReadCircuit	typeref:typename:double
capDffTgGateP	ReadCircuit.h	/^	double capDffTgGateN, capDffTgGateP, capDffTgDrain, capDffInvInput, capDffInvOutput, capNorInpu/;"	m	class:ReadCircuit	typeref:typename:double
capDrainToChannel	Technology.h	/^	double capDrainToChannel;	\/* Junction drain to channel capacitance, Cjswg, Unit: F\/m *\/$/;"	m	class:Technology	typeref:typename:double
capDriverInvInput	RowDecoder.h	/^	double capInvInput, capInvOutput, capNandInput, capNandOutput, capNorInput, capNorOutput, capDr/;"	m	class:RowDecoder	typeref:typename:double
capDriverInvOutput	RowDecoder.h	/^	double capInvInput, capInvOutput, capNandInput, capNandOutput, capNorInput, capNorOutput, capDr/;"	m	class:RowDecoder	typeref:typename:double
capEnInvInput	Mux.h	/^	double capNandInput, capNandOutput, capEnInvInput, capEnInvOutput, capMuxInvInput, capMuxInvOut/;"	m	class:Mux	typeref:typename:double
capEnInvOutput	Mux.h	/^	double capNandInput, capNandOutput, capEnInvInput, capEnInvOutput, capMuxInvInput, capMuxInvOut/;"	m	class:Mux	typeref:typename:double
capFringe	Technology.h	/^	double capFringe;		\/* Fringe capacitance, Unit: F\/m *\/$/;"	m	class:Technology	typeref:typename:double
capIdealGate	Technology.h	/^	double capIdealGate;	\/* Ideal gate capacitance, Unit: F\/m *\/$/;"	m	class:Technology	typeref:typename:double
capInput	ReadCircuit.h	/^	double capInput;$/;"	m	class:ReadCircuit	typeref:typename:double
capInvInput	ActivationFunc.h	/^	double capInvInput, capInvOutput;$/;"	m	class:ActivationFunc	typeref:typename:double
capInvInput	Comparator.h	/^	double capInvInput, capInvOutput, capNand2Input, capNand2Output, capNand3Input, capNand3Output;$/;"	m	class:Comparator	typeref:typename:double
capInvInput	DFF.h	/^	double capTgDrain, capTgGateN, capTgGateP, capInvInput, capInvOutput;$/;"	m	class:DFF	typeref:typename:double
capInvInput	DeMux.h	/^	double capInvInput, capInvOutput, capTgDrain, capTgGateN, capTgGateP;$/;"	m	class:DeMux	typeref:typename:double
capInvInput	DecoderDriver.h	/^	double capInvInput, capInvOutput, capTgDrain, capTgGateN, capTgGateP;$/;"	m	class:DecoderDriver	typeref:typename:double
capInvInput	MultilevelSAEncoder.h	/^	double capNandInput, capNandOutput, capNandLgInput, capNandLgOutput, capInvInput, capInvOutput;$/;"	m	class:MultilevelSAEncoder	typeref:typename:double
capInvInput	ReadCircuit.h	/^	double capTgGateN, capTgGateP, capTgDrain, capNmosGate, capNmosDrain, capPmosGate, capPmosDrain/;"	m	class:ReadCircuit	typeref:typename:double
capInvInput	RowDecoder.h	/^	double capInvInput, capInvOutput, capNandInput, capNandOutput, capNorInput, capNorOutput, capDr/;"	m	class:RowDecoder	typeref:typename:double
capInvInput	SRAMWriteDriver.h	/^	double capInvInput, capInvOutput;$/;"	m	class:SRAMWriteDriver	typeref:typename:double
capInvInput	WLDecoderOutput.h	/^	double capNorInput, capNorOutput, capInvInput, capInvOutput, capTgGateN, capTgGateP, capTgDrain/;"	m	class:WLDecoderOutput	typeref:typename:double
capInvInput	WLNewDecoderDriver.h	/^	double capNandInput, capNandOutput, capInvInput, capInvOutput, capTgGateN, capTgGateP, capTgDra/;"	m	class:WLNewDecoderDriver	typeref:typename:double
capInvOutput	ActivationFunc.h	/^	double capInvInput, capInvOutput;$/;"	m	class:ActivationFunc	typeref:typename:double
capInvOutput	Comparator.h	/^	double capInvInput, capInvOutput, capNand2Input, capNand2Output, capNand3Input, capNand3Output;$/;"	m	class:Comparator	typeref:typename:double
capInvOutput	DFF.h	/^	double capTgDrain, capTgGateN, capTgGateP, capInvInput, capInvOutput;$/;"	m	class:DFF	typeref:typename:double
capInvOutput	DeMux.h	/^	double capInvInput, capInvOutput, capTgDrain, capTgGateN, capTgGateP;$/;"	m	class:DeMux	typeref:typename:double
capInvOutput	DecoderDriver.h	/^	double capInvInput, capInvOutput, capTgDrain, capTgGateN, capTgGateP;$/;"	m	class:DecoderDriver	typeref:typename:double
capInvOutput	MultilevelSAEncoder.h	/^	double capNandInput, capNandOutput, capNandLgInput, capNandLgOutput, capInvInput, capInvOutput;$/;"	m	class:MultilevelSAEncoder	typeref:typename:double
capInvOutput	ReadCircuit.h	/^	double capTgGateN, capTgGateP, capTgDrain, capNmosGate, capNmosDrain, capPmosGate, capPmosDrain/;"	m	class:ReadCircuit	typeref:typename:double
capInvOutput	RowDecoder.h	/^	double capInvInput, capInvOutput, capNandInput, capNandOutput, capNorInput, capNorOutput, capDr/;"	m	class:RowDecoder	typeref:typename:double
capInvOutput	SRAMWriteDriver.h	/^	double capInvInput, capInvOutput;$/;"	m	class:SRAMWriteDriver	typeref:typename:double
capInvOutput	WLDecoderOutput.h	/^	double capNorInput, capNorOutput, capInvInput, capInvOutput, capTgGateN, capTgGateP, capTgDrain/;"	m	class:WLDecoderOutput	typeref:typename:double
capInvOutput	WLNewDecoderDriver.h	/^	double capNandInput, capNandOutput, capInvInput, capInvOutput, capTgGateN, capTgGateP, capTgDra/;"	m	class:WLNewDecoderDriver	typeref:typename:double
capJunction	Technology.h	/^	double capJunction;		\/* Junction bottom capacitance, Cj0, Unit: F\/m^2 *\/$/;"	m	class:Technology	typeref:typename:double
capLoad	ActivationFunc.h	/^	double capLoad;$/;"	m	class:ActivationFunc	typeref:typename:double
capLoad	Adder.h	/^	double capLoad;$/;"	m	class:Adder	typeref:typename:double
capLoad	Comparator.h	/^	double capLoad;$/;"	m	class:Comparator	typeref:typename:double
capLoad	LUT.h	/^	double capSRAMCell, capLoad;$/;"	m	class:LUT	typeref:typename:double
capLoad	Mux.h	/^	double capLoad;$/;"	m	class:Mux	typeref:typename:double
capLoad	NewSwitchMatrix.h	/^	double capLoad;$/;"	m	class:NewSwitchMatrix	typeref:typename:double
capLoad	Precharger.h	/^	double capLoad, resLoad;$/;"	m	class:Precharger	typeref:typename:double
capLoad	SRAMWriteDriver.h	/^	double capLoad, resLoad;$/;"	m	class:SRAMWriteDriver	typeref:typename:double
capLoad	SenseAmp.h	/^	double capLoad;			\/* Load capacitance of sense amplifier *\/$/;"	m	class:SenseAmp	typeref:typename:double
capLoad	SwitchMatrix.h	/^	double capLoad;$/;"	m	class:SwitchMatrix	typeref:typename:double
capLoad	WLDecoderOutput.h	/^	double capLoad;	\/* Output capacitance, unit: F *\/$/;"	m	class:WLDecoderOutput	typeref:typename:double
capLoad	WLNewDecoderDriver.h	/^	double capLoad;	\/* Output capacitance, unit: F *\/$/;"	m	class:WLNewDecoderDriver	typeref:typename:double
capLoad1	DecoderDriver.h	/^	double capLoad1, capLoad2;	\/* Output capacitance, unit: F *\/$/;"	m	class:DecoderDriver	typeref:typename:double
capLoad1	RowDecoder.h	/^	double capLoad1;	\/\/ REGULAR: general capLoad, MUX: the NMOS Tg gates$/;"	m	class:RowDecoder	typeref:typename:double
capLoad2	DecoderDriver.h	/^	double capLoad1, capLoad2;	\/* Output capacitance, unit: F *\/$/;"	m	class:DecoderDriver	typeref:typename:double
capLoad2	RowDecoder.h	/^	double capLoad2;	\/\/ MUX: the PMOS Tg gates$/;"	m	class:RowDecoder	typeref:typename:double
capLoadPerColumn	Precharger.h	/^	double capLoadPerColumn;$/;"	m	class:Precharger	typeref:typename:double
capMuxInvInput	Mux.h	/^	double capNandInput, capNandOutput, capEnInvInput, capEnInvOutput, capMuxInvInput, capMuxInvOut/;"	m	class:Mux	typeref:typename:double
capMuxInvOutput	Mux.h	/^	double capNandInput, capNandOutput, capEnInvInput, capEnInvOutput, capMuxInvInput, capMuxInvOut/;"	m	class:Mux	typeref:typename:double
capNand2Input	Comparator.h	/^	double capInvInput, capInvOutput, capNand2Input, capNand2Output, capNand3Input, capNand3Output;$/;"	m	class:Comparator	typeref:typename:double
capNand2Output	Comparator.h	/^	double capInvInput, capInvOutput, capNand2Input, capNand2Output, capNand3Input, capNand3Output;$/;"	m	class:Comparator	typeref:typename:double
capNand3Input	Comparator.h	/^	double capInvInput, capInvOutput, capNand2Input, capNand2Output, capNand3Input, capNand3Output;$/;"	m	class:Comparator	typeref:typename:double
capNand3Output	Comparator.h	/^	double capInvInput, capInvOutput, capNand2Input, capNand2Output, capNand3Input, capNand3Output;$/;"	m	class:Comparator	typeref:typename:double
capNandInput	ActivationFunc.h	/^	double capNandInput, capNandOutput;$/;"	m	class:ActivationFunc	typeref:typename:double
capNandInput	Adder.h	/^	double capNandInput, capNandOutput;$/;"	m	class:Adder	typeref:typename:double
capNandInput	MultilevelSAEncoder.h	/^	double capNandInput, capNandOutput, capNandLgInput, capNandLgOutput, capInvInput, capInvOutput;$/;"	m	class:MultilevelSAEncoder	typeref:typename:double
capNandInput	Mux.h	/^	double capNandInput, capNandOutput, capEnInvInput, capEnInvOutput, capMuxInvInput, capMuxInvOut/;"	m	class:Mux	typeref:typename:double
capNandInput	RowDecoder.h	/^	double capInvInput, capInvOutput, capNandInput, capNandOutput, capNorInput, capNorOutput, capDr/;"	m	class:RowDecoder	typeref:typename:double
capNandInput	WLNewDecoderDriver.h	/^	double capNandInput, capNandOutput, capInvInput, capInvOutput, capTgGateN, capTgGateP, capTgDra/;"	m	class:WLNewDecoderDriver	typeref:typename:double
capNandLgInput	MultilevelSAEncoder.h	/^	double capNandInput, capNandOutput, capNandLgInput, capNandLgOutput, capInvInput, capInvOutput;$/;"	m	class:MultilevelSAEncoder	typeref:typename:double
capNandLgOutput	MultilevelSAEncoder.h	/^	double capNandInput, capNandOutput, capNandLgInput, capNandLgOutput, capInvInput, capInvOutput;$/;"	m	class:MultilevelSAEncoder	typeref:typename:double
capNandOutput	ActivationFunc.h	/^	double capNandInput, capNandOutput;$/;"	m	class:ActivationFunc	typeref:typename:double
capNandOutput	Adder.h	/^	double capNandInput, capNandOutput;$/;"	m	class:Adder	typeref:typename:double
capNandOutput	MultilevelSAEncoder.h	/^	double capNandInput, capNandOutput, capNandLgInput, capNandLgOutput, capInvInput, capInvOutput;$/;"	m	class:MultilevelSAEncoder	typeref:typename:double
capNandOutput	Mux.h	/^	double capNandInput, capNandOutput, capEnInvInput, capEnInvOutput, capMuxInvInput, capMuxInvOut/;"	m	class:Mux	typeref:typename:double
capNandOutput	RowDecoder.h	/^	double capInvInput, capInvOutput, capNandInput, capNandOutput, capNorInput, capNorOutput, capDr/;"	m	class:RowDecoder	typeref:typename:double
capNandOutput	WLNewDecoderDriver.h	/^	double capNandInput, capNandOutput, capInvInput, capInvOutput, capTgGateN, capTgGateP, capTgDra/;"	m	class:WLNewDecoderDriver	typeref:typename:double
capNmosDrain	ReadCircuit.h	/^	double capTgGateN, capTgGateP, capTgDrain, capNmosGate, capNmosDrain, capPmosGate, capPmosDrain/;"	m	class:ReadCircuit	typeref:typename:double
capNmosDrain	VoltageSenseAmp.h	/^	double capNmosGate, capNmosDrain, capPmosGate, capPmosDrain;$/;"	m	class:VoltageSenseAmp	typeref:typename:double
capNmosDrain	WLDecoderOutput.h	/^	double capNorInput, capNorOutput, capInvInput, capInvOutput, capTgGateN, capTgGateP, capTgDrain/;"	m	class:WLDecoderOutput	typeref:typename:double
capNmosGate	ReadCircuit.h	/^	double capTgGateN, capTgGateP, capTgDrain, capNmosGate, capNmosDrain, capPmosGate, capPmosDrain/;"	m	class:ReadCircuit	typeref:typename:double
capNmosGate	VoltageSenseAmp.h	/^	double capNmosGate, capNmosDrain, capPmosGate, capPmosDrain;$/;"	m	class:VoltageSenseAmp	typeref:typename:double
capNmosGate	WLDecoderOutput.h	/^	double capNorInput, capNorOutput, capInvInput, capInvOutput, capTgGateN, capTgGateP, capTgDrain/;"	m	class:WLDecoderOutput	typeref:typename:double
capNorInput	ReadCircuit.h	/^	double capDffTgGateN, capDffTgGateP, capDffTgDrain, capDffInvInput, capDffInvOutput, capNorInpu/;"	m	class:ReadCircuit	typeref:typename:double
capNorInput	RowDecoder.h	/^	double capInvInput, capInvOutput, capNandInput, capNandOutput, capNorInput, capNorOutput, capDr/;"	m	class:RowDecoder	typeref:typename:double
capNorInput	WLDecoderOutput.h	/^	double capNorInput, capNorOutput, capInvInput, capInvOutput, capTgGateN, capTgGateP, capTgDrain/;"	m	class:WLDecoderOutput	typeref:typename:double
capNorOutput	ReadCircuit.h	/^	double capDffTgGateN, capDffTgGateP, capDffTgDrain, capDffInvInput, capDffInvOutput, capNorInpu/;"	m	class:ReadCircuit	typeref:typename:double
capNorOutput	RowDecoder.h	/^	double capInvInput, capInvOutput, capNandInput, capNandOutput, capNorInput, capNorOutput, capDr/;"	m	class:RowDecoder	typeref:typename:double
capNorOutput	WLDecoderOutput.h	/^	double capNorInput, capNorOutput, capInvInput, capInvOutput, capTgGateN, capTgGateP, capTgDrain/;"	m	class:WLDecoderOutput	typeref:typename:double
capOutputBitlinePrecharger	Precharger.h	/^	double capOutputBitlinePrecharger;$/;"	m	class:Precharger	typeref:typename:double
capOverlap	Technology.h	/^	double capOverlap;		\/* Overlap capacitance, Cover in MASTAR, Unit: F\/m *\/$/;"	m	class:Technology	typeref:typename:double
capPmosDrain	ReadCircuit.h	/^	double capTgGateN, capTgGateP, capTgDrain, capNmosGate, capNmosDrain, capPmosGate, capPmosDrain/;"	m	class:ReadCircuit	typeref:typename:double
capPmosDrain	VoltageSenseAmp.h	/^	double capNmosGate, capNmosDrain, capPmosGate, capPmosDrain;$/;"	m	class:VoltageSenseAmp	typeref:typename:double
capPmosGate	ReadCircuit.h	/^	double capTgGateN, capTgGateP, capTgDrain, capNmosGate, capNmosDrain, capPmosGate, capPmosDrain/;"	m	class:ReadCircuit	typeref:typename:double
capPmosGate	VoltageSenseAmp.h	/^	double capNmosGate, capNmosDrain, capPmosGate, capPmosDrain;$/;"	m	class:VoltageSenseAmp	typeref:typename:double
capPolywire	Technology.h	/^	double capPolywire;	\/* Poly wire capacitance, Unit: F\/m *\/$/;"	m	class:Technology	typeref:typename:double
capRow1	SubArray.h	/^	double capRow1;		\/\/ Capacitance of row1 (BL for 1T1R, WL for Cross-point), Unit: F$/;"	m	class:SubArray	typeref:typename:double
capRow2	SubArray.h	/^	double capRow2;		\/\/ Capacitance of row2 (WL for 1T1R), Unit: F$/;"	m	class:SubArray	typeref:typename:double
capS1	VoltageSenseAmp.h	/^	double capS1;$/;"	m	class:VoltageSenseAmp	typeref:typename:double
capSRAMCell	LUT.h	/^	double capSRAMCell, capLoad;$/;"	m	class:LUT	typeref:typename:double
capSRAMCell	MemCell.h	/^	double capSRAMCell;$/;"	m	class:MemCell	typeref:typename:double
capSidewall	Technology.h	/^	double capSidewall;		\/* Junction sidewall capacitance, Cjsw, Unit: F\/m *\/$/;"	m	class:Technology	typeref:typename:double
capTgDrain	DFF.h	/^	double capTgDrain, capTgGateN, capTgGateP, capInvInput, capInvOutput;$/;"	m	class:DFF	typeref:typename:double
capTgDrain	DeMux.h	/^	double capInvInput, capInvOutput, capTgDrain, capTgGateN, capTgGateP;$/;"	m	class:DeMux	typeref:typename:double
capTgDrain	DecoderDriver.h	/^	double capInvInput, capInvOutput, capTgDrain, capTgGateN, capTgGateP;$/;"	m	class:DecoderDriver	typeref:typename:double
capTgDrain	Mux.h	/^	double capNandInput, capNandOutput, capEnInvInput, capEnInvOutput, capMuxInvInput, capMuxInvOut/;"	m	class:Mux	typeref:typename:double
capTgDrain	NewSwitchMatrix.h	/^	double capTgDrain, capTgGateN, capTgGateP;$/;"	m	class:NewSwitchMatrix	typeref:typename:double
capTgDrain	ReadCircuit.h	/^	double capTgGateN, capTgGateP, capTgDrain, capNmosGate, capNmosDrain, capPmosGate, capPmosDrain/;"	m	class:ReadCircuit	typeref:typename:double
capTgDrain	SwitchMatrix.h	/^	double capTgDrain, capTgGateN, capTgGateP;$/;"	m	class:SwitchMatrix	typeref:typename:double
capTgDrain	WLDecoderOutput.h	/^	double capNorInput, capNorOutput, capInvInput, capInvOutput, capTgGateN, capTgGateP, capTgDrain/;"	m	class:WLDecoderOutput	typeref:typename:double
capTgDrain	WLNewDecoderDriver.h	/^	double capNandInput, capNandOutput, capInvInput, capInvOutput, capTgGateN, capTgGateP, capTgDra/;"	m	class:WLNewDecoderDriver	typeref:typename:double
capTgGateN	DFF.h	/^	double capTgDrain, capTgGateN, capTgGateP, capInvInput, capInvOutput;$/;"	m	class:DFF	typeref:typename:double
capTgGateN	DeMux.h	/^	double capInvInput, capInvOutput, capTgDrain, capTgGateN, capTgGateP;$/;"	m	class:DeMux	typeref:typename:double
capTgGateN	DecoderDriver.h	/^	double capInvInput, capInvOutput, capTgDrain, capTgGateN, capTgGateP;$/;"	m	class:DecoderDriver	typeref:typename:double
capTgGateN	Mux.h	/^	double capNandInput, capNandOutput, capEnInvInput, capEnInvOutput, capMuxInvInput, capMuxInvOut/;"	m	class:Mux	typeref:typename:double
capTgGateN	NewSwitchMatrix.h	/^	double capTgDrain, capTgGateN, capTgGateP;$/;"	m	class:NewSwitchMatrix	typeref:typename:double
capTgGateN	ReadCircuit.h	/^	double capTgGateN, capTgGateP, capTgDrain, capNmosGate, capNmosDrain, capPmosGate, capPmosDrain/;"	m	class:ReadCircuit	typeref:typename:double
capTgGateN	SwitchMatrix.h	/^	double capTgDrain, capTgGateN, capTgGateP;$/;"	m	class:SwitchMatrix	typeref:typename:double
capTgGateN	WLDecoderOutput.h	/^	double capNorInput, capNorOutput, capInvInput, capInvOutput, capTgGateN, capTgGateP, capTgDrain/;"	m	class:WLDecoderOutput	typeref:typename:double
capTgGateN	WLNewDecoderDriver.h	/^	double capNandInput, capNandOutput, capInvInput, capInvOutput, capTgGateN, capTgGateP, capTgDra/;"	m	class:WLNewDecoderDriver	typeref:typename:double
capTgGateP	DFF.h	/^	double capTgDrain, capTgGateN, capTgGateP, capInvInput, capInvOutput;$/;"	m	class:DFF	typeref:typename:double
capTgGateP	DeMux.h	/^	double capInvInput, capInvOutput, capTgDrain, capTgGateN, capTgGateP;$/;"	m	class:DeMux	typeref:typename:double
capTgGateP	DecoderDriver.h	/^	double capInvInput, capInvOutput, capTgDrain, capTgGateN, capTgGateP;$/;"	m	class:DecoderDriver	typeref:typename:double
capTgGateP	Mux.h	/^	double capNandInput, capNandOutput, capEnInvInput, capEnInvOutput, capMuxInvInput, capMuxInvOut/;"	m	class:Mux	typeref:typename:double
capTgGateP	NewSwitchMatrix.h	/^	double capTgDrain, capTgGateN, capTgGateP;$/;"	m	class:NewSwitchMatrix	typeref:typename:double
capTgGateP	ReadCircuit.h	/^	double capTgGateN, capTgGateP, capTgDrain, capNmosGate, capNmosDrain, capPmosGate, capPmosDrain/;"	m	class:ReadCircuit	typeref:typename:double
capTgGateP	SwitchMatrix.h	/^	double capTgDrain, capTgGateN, capTgGateP;$/;"	m	class:SwitchMatrix	typeref:typename:double
capTgGateP	WLDecoderOutput.h	/^	double capNorInput, capNorOutput, capInvInput, capInvOutput, capTgGateN, capTgGateP, capTgDrain/;"	m	class:WLDecoderOutput	typeref:typename:double
capTgGateP	WLNewDecoderDriver.h	/^	double capNandInput, capNandOutput, capInvInput, capInvOutput, capTgGateN, capTgGateP, capTgDra/;"	m	class:WLNewDecoderDriver	typeref:typename:double
capWireLoadPerColumn	Precharger.h	/^	double capWireLoadPerColumn, resWireLoadPerColumn;$/;"	m	class:Precharger	typeref:typename:double
cast	HWsim_wrap.cxx	/^  struct swig_cast_info  *cast;			\/* linked list of types that can cast into this type *\/$/;"	m	struct:swig_type_info	typeref:struct:swig_cast_info *	file:
cast_initial	HWsim_wrap.cxx	/^  swig_cast_info         **cast_initial;	\/* Array of initially generated casting structures *\/$/;"	m	struct:swig_module_info	typeref:typename:swig_cast_info **	file:
cell	ActivationFunc.h	/^	const MemCell& cell;$/;"	m	class:ActivationFunc	typeref:typename:const MemCell &
cell	Adder.h	/^	const MemCell& cell;$/;"	m	class:Adder	typeref:typename:const MemCell &
cell	Comparator.h	/^	const MemCell& cell;$/;"	m	class:Comparator	typeref:typename:const MemCell &
cell	Core.h	/^	const MemCell& cell;$/;"	m	class:Core	typeref:typename:const MemCell &
cell	CurrentSenseAmp.h	/^	const MemCell& cell;$/;"	m	class:CurrentSenseAmp	typeref:typename:const MemCell &
cell	DFF.h	/^	const MemCell& cell;$/;"	m	class:DFF	typeref:typename:const MemCell &
cell	DeMux.h	/^	const MemCell& cell;$/;"	m	class:DeMux	typeref:typename:const MemCell &
cell	DecoderDriver.h	/^	const MemCell& cell;$/;"	m	class:DecoderDriver	typeref:typename:const MemCell &
cell	HWsim.h	/^	MemCell cell;$/;"	m	class:HWsim	typeref:typename:MemCell
cell	HWsim.py	/^        cell = _swig_property(_HWsim.HWsim_cell_get, _HWsim.HWsim_cell_set)$/;"	v	class:HWsim
cell	LUT.h	/^	const MemCell& cell;$/;"	m	class:LUT	typeref:typename:const MemCell &
cell	MultilevelSAEncoder.h	/^	const MemCell& cell;$/;"	m	class:MultilevelSAEncoder	typeref:typename:const MemCell &
cell	MultilevelSenseAmp.h	/^	const MemCell& cell;$/;"	m	class:MultilevelSenseAmp	typeref:typename:const MemCell &
cell	Mux.h	/^	const MemCell& cell;$/;"	m	class:Mux	typeref:typename:const MemCell &
cell	NewSwitchMatrix.h	/^	const MemCell& cell;$/;"	m	class:NewSwitchMatrix	typeref:typename:const MemCell &
cell	Precharger.h	/^	const MemCell& cell;$/;"	m	class:Precharger	typeref:typename:const MemCell &
cell	ReadCircuit.h	/^	const MemCell& cell;$/;"	m	class:ReadCircuit	typeref:typename:const MemCell &
cell	RippleCounter.h	/^	const MemCell& cell;$/;"	m	class:RippleCounter	typeref:typename:const MemCell &
cell	RowDecoder.h	/^	const MemCell& cell;$/;"	m	class:RowDecoder	typeref:typename:const MemCell &
cell	SRAMWriteDriver.h	/^	const MemCell& cell;$/;"	m	class:SRAMWriteDriver	typeref:typename:const MemCell &
cell	SenseAmp.h	/^	const MemCell& cell;$/;"	m	class:SenseAmp	typeref:typename:const MemCell &
cell	ShiftAdd.h	/^	const MemCell& cell;$/;"	m	class:ShiftAdd	typeref:typename:const MemCell &
cell	SubArray.h	/^	MemCell& cell;$/;"	m	class:SubArray	typeref:typename:MemCell &
cell	Sum.h	/^	const MemCell& cell;$/;"	m	class:Sum	typeref:typename:const MemCell &
cell	SwitchMatrix.h	/^	const MemCell& cell;$/;"	m	class:SwitchMatrix	typeref:typename:const MemCell &
cell	VoltageSenseAmp.h	/^	const MemCell& cell;$/;"	m	class:VoltageSenseAmp	typeref:typename:const MemCell &
cell	WLDecoderOutput.h	/^	const MemCell& cell;$/;"	m	class:WLDecoderOutput	typeref:typename:const MemCell &
cell	WLNewDecoderDriver.h	/^	const MemCell& cell;$/;"	m	class:WLNewDecoderDriver	typeref:typename:const MemCell &
charbufferproc	HWsim_wrap.cxx	/^typedef getcharbufferproc charbufferproc;$/;"	t	typeref:typename:getcharbufferproc	file:
clean	makefile	/^clean:$/;"	t
clientdata	HWsim_wrap.cxx	/^  void                    *clientdata;		\/* Language specific module data *\/$/;"	m	struct:swig_module_info	typeref:typename:void *	file:
clientdata	HWsim_wrap.cxx	/^  void                   *clientdata;		\/* language specific type data *\/$/;"	m	struct:swig_type_info	typeref:typename:void *	file:
clkFreq	CurrentSenseAmp.h	/^	double clkFreq;$/;"	m	class:CurrentSenseAmp	typeref:typename:double
clkFreq	DFF.h	/^	double clkFreq;$/;"	m	class:DFF	typeref:typename:double
clkFreq	LUT.h	/^	double clkFreq;$/;"	m	class:LUT	typeref:typename:double
clkFreq	MultilevelSenseAmp.h	/^	double clkFreq;$/;"	m	class:MultilevelSenseAmp	typeref:typename:double
clkFreq	NewSwitchMatrix.h	/^	double clkFreq;$/;"	m	class:NewSwitchMatrix	typeref:typename:double
clkFreq	ReadCircuit.h	/^	double clkFreq;$/;"	m	class:ReadCircuit	typeref:typename:double
clkFreq	ReadParam.h	/^	double clkFreq;					\/* Clock frequence, Unit: Hz *\/$/;"	m	class:ReadParam	typeref:typename:double
clkFreq	RippleCounter.h	/^	double clkFreq;$/;"	m	class:RippleCounter	typeref:typename:double
clkFreq	SenseAmp.h	/^	double clkFreq;$/;"	m	class:SenseAmp	typeref:typename:double
clkFreq	ShiftAdd.h	/^	double clkFreq;$/;"	m	class:ShiftAdd	typeref:typename:double
clkFreq	SubArray.h	/^	double clkFreq;			\/\/ Clock frequency (Hz)$/;"	m	class:SubArray	typeref:typename:double
clkFreq	SwitchMatrix.h	/^	double clkFreq;$/;"	m	class:SwitchMatrix	typeref:typename:double
clkFreq	VoltageSenseAmp.h	/^	double clkFreq;$/;"	m	class:VoltageSenseAmp	typeref:typename:double
colDecoder	LUT.h	/^	RowDecoder colDecoder;$/;"	m	class:LUT	typeref:typename:RowDecoder
colDecoder	SubArray.h	/^	RowDecoder colDecoder;$/;"	m	class:SubArray	typeref:typename:RowDecoder
colDecoderDriver	LUT.h	/^	DecoderDriver colDecoderDriver;$/;"	m	class:LUT	typeref:typename:DecoderDriver
colDecoderDriver	SubArray.h	/^	DecoderDriver colDecoderDriver;$/;"	m	class:SubArray	typeref:typename:DecoderDriver
colDelay	SubArray.h	/^	double colDelay;	\/\/ Column delay, Unit: s$/;"	m	class:SubArray	typeref:typename:double
comparator	SubArray.h	/^	Comparator comparator;$/;"	m	class:SubArray	typeref:typename:Comparator
conventional	typedef.h	/^	conventional,	\/* conventional CMOS *\/$/;"	e	enum:TransistorType
converter	HWsim_wrap.cxx	/^  swig_converter_func     converter;		\/* function to cast the void pointers *\/$/;"	m	struct:swig_cast_info	typeref:typename:swig_converter_func	file:
copy	HWsim.py	/^    def copy(self):$/;"	m	class:SwigPyIterator
core	HWsim.h	/^	Core* core;$/;"	m	class:HWsim	typeref:typename:Core *
core	HWsim.py	/^        core = _swig_property(_HWsim.HWsim_core_get, _HWsim.HWsim_core_set)$/;"	v	class:HWsim
currentOffNmos	Technology.h	/^	double currentOffNmos[101];	\/* NMOS off current (from 300K to 400K), Unit: A\/m *\/$/;"	m	class:Technology	typeref:typename:double[101]
currentOffPmos	Technology.h	/^	double currentOffPmos[101]; \/* PMOS off current (from 300K to 400K), Unit: A\/m *\/$/;"	m	class:Technology	typeref:typename:double[101]
currentOnNmos	Technology.h	/^	double currentOnNmos[101];		\/* NMOS saturation current, Unit: A\/m *\/$/;"	m	class:Technology	typeref:typename:double[101]
currentOnPmos	Technology.h	/^	double currentOnPmos[101];		\/* PMOS saturation current, Unit: A\/m *\/$/;"	m	class:Technology	typeref:typename:double[101]
currentSense	SenseAmp.h	/^	bool currentSense;		\/* Whether the sensing scheme is current-based *\/$/;"	m	class:SenseAmp	typeref:typename:bool
currentSenseAmp	MultilevelSenseAmp.h	/^	CurrentSenseAmp currentSenseAmp;$/;"	m	class:MultilevelSenseAmp	typeref:typename:CurrentSenseAmp
current_gmNmos	Technology.h	/^    double current_gmNmos;		\/* NMOS current at 0.7*vdd for gm calculation, Unit: A\/m\/V*\/ $/;"	m	class:Technology	typeref:typename:double
current_gmPmos	Technology.h	/^    double current_gmPmos;		\/* PMOS current at 0.7*vdd for gm calculation, Unit: A\/m\/V*\/ $/;"	m	class:Technology	typeref:typename:double
dcast	HWsim_wrap.cxx	/^  swig_dycast_func        dcast;		\/* dynamic cast function down a hierarchy *\/$/;"	m	struct:swig_type_info	typeref:typename:swig_dycast_func	file:
deMux	SubArray.h	/^	DeMux   deMux;$/;"	m	class:SubArray	typeref:typename:DeMux
decr	HWsim.py	/^    def decr(self, n=1):$/;"	m	class:SwigPyIterator
decr	HWsim_wrap.cxx	/^    virtual SwigPyIterator *decr(size_t \/*n*\/ = 1)$/;"	f	struct:swig::SwigPyIterator	typeref:typename:SwigPyIterator *	file:
delargs	HWsim_wrap.cxx	/^  int delargs;$/;"	m	struct:__anon571c7d070208	typeref:typename:int	file:
depend	makefile	/^depend: .depend$/;"	t
descriptor	HWsim_wrap.cxx	/^    static swig_type_info* descriptor() {$/;"	f	struct:swig::SwigPyIterator	typeref:typename:swig_type_info *	file:
designopt	ReadParam.h	/^	DesignOptimization designopt;	\/* Either read latency, write latency, read energy, write energy/;"	m	class:ReadParam	typeref:typename:DesignOptimization
designoptname	ReadParam.h	/^	std::string designoptname;$/;"	m	class:ReadParam	typeref:typename:std::string
destroy	HWsim_wrap.cxx	/^  PyObject *destroy;$/;"	m	struct:__anon571c7d070208	typeref:typename:PyObject *	file:
deviceRoadmap	InputParameter.h	/^	DeviceRoadmap deviceRoadmap;	\/* ITRS roadmap: HP or LSTP *\/$/;"	m	class:InputParameter	typeref:typename:DeviceRoadmap
deviceRoadmap	ReadParam.h	/^	DeviceRoadmap deviceRoadmap;	\/* ITRS roadmap: HP, LSTP *\/$/;"	m	class:ReadParam	typeref:typename:DeviceRoadmap
deviceRoadmap	Technology.h	/^	DeviceRoadmap deviceRoadmap;	\/* HP or LP *\/$/;"	m	class:Technology	typeref:typename:DeviceRoadmap
dff	NewSwitchMatrix.h	/^	DFF dff;$/;"	m	class:NewSwitchMatrix	typeref:typename:DFF
dff	RippleCounter.h	/^	DFF dff;$/;"	m	class:RippleCounter	typeref:typename:DFF
dff	ShiftAdd.h	/^	DFF dff;$/;"	m	class:ShiftAdd	typeref:typename:DFF
dff	SubArray.h	/^	DFF dff;$/;"	m	class:SubArray	typeref:typename:DFF
dff	SwitchMatrix.h	/^	DFF dff;$/;"	m	class:SwitchMatrix	typeref:typename:DFF
dict	HWsim_wrap.cxx	/^  PyObject *dict;$/;"	m	struct:__anon571c7d070308	typeref:typename:PyObject *	file:
digitalModeNeuro	SubArray.h	/^	bool digitalModeNeuro;	\/\/ Digital RRAM in neuro mode$/;"	m	class:SubArray	typeref:typename:bool
diode_access	typedef.h	/^	diode_access,$/;"	e	enum:CellAccessType
distance	HWsim.py	/^    def distance(self, x):$/;"	m	class:SwigPyIterator
distance	HWsim_wrap.cxx	/^    virtual ptrdiff_t distance(const SwigPyIterator &\/*x*\/) const$/;"	f	struct:swig::SwigPyIterator	typeref:typename:ptrdiff_t	file:
dvalue	HWsim_wrap.cxx	/^  double dvalue;$/;"	m	struct:swig_const_info	typeref:typename:double	file:
effectiveResistanceMultiplier	Technology.h	/^	double effectiveResistanceMultiplier;	\/* Extra resistance due to vdsat *\/$/;"	m	class:Technology	typeref:typename:double
emptyArea	FunctionUnit.h	/^	double emptyArea;		\/* Unit: m^2 *\/$/;"	m	class:FunctionUnit	typeref:typename:double
emptyArea	HWsim.py	/^        emptyArea = _swig_property(_HWsim.FunctionUnit_emptyArea_get, _HWsim.FunctionUnit_emptyA/;"	v	class:FunctionUnit
enableLatency	Precharger.h	/^	double enableLatency;$/;"	m	class:Precharger	typeref:typename:double
end	HWsim_wrap.cxx	/^         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}$/;"	f	class:SWIG_Python_Thread_Allow	typeref:typename:void	file:
end	HWsim_wrap.cxx	/^         void end() { if (status) { PyGILState_Release(state); status = false;} }$/;"	f	class:SWIG_Python_Thread_Block	typeref:typename:void	file:
equal	HWsim.py	/^    def equal(self, x):$/;"	m	class:SwigPyIterator
equal	HWsim_wrap.cxx	/^    virtual bool equal (const SwigPyIterator &\/*x*\/) const$/;"	f	struct:swig::SwigPyIterator	typeref:typename:bool	file:
featureSize	MemCell.h	/^	double featureSize;$/;"	m	class:MemCell	typeref:typename:double
featureSize	Technology.h	/^	double featureSize;	\/* Process feature size, Unit: m *\/$/;"	m	class:Technology	typeref:typename:double
featureSizeInNano	Technology.h	/^	int featureSizeInNano; \/*Process feature size, Unit: nm *\/$/;"	m	class:Technology	typeref:typename:int
fileCellType	ReadParam.h	/^	std::string fileCellType;		\/* Input file name of cell type: DigitalRRAMTHU *\/$/;"	m	class:ReadParam	typeref:typename:std::string
freefunc	HWsim_wrap.cxx	/^typedef destructor freefunc;$/;"	t	typeref:typename:destructor	file:
get_attr	HWsim_wrap.cxx	/^    PyObject *(*get_attr)(void);       \/* Return the current value *\/$/;"	m	struct:swig_globalvar	typeref:typename:PyObject * (*)(void)	file:
hAdder	Adder.h	/^	double hAdder, wAdder;$/;"	m	class:Adder	typeref:typename:double
hDff	ReadCircuit.h	/^	double areaUnit, hUnit, wUnit, areaReadBody, hReadBody, wReadBody, areaDff, hDff, wDff;$/;"	m	class:ReadCircuit	typeref:typename:double
hInv	ActivationFunc.h	/^	double wInv, hInv;$/;"	m	class:ActivationFunc	typeref:typename:double
hNand	ActivationFunc.h	/^	double wNand, hNand;$/;"	m	class:ActivationFunc	typeref:typename:double
hNmosL	CurrentSenseAmp.h	/^	double hNmosL, wNmosL, hNmosS, wNmosS, hNmosM, wNmosM;$/;"	m	class:CurrentSenseAmp	typeref:typename:double
hNmosM	CurrentSenseAmp.h	/^	double hNmosL, wNmosL, hNmosS, wNmosS, hNmosM, wNmosM;$/;"	m	class:CurrentSenseAmp	typeref:typename:double
hNmosS	CurrentSenseAmp.h	/^	double hNmosL, wNmosL, hNmosS, wNmosS, hNmosM, wNmosM;$/;"	m	class:CurrentSenseAmp	typeref:typename:double
hReadBody	ReadCircuit.h	/^	double areaUnit, hUnit, wUnit, areaReadBody, hReadBody, wReadBody, areaDff, hDff, wDff;$/;"	m	class:ReadCircuit	typeref:typename:double
hUnit	ReadCircuit.h	/^	double areaUnit, hUnit, wUnit, areaReadBody, hReadBody, wReadBody, areaDff, hDff, wDff;$/;"	m	class:ReadCircuit	typeref:typename:double
height	FunctionUnit.h	/^	double height;		\/* Unit: m *\/$/;"	m	class:FunctionUnit	typeref:typename:double
height	HWsim.py	/^        height = _swig_property(_HWsim.FunctionUnit_height_get, _HWsim.FunctionUnit_height_set)$/;"	v	class:FunctionUnit
heightArray	SubArray.h	/^	double heightArray;$/;"	m	class:SubArray	typeref:typename:double
heightFin	Technology.h	/^	double heightFin;	\/* Fin height, Unit: m *\/$/;"	m	class:Technology	typeref:typename:double
heightInFeatureSize	MemCell.h	/^	double heightInFeatureSize;	\/* Cell height, Unit: F *\/$/;"	m	class:MemCell	typeref:typename:double
horowitz	formula.cpp	/^double horowitz(double tr, double beta, double rampInput, double *rampOutput) {$/;"	f	typeref:typename:double
implicitconv	HWsim_wrap.cxx	/^  int implicitconv;$/;"	m	struct:__anon571c7d070208	typeref:typename:int	file:
incr	HWsim.py	/^    def incr(self, n=1):$/;"	m	class:SwigPyIterator
initialized	ActivationFunc.h	/^	bool initialized;$/;"	m	class:ActivationFunc	typeref:typename:bool
initialized	Adder.h	/^	bool initialized;	\/* Initialization flag *\/$/;"	m	class:Adder	typeref:typename:bool
initialized	Comparator.h	/^	bool initialized;	\/* Initialization flag *\/$/;"	m	class:Comparator	typeref:typename:bool
initialized	Core.h	/^	bool initialized;	\/* Initialization flag *\/$/;"	m	class:Core	typeref:typename:bool
initialized	CurrentSenseAmp.h	/^	bool initialized;	\/* Initialization flag *\/$/;"	m	class:CurrentSenseAmp	typeref:typename:bool
initialized	DFF.h	/^	bool initialized;	\/* Initialization flag *\/$/;"	m	class:DFF	typeref:typename:bool
initialized	DeMux.h	/^	bool initialized;	\/* Initialization flag *\/$/;"	m	class:DeMux	typeref:typename:bool
initialized	DecoderDriver.h	/^	bool initialized;	\/* Initialization flag *\/$/;"	m	class:DecoderDriver	typeref:typename:bool
initialized	HWsim.h	/^	bool initialized;	\/* Initialization flag *\/$/;"	m	class:HWsim	typeref:typename:bool
initialized	HWsim.py	/^        initialized = _swig_property(_HWsim.HWsim_initialized_get, _HWsim.HWsim_initialized_set)$/;"	v	class:HWsim
initialized	LUT.h	/^	bool initialized;	\/* Initialization flag *\/$/;"	m	class:LUT	typeref:typename:bool
initialized	MultilevelSAEncoder.h	/^	bool initialized;	\/* Initialization flag *\/$/;"	m	class:MultilevelSAEncoder	typeref:typename:bool
initialized	MultilevelSenseAmp.h	/^	bool initialized;		\/* Initialization flag *\/$/;"	m	class:MultilevelSenseAmp	typeref:typename:bool
initialized	Mux.h	/^	bool initialized;	\/* Initialization flag *\/$/;"	m	class:Mux	typeref:typename:bool
initialized	NewSwitchMatrix.h	/^	bool initialized;	\/* Initialization flag *\/$/;"	m	class:NewSwitchMatrix	typeref:typename:bool
initialized	Precharger.h	/^	bool initialized;	\/* Initialization flag *\/$/;"	m	class:Precharger	typeref:typename:bool
initialized	ReadCircuit.h	/^	bool initialized;	\/* Initialization flag *\/$/;"	m	class:ReadCircuit	typeref:typename:bool
initialized	RippleCounter.h	/^	bool initialized;	\/* Initialization flag *\/$/;"	m	class:RippleCounter	typeref:typename:bool
initialized	RowDecoder.h	/^	bool initialized;	\/* Initialization flag *\/$/;"	m	class:RowDecoder	typeref:typename:bool
initialized	SRAMWriteDriver.h	/^	bool initialized;	\/* Initialization flag *\/$/;"	m	class:SRAMWriteDriver	typeref:typename:bool
initialized	SenseAmp.h	/^	bool initialized;		\/* Initialization flag *\/$/;"	m	class:SenseAmp	typeref:typename:bool
initialized	ShiftAdd.h	/^	bool initialized;	\/* Initialization flag *\/$/;"	m	class:ShiftAdd	typeref:typename:bool
initialized	SubArray.h	/^	bool initialized;	\/\/ Initialization flag$/;"	m	class:SubArray	typeref:typename:bool
initialized	Sum.h	/^	bool initialized;	\/* Initialization flag *\/$/;"	m	class:Sum	typeref:typename:bool
initialized	SwitchMatrix.h	/^	bool initialized;	\/* Initialization flag *\/$/;"	m	class:SwitchMatrix	typeref:typename:bool
initialized	Technology.h	/^	bool initialized;	\/* Initialization flag *\/$/;"	m	class:Technology	typeref:typename:bool
initialized	VoltageSenseAmp.h	/^	bool initialized;	\/* Initialization flag *\/$/;"	m	class:VoltageSenseAmp	typeref:typename:bool
initialized	WLDecoderOutput.h	/^	bool initialized;	\/* Initialization flag *\/$/;"	m	class:WLDecoderOutput	typeref:typename:bool
initialized	WLNewDecoderDriver.h	/^	bool initialized;	\/* Initialization flag *\/$/;"	m	class:WLNewDecoderDriver	typeref:typename:bool
inputParameter	ActivationFunc.h	/^	const InputParameter& inputParameter;$/;"	m	class:ActivationFunc	typeref:typename:const InputParameter &
inputParameter	Adder.h	/^	const InputParameter& inputParameter;$/;"	m	class:Adder	typeref:typename:const InputParameter &
inputParameter	Comparator.h	/^	const InputParameter& inputParameter;$/;"	m	class:Comparator	typeref:typename:const InputParameter &
inputParameter	Core.h	/^	const InputParameter& inputParameter;$/;"	m	class:Core	typeref:typename:const InputParameter &
inputParameter	CurrentSenseAmp.h	/^	const InputParameter& inputParameter;$/;"	m	class:CurrentSenseAmp	typeref:typename:const InputParameter &
inputParameter	DFF.h	/^	const InputParameter& inputParameter;$/;"	m	class:DFF	typeref:typename:const InputParameter &
inputParameter	DeMux.h	/^	const InputParameter& inputParameter;$/;"	m	class:DeMux	typeref:typename:const InputParameter &
inputParameter	DecoderDriver.h	/^	const InputParameter& inputParameter;$/;"	m	class:DecoderDriver	typeref:typename:const InputParameter &
inputParameter	HWsim.h	/^	InputParameter inputParameter;$/;"	m	class:HWsim	typeref:typename:InputParameter
inputParameter	HWsim.py	/^        inputParameter = _swig_property(_HWsim.HWsim_inputParameter_get, _HWsim.HWsim_inputParam/;"	v	class:HWsim
inputParameter	LUT.h	/^	const InputParameter& inputParameter;$/;"	m	class:LUT	typeref:typename:const InputParameter &
inputParameter	MultilevelSAEncoder.h	/^	const InputParameter& inputParameter;$/;"	m	class:MultilevelSAEncoder	typeref:typename:const InputParameter &
inputParameter	MultilevelSenseAmp.h	/^	const InputParameter& inputParameter;$/;"	m	class:MultilevelSenseAmp	typeref:typename:const InputParameter &
inputParameter	Mux.h	/^	const InputParameter& inputParameter;$/;"	m	class:Mux	typeref:typename:const InputParameter &
inputParameter	NewSwitchMatrix.h	/^	const InputParameter& inputParameter;$/;"	m	class:NewSwitchMatrix	typeref:typename:const InputParameter &
inputParameter	Precharger.h	/^	const InputParameter& inputParameter;$/;"	m	class:Precharger	typeref:typename:const InputParameter &
inputParameter	ReadCircuit.h	/^	const InputParameter& inputParameter;$/;"	m	class:ReadCircuit	typeref:typename:const InputParameter &
inputParameter	RippleCounter.h	/^	const InputParameter& inputParameter;$/;"	m	class:RippleCounter	typeref:typename:const InputParameter &
inputParameter	RowDecoder.h	/^	const InputParameter& inputParameter;$/;"	m	class:RowDecoder	typeref:typename:const InputParameter &
inputParameter	SRAMWriteDriver.h	/^	const InputParameter& inputParameter;$/;"	m	class:SRAMWriteDriver	typeref:typename:const InputParameter &
inputParameter	SenseAmp.h	/^	const InputParameter& inputParameter;$/;"	m	class:SenseAmp	typeref:typename:const InputParameter &
inputParameter	ShiftAdd.h	/^	const InputParameter& inputParameter;$/;"	m	class:ShiftAdd	typeref:typename:const InputParameter &
inputParameter	SubArray.h	/^	InputParameter& inputParameter;$/;"	m	class:SubArray	typeref:typename:InputParameter &
inputParameter	Sum.h	/^	const InputParameter& inputParameter;$/;"	m	class:Sum	typeref:typename:const InputParameter &
inputParameter	SwitchMatrix.h	/^	const InputParameter& inputParameter;$/;"	m	class:SwitchMatrix	typeref:typename:const InputParameter &
inputParameter	VoltageSenseAmp.h	/^	const InputParameter& inputParameter;$/;"	m	class:VoltageSenseAmp	typeref:typename:const InputParameter &
inputParameter	WLDecoderOutput.h	/^	const InputParameter& inputParameter;$/;"	m	class:WLDecoderOutput	typeref:typename:const InputParameter &
inputParameter	WLNewDecoderDriver.h	/^	const InputParameter& inputParameter;$/;"	m	class:WLNewDecoderDriver	typeref:typename:const InputParameter &
interdff	SubArray.h	/^	DFF  interdff;$/;"	m	class:SubArray	typeref:typename:DFF
intermux	SubArray.h	/^	Mux  intermux;$/;"	m	class:SubArray	typeref:typename:Mux
intermuxDecoder	SubArray.h	/^	RowDecoder  intermuxDecoder;$/;"	m	class:SubArray	typeref:typename:RowDecoder
invalid	CurrentSenseAmp.h	/^	bool invalid;		\/* Indicate that the current configuration is not valid *\/$/;"	m	class:CurrentSenseAmp	typeref:typename:bool
invalid	WLNewDecoderDriver.h	/^	bool invalid;      \/*Invalidatio flag *\/$/;"	m	class:WLNewDecoderDriver	typeref:typename:bool
klass	HWsim_wrap.cxx	/^  PyObject *klass;$/;"	m	struct:__anon571c7d070208	typeref:typename:PyObject *	file:
layoutWidth	ShiftAdd.h	/^	double layoutWidth;$/;"	m	class:ShiftAdd	typeref:typename:double
leakage	FunctionUnit.h	/^	double leakage;		\/* Unit: W *\/$/;"	m	class:FunctionUnit	typeref:typename:double
leakage	HWsim.py	/^        leakage = _swig_property(_HWsim.FunctionUnit_leakage_get, _HWsim.FunctionUnit_leakage_se/;"	v	class:FunctionUnit
lenfunc	HWsim_wrap.cxx	/^typedef inquiry lenfunc;$/;"	t	typeref:typename:inquiry	file:
lengthCol	SubArray.h	/^	double lengthCol;	\/\/ Length of columns, Unit: m$/;"	m	class:SubArray	typeref:typename:double
lengthRow	SubArray.h	/^	double lengthRow;	\/\/ Length of rows, Unit: m$/;"	m	class:SubArray	typeref:typename:double
levelOutput	MultilevelSenseAmp.h	/^    int levelOutput;$/;"	m	class:MultilevelSenseAmp	typeref:typename:int
levelOutput	SubArray.h	/^	int levelOutput;$/;"	m	class:SubArray	typeref:typename:int
lvalue	HWsim_wrap.cxx	/^  long lvalue;$/;"	m	struct:swig_const_info	typeref:typename:long	file:
main	HWsimMain.cpp	/^int main()$/;"	f	typeref:typename:int
main	HWsim_test.cpp	/^int main()$/;"	f	typeref:typename:int
make_output_iterator_builtin	HWsim_wrap.cxx	/^  inline PyObject* make_output_iterator_builtin (PyObject *pyself)$/;"	f	namespace:swig	typeref:typename:PyObject *
maxNumIntBit	ReadCircuit.h	/^	int maxNumIntBit;$/;"	m	class:ReadCircuit	typeref:typename:int
maxNumIntBit	SubArray.h	/^	int maxNumIntBit;		\/\/ Max # bits for the integrate-and-fire neuron$/;"	m	class:SubArray	typeref:typename:int
maxNumIntPerCycle	ReadCircuit.h	/^	double maxNumIntPerCycle;$/;"	m	class:ReadCircuit	typeref:typename:double
maxNumWritePulse	SubArray.h	/^	int maxNumWritePulse;	\/\/ Max # of write pulses for the device$/;"	m	class:SubArray	typeref:typename:int
memCellType	MemCell.h	/^	Type::MemCellType memCellType;	\/* Memory cell type (like MRAM, PCRAM, etc.) *\/$/;"	m	class:MemCell	typeref:typename:Type::MemCellType
minDriverCurrent	Mux.h	/^	double minDriverCurrent;$/;"	m	class:Mux	typeref:typename:double
minSenseVoltage	MemCell.h	/^	double minSenseVoltage; \/* Minimum sense voltage *\/$/;"	m	class:MemCell	typeref:typename:double
mode	DecoderDriver.h	/^	int mode;$/;"	m	class:DecoderDriver	typeref:typename:int
mode	NewSwitchMatrix.h	/^	int mode;$/;"	m	class:NewSwitchMatrix	typeref:typename:int
mode	ReadCircuit.h	/^	ReadCircuitMode mode;$/;"	m	class:ReadCircuit	typeref:typename:ReadCircuitMode
mode	RowDecoder.h	/^	DecoderMode mode;	\/\/ ROW or COLUMN mode$/;"	m	class:RowDecoder	typeref:typename:DecoderMode
mode	SwitchMatrix.h	/^	int mode;$/;"	m	class:SwitchMatrix	typeref:typename:int
multifunctional	SubArray.h	/^	bool multifunctional;	\/\/ Multifunctional memory$/;"	m	class:SubArray	typeref:typename:bool
multifunctional	WLDecoderOutput.h	/^	bool multifunctional;$/;"	m	class:WLDecoderOutput	typeref:typename:bool
multifunctional	WLNewDecoderDriver.h	/^	bool multifunctional;$/;"	m	class:WLNewDecoderDriver	typeref:typename:bool
multilevelSAEncoder	SubArray.h	/^	MultilevelSAEncoder multilevelSAEncoder;$/;"	m	class:SubArray	typeref:typename:MultilevelSAEncoder
multilevelSenseAmp	SubArray.h	/^	MultilevelSenseAmp multilevelSenseAmp;$/;"	m	class:SubArray	typeref:typename:MultilevelSenseAmp
multipleCells	MemCell.h	/^	int multipleCells;	\/* Use multiple cells as one weight element to reduce the variation (only l/;"	m	class:MemCell	typeref:typename:int
multipleCells	ReadParam.h	/^	int multipleCells;				\/* Using multiple cells as 1 cell *\/$/;"	m	class:ReadParam	typeref:typename:int
mux	LUT.h	/^	Mux mux;$/;"	m	class:LUT	typeref:typename:Mux
mux	SubArray.h	/^	Mux     mux;$/;"	m	class:SubArray	typeref:typename:Mux
muxDecoder	LUT.h	/^	RowDecoder muxDecoder;$/;"	m	class:LUT	typeref:typename:RowDecoder
muxDecoder	SubArray.h	/^	RowDecoder  muxDecoder;$/;"	m	class:SubArray	typeref:typename:RowDecoder
name	HWsim_wrap.cxx	/^    char       *name;                  \/* Name of global variable *\/$/;"	m	struct:swig_globalvar	typeref:typename:char *	file:
name	HWsim_wrap.cxx	/^  PyObject *name, *slots;$/;"	m	struct:__anon571c7d070108	typeref:typename:PyObject *	file:
name	HWsim_wrap.cxx	/^  char *name;$/;"	m	struct:swig_const_info	typeref:typename:char *	file:
name	HWsim_wrap.cxx	/^  const char             *name;			\/* mangled name of this type *\/$/;"	m	struct:swig_type_info	typeref:typename:const char *	file:
neuro	MultilevelSenseAmp.h	/^	bool neuro;$/;"	m	class:MultilevelSenseAmp	typeref:typename:bool
neuro	NewSwitchMatrix.h	/^	bool neuro;$/;"	m	class:NewSwitchMatrix	typeref:typename:bool
neuro	Precharger.h	/^	bool neuro;$/;"	m	class:Precharger	typeref:typename:bool
neuro	SRAMWriteDriver.h	/^	bool neuro;$/;"	m	class:SRAMWriteDriver	typeref:typename:bool
neuro	SenseAmp.h	/^	bool neuro;$/;"	m	class:SenseAmp	typeref:typename:bool
neuro	SubArray.h	/^	bool neuro;				\/\/ Neuro mode$/;"	m	class:SubArray	typeref:typename:bool
neuro	SwitchMatrix.h	/^	bool neuro;$/;"	m	class:SwitchMatrix	typeref:typename:bool
neuro	WLDecoderOutput.h	/^	bool neuro;$/;"	m	class:WLDecoderOutput	typeref:typename:bool
neuro	WLNewDecoderDriver.h	/^	bool neuro;$/;"	m	class:WLNewDecoderDriver	typeref:typename:bool
newBNNparallelMode	SubArray.h	/^	bool newBNNparallelMode;      \/\/ new pseudo-1T1R BNN parallel mode$/;"	m	class:SubArray	typeref:typename:bool
newBNNrowbyrowMode	SubArray.h	/^	bool newBNNrowbyrowMode;      \/\/ new pseudo-1T1R BNN row-by-row mode$/;"	m	class:SubArray	typeref:typename:bool
newHeight	FunctionUnit.h	/^	double newWidth, newHeight;$/;"	m	class:FunctionUnit	typeref:typename:double
newHeight	HWsim.py	/^        newHeight = _swig_property(_HWsim.FunctionUnit_newHeight_get, _HWsim.FunctionUnit_newHei/;"	v	class:FunctionUnit
newWidth	FunctionUnit.h	/^	double newWidth, newHeight;$/;"	m	class:FunctionUnit	typeref:typename:double
newWidth	HWsim.py	/^        newWidth = _swig_property(_HWsim.FunctionUnit_newWidth_get, _HWsim.FunctionUnit_newWidth/;"	v	class:FunctionUnit
newargs	HWsim_wrap.cxx	/^  PyObject *newargs;$/;"	m	struct:__anon571c7d070208	typeref:typename:PyObject *	file:
newraw	HWsim_wrap.cxx	/^  PyObject *newraw;$/;"	m	struct:__anon571c7d070208	typeref:typename:PyObject *	file:
next	HWsim.py	/^    def next(self):$/;"	m	class:SwigPyIterator
next	HWsim_wrap.cxx	/^    PyObject *next()     $/;"	f	struct:swig::SwigPyIterator	typeref:typename:PyObject *	file:
next	HWsim_wrap.cxx	/^    struct swig_globalvar *next;$/;"	m	struct:swig_globalvar	typeref:struct:swig_globalvar *	file:
next	HWsim_wrap.cxx	/^  PyObject *next;$/;"	m	struct:__anon571c7d070308	typeref:typename:PyObject *	file:
next	HWsim_wrap.cxx	/^  struct swig_cast_info  *next;			\/* pointer to next cast in linked list *\/$/;"	m	struct:swig_cast_info	typeref:struct:swig_cast_info *	file:
next	HWsim_wrap.cxx	/^  struct swig_module_info *next;		\/* Pointer to next element in circularly linked list *\/$/;"	m	struct:swig_module_info	typeref:struct:swig_module_info *	file:
none_access	typedef.h	/^	none_access$/;"	e	enum:CellAccessType
nonlinearIV	MemCell.h	/^	bool nonlinearIV;	\/* Consider I-V nonlinearity or not (Currently this option is for cross-poin/;"	m	class:MemCell	typeref:typename:bool
nonlinearity	MemCell.h	/^	double nonlinearity;	\/* Current at write voltage \/ current at 1\/2 write voltage *\/$/;"	m	class:MemCell	typeref:typename:double
numAdder	Adder.h	/^	int numAdder;$/;"	m	class:Adder	typeref:typename:int
numAdder	ShiftAdd.h	/^	int numInv, numNand, numAdder, numDff;$/;"	m	class:ShiftAdd	typeref:typename:int
numAdder	Sum.h	/^	int numAdder;		\/* Number of Adders in sum circuit *\/$/;"	m	class:Sum	typeref:typename:int
numAdderBit	ShiftAdd.h	/^	int numAdderBit, numBitPerDff;$/;"	m	class:ShiftAdd	typeref:typename:int
numAdderDepth	Sum.h	/^	int numAdderDepth;$/;"	m	class:Sum	typeref:typename:int
numAddrRow	RowDecoder.h	/^	int numAddrRow;		\/* Number of rows *\/$/;"	m	class:RowDecoder	typeref:typename:int
numArrayCol	Core.h	/^	int numArrayCol;			\/* Number of Array columns *\/$/;"	m	class:Core	typeref:typename:int
numArrayCol	HWsim.h	/^	int numArrayCol;			\/* Number of Array columns *\/$/;"	m	class:HWsim	typeref:typename:int
numArrayCol	HWsim.py	/^        numArrayCol = _swig_property(_HWsim.HWsim_numArrayCol_get, _HWsim.HWsim_numArrayCol_set)$/;"	v	class:HWsim
numArrayCol	ReadParam.h	/^	int numArrayCol;				\/* The Number of array columns *\/$/;"	m	class:ReadParam	typeref:typename:int
numArrayRow	Core.h	/^	int numArrayRow;$/;"	m	class:Core	typeref:typename:int
numArrayRow	HWsim.h	/^	int numArrayRow;$/;"	m	class:HWsim	typeref:typename:int
numArrayRow	HWsim.py	/^        numArrayRow = _swig_property(_HWsim.HWsim_numArrayRow_get, _HWsim.HWsim_numArrayRow_set)$/;"	v	class:HWsim
numArrayRow	ReadParam.h	/^	int numArrayRow;				\/* The Number of array rows *\/$/;"	m	class:ReadParam	typeref:typename:int
numBit	Adder.h	/^	int numBit;$/;"	m	class:Adder	typeref:typename:int
numBit	Comparator.h	/^	int numBit;$/;"	m	class:Comparator	typeref:typename:int
numBit	RippleCounter.h	/^	int numBit;$/;"	m	class:RippleCounter	typeref:typename:int
numBitInput	Core.h	/^	int numBitInput;$/;"	m	class:Core	typeref:typename:int
numBitInput	HWsim.h	/^	int numBitInput;$/;"	m	class:HWsim	typeref:typename:int
numBitInput	HWsim.py	/^        numBitInput = _swig_property(_HWsim.HWsim_numBitInput_get, _HWsim.HWsim_numBitInput_set)$/;"	v	class:HWsim
numBitPartialSum	Core.h	/^	int numBitPartialSum;		\/* The output bits of SA *\/$/;"	m	class:Core	typeref:typename:int
numBitPartialSum	HWsim.h	/^	int numBitPartialSum;		\/* The output bits of SA *\/$/;"	m	class:HWsim	typeref:typename:int
numBitPartialSum	HWsim.py	/^        numBitPartialSum = _swig_property(_HWsim.HWsim_numBitPartialSum_get, _HWsim.HWsim_numBit/;"	v	class:HWsim
numBitPerDff	ShiftAdd.h	/^	int numAdderBit, numBitPerDff;$/;"	m	class:ShiftAdd	typeref:typename:int
numCMOS	MultilevelSenseAmp.h	/^	int numCMOS;$/;"	m	class:MultilevelSenseAmp	typeref:typename:int
numCell	LUT.h	/^	int numCell;$/;"	m	class:LUT	typeref:typename:int
numCellBit	Core.h	/^	int numCellBit;$/;"	m	class:Core	typeref:typename:int
numCellBit	HWsim.h	/^	int numCellBit;$/;"	m	class:HWsim	typeref:typename:int
numCellBit	HWsim.py	/^        numCellBit = _swig_property(_HWsim.HWsim_numCellBit_get, _HWsim.HWsim_numCellBit_set)$/;"	v	class:HWsim
numCellPerSynapse	Core.h	/^	int numCellPerSynapse;\/* Number of cells per synapse *\/ $/;"	m	class:Core	typeref:typename:int
numCellPerSynapse	HWsim.h	/^	int numCellPerSynapse;\/* Number of cells per synapse *\/ $/;"	m	class:HWsim	typeref:typename:int
numCellPerSynapse	HWsim.py	/^        numCellPerSynapse = _swig_property(_HWsim.HWsim_numCellPerSynapse_get, _HWsim.HWsim_numC/;"	v	class:HWsim
numCellPerSynapse	SubArray.h	/^	int numCellPerSynapse;  \/\/ Number of cells per synapse$/;"	m	class:SubArray	typeref:typename:int
numCol	ActivationFunc.h	/^	int numCol;$/;"	m	class:ActivationFunc	typeref:typename:int
numCol	CurrentSenseAmp.h	/^	int numCol;		\/* Number of columns *\/$/;"	m	class:CurrentSenseAmp	typeref:typename:int
numCol	MultilevelSenseAmp.h	/^	int numCol;				\/* Number of columns *\/$/;"	m	class:MultilevelSenseAmp	typeref:typename:int
numCol	Precharger.h	/^	int numCol;			\/* Number of columns *\/$/;"	m	class:Precharger	typeref:typename:int
numCol	SRAMWriteDriver.h	/^	int numCol;			\/* Number of columns *\/$/;"	m	class:SRAMWriteDriver	typeref:typename:int
numCol	SenseAmp.h	/^	int numCol;				\/* Number of columns *\/$/;"	m	class:SenseAmp	typeref:typename:int
numCol	SubArray.h	/^	int numCol;			\/\/ Number of columns$/;"	m	class:SubArray	typeref:typename:int
numCol	Sum.h	/^	int numCol;			\/* Number of Array columns *\/$/;"	m	class:Sum	typeref:typename:int
numColInv	RowDecoder.h	/^	int numColNor, numNorPerCol, numColNand, numNandPerCol, numColInv, numInvPerCol;$/;"	m	class:RowDecoder	typeref:typename:int
numColMuxed	SubArray.h	/^	int numColMuxed;	\/\/ How many columns share 1 read circuit (for neuro mode with analog RRAM) o/;"	m	class:SubArray	typeref:typename:int
numColNand	RowDecoder.h	/^	int numColNor, numNorPerCol, numColNand, numNandPerCol, numColInv, numInvPerCol;$/;"	m	class:RowDecoder	typeref:typename:int
numColNor	RowDecoder.h	/^	int numColNor, numNorPerCol, numColNand, numNandPerCol, numColInv, numInvPerCol;$/;"	m	class:RowDecoder	typeref:typename:int
numColTg	DecoderDriver.h	/^	int numRowTg, numColTg;$/;"	m	class:DecoderDriver	typeref:typename:int
numColTg	NewSwitchMatrix.h	/^	int numRowTg, numColTg;$/;"	m	class:NewSwitchMatrix	typeref:typename:int
numColTgPair	SwitchMatrix.h	/^	int numRowTgPair, numColTgPair;$/;"	m	class:SwitchMatrix	typeref:typename:int
numComparator	Comparator.h	/^	int numComparator;$/;"	m	class:Comparator	typeref:typename:int
numDff	DFF.h	/^	int numDff;			\/* Number of columns *\/$/;"	m	class:DFF	typeref:typename:int
numDff	ReadCircuit.h	/^	int numDff;$/;"	m	class:ReadCircuit	typeref:typename:int
numDff	ShiftAdd.h	/^	int numInv, numNand, numAdder, numDff;$/;"	m	class:ShiftAdd	typeref:typename:int
numEncoder	MultilevelSAEncoder.h	/^	int numEncoder;     \/\/ number of encoder needed$/;"	m	class:MultilevelSAEncoder	typeref:typename:int
numEntry	LUT.h	/^	int numYbit, numEntry;$/;"	m	class:LUT	typeref:typename:int
numGate	MultilevelSAEncoder.h	/^	int numGate;        \/\/ number of NAND gate in encoder $/;"	m	class:MultilevelSAEncoder	typeref:typename:int
numIOBit	ActivationFunc.h	/^	int numIOBit;$/;"	m	class:ActivationFunc	typeref:typename:int
numInput	DeMux.h	/^	int numInput;$/;"	m	class:DeMux	typeref:typename:int
numInput	MultilevelSAEncoder.h	/^	int numInput;       \/\/ number of NAND gate in encoder$/;"	m	class:MultilevelSAEncoder	typeref:typename:int
numInput	Mux.h	/^	int numInput;$/;"	m	class:Mux	typeref:typename:int
numInv	RowDecoder.h	/^	int numInv, numNand, numNor, numMetalConnection;$/;"	m	class:RowDecoder	typeref:typename:int
numInv	ShiftAdd.h	/^	int numInv, numNand, numAdder, numDff;$/;"	m	class:ShiftAdd	typeref:typename:int
numInvPerCol	RowDecoder.h	/^	int numColNor, numNorPerCol, numColNand, numNandPerCol, numColInv, numInvPerCol;$/;"	m	class:RowDecoder	typeref:typename:int
numInvPerRow	RowDecoder.h	/^	int numRowNor, numNorPerRow, numRowNand, numNandPerRow, numRowInv, numInvPerRow;$/;"	m	class:RowDecoder	typeref:typename:int
numLevel	MultilevelSAEncoder.h	/^	int numLevel;       \/\/ number of levels from MultilevelSA$/;"	m	class:MultilevelSAEncoder	typeref:typename:int
numLut	SubArray.h	/^	int numLut; \/\/ Parameter for FPGA$/;"	m	class:SubArray	typeref:typename:int
numMetalConnection	RowDecoder.h	/^	int numInv, numNand, numNor, numMetalConnection;$/;"	m	class:RowDecoder	typeref:typename:int
numNand	RowDecoder.h	/^	int numInv, numNand, numNor, numMetalConnection;$/;"	m	class:RowDecoder	typeref:typename:int
numNand	ShiftAdd.h	/^	int numInv, numNand, numAdder, numDff;$/;"	m	class:ShiftAdd	typeref:typename:int
numNandPerCol	RowDecoder.h	/^	int numColNor, numNorPerCol, numColNand, numNandPerCol, numColInv, numInvPerCol;$/;"	m	class:RowDecoder	typeref:typename:int
numNandPerRow	RowDecoder.h	/^	int numRowNor, numNorPerRow, numRowNand, numNandPerRow, numRowInv, numInvPerRow;$/;"	m	class:RowDecoder	typeref:typename:int
numNor	RowDecoder.h	/^	int numInv, numNand, numNor, numMetalConnection;$/;"	m	class:RowDecoder	typeref:typename:int
numNorPerCol	RowDecoder.h	/^	int numColNor, numNorPerCol, numColNand, numNandPerCol, numColInv, numInvPerCol;$/;"	m	class:RowDecoder	typeref:typename:int
numNorPerRow	RowDecoder.h	/^	int numRowNor, numNorPerRow, numRowNand, numNandPerRow, numRowInv, numInvPerRow;$/;"	m	class:RowDecoder	typeref:typename:int
numOutput	Core.h	/^	int numOutput;		\/* Number of outputs *\/$/;"	m	class:Core	typeref:typename:int
numOutput	DecoderDriver.h	/^	int numOutput;$/;"	m	class:DecoderDriver	typeref:typename:int
numOutput	HWsim.h	/^	int numOutput;		\/* Number of outputs *\/$/;"	m	class:HWsim	typeref:typename:int
numOutput	HWsim.py	/^        numOutput = _swig_property(_HWsim.HWsim_numOutput_get, _HWsim.HWsim_numOutput_set)$/;"	v	class:HWsim
numOutput	NewSwitchMatrix.h	/^	int numOutput;$/;"	m	class:NewSwitchMatrix	typeref:typename:int
numOutput	Sum.h	/^	int numOutput;		\/* Number of outputs *\/$/;"	m	class:Sum	typeref:typename:int
numOutput	SwitchMatrix.h	/^	int numOutput;$/;"	m	class:SwitchMatrix	typeref:typename:int
numReadCellPerOperationFPGA	Precharger.h	/^	int numReadCellPerOperationFPGA;$/;"	m	class:Precharger	typeref:typename:int
numReadCellPerOperationFPGA	SenseAmp.h	/^	int numReadCellPerOperationFPGA;$/;"	m	class:SenseAmp	typeref:typename:int
numReadCellPerOperationFPGA	SubArray.h	/^	int numReadCellPerOperationFPGA;    \/\/ Parameter for SRAM$/;"	m	class:SubArray	typeref:typename:int
numReadCellPerOperationMemory	Precharger.h	/^	int numReadCellPerOperationMemory;$/;"	m	class:Precharger	typeref:typename:int
numReadCellPerOperationMemory	SenseAmp.h	/^	int numReadCellPerOperationMemory;$/;"	m	class:SenseAmp	typeref:typename:int
numReadCellPerOperationMemory	SubArray.h	/^	int numReadCellPerOperationMemory;  \/\/ Parameter for SRAM$/;"	m	class:SubArray	typeref:typename:int
numReadCellPerOperationNeuro	CurrentSenseAmp.h	/^	int numReadCellPerOperationNeuro;$/;"	m	class:CurrentSenseAmp	typeref:typename:int
numReadCellPerOperationNeuro	MultilevelSenseAmp.h	/^	int numReadCellPerOperationNeuro;$/;"	m	class:MultilevelSenseAmp	typeref:typename:int
numReadCellPerOperationNeuro	Precharger.h	/^	int numReadCellPerOperationNeuro;$/;"	m	class:Precharger	typeref:typename:int
numReadCellPerOperationNeuro	SenseAmp.h	/^	int numReadCellPerOperationNeuro;$/;"	m	class:SenseAmp	typeref:typename:int
numReadCellPerOperationNeuro	SubArray.h	/^	int numReadCellPerOperationNeuro;   \/\/ Parameter for SRAM (use numBitPerCell cells to represe/;"	m	class:SubArray	typeref:typename:int
numReadCol	ReadCircuit.h	/^	int numReadCol;$/;"	m	class:ReadCircuit	typeref:typename:int
numReadCol	VoltageSenseAmp.h	/^	int numReadCol;$/;"	m	class:VoltageSenseAmp	typeref:typename:int
numReadLutPerOperationFPGA	SubArray.h	/^	int numReadLutPerOperationFPGA; \/\/ parameter for FPGA$/;"	m	class:SubArray	typeref:typename:int
numReadPulse	ShiftAdd.h	/^	int numReadPulse;$/;"	m	class:ShiftAdd	typeref:typename:int
numReadPulse	SubArray.h	/^	int numReadPulse;		\/\/ # of read pulses for the input vector$/;"	m	class:SubArray	typeref:typename:int
numRow	SubArray.h	/^	int numRow;			\/\/ Number of rows$/;"	m	class:SubArray	typeref:typename:int
numRowInv	RowDecoder.h	/^	int numRowNor, numNorPerRow, numRowNand, numNandPerRow, numRowInv, numInvPerRow;$/;"	m	class:RowDecoder	typeref:typename:int
numRowNand	RowDecoder.h	/^	int numRowNor, numNorPerRow, numRowNand, numNandPerRow, numRowInv, numInvPerRow;$/;"	m	class:RowDecoder	typeref:typename:int
numRowNor	RowDecoder.h	/^	int numRowNor, numNorPerRow, numRowNand, numNandPerRow, numRowInv, numInvPerRow;$/;"	m	class:RowDecoder	typeref:typename:int
numRowTg	DecoderDriver.h	/^	int numRowTg, numColTg;$/;"	m	class:DecoderDriver	typeref:typename:int
numRowTg	Mux.h	/^	int numRowTg;$/;"	m	class:Mux	typeref:typename:int
numRowTg	NewSwitchMatrix.h	/^	int numRowTg, numColTg;$/;"	m	class:NewSwitchMatrix	typeref:typename:int
numRowTgPair	SwitchMatrix.h	/^	int numRowTgPair, numColTgPair;$/;"	m	class:SwitchMatrix	typeref:typename:int
numRowUnit	ReadCircuit.h	/^	int numUnitPerRow, numRowUnit;$/;"	m	class:ReadCircuit	typeref:typename:int
numSABit	Core.h	/^	int numSABit;$/;"	m	class:Core	typeref:typename:int
numSABit	HWsim.h	/^	int numSABit;$/;"	m	class:HWsim	typeref:typename:int
numSABit	HWsim.py	/^        numSABit = _swig_property(_HWsim.HWsim_numSABit_get, _HWsim.HWsim_numSABit_set)$/;"	v	class:HWsim
numSelection	Mux.h	/^	int numSelection;		\/* Number of Selections *\/$/;"	m	class:Mux	typeref:typename:int
numSumBit	Sum.h	/^	int numSumBit;		\/* Number of bits of S\/A output *\/$/;"	m	class:Sum	typeref:typename:int
numSumPerCol	Sum.h	/^	int numSumPerCol;	$/;"	m	class:Sum	typeref:typename:int
numUnit	ShiftAdd.h	/^	int numUnit;$/;"	m	class:ShiftAdd	typeref:typename:int
numUnitPerRow	ReadCircuit.h	/^	int numUnitPerRow, numRowUnit;$/;"	m	class:ReadCircuit	typeref:typename:int
numWLRow	WLDecoderOutput.h	/^	int numWLRow;$/;"	m	class:WLDecoderOutput	typeref:typename:int
numWLRow	WLNewDecoderDriver.h	/^	int numWLRow;$/;"	m	class:WLNewDecoderDriver	typeref:typename:int
numWeightBit	Core.h	/^	int numWeightBit;$/;"	m	class:Core	typeref:typename:int
numWeightBit	HWsim.h	/^	int numWeightBit;$/;"	m	class:HWsim	typeref:typename:int
numWeightBit	HWsim.py	/^        numWeightBit = _swig_property(_HWsim.HWsim_numWeightBit_get, _HWsim.HWsim_numWeightBit_s/;"	v	class:HWsim
numWriteCellPerOperationFPGA	Precharger.h	/^	int numWriteCellPerOperationFPGA;$/;"	m	class:Precharger	typeref:typename:int
numWriteCellPerOperationFPGA	SRAMWriteDriver.h	/^	int numWriteCellPerOperationFPGA;$/;"	m	class:SRAMWriteDriver	typeref:typename:int
numWriteCellPerOperationFPGA	SubArray.h	/^	int numWriteCellPerOperationFPGA;   \/\/ Parameter for SRAM$/;"	m	class:SubArray	typeref:typename:int
numWriteCellPerOperationMemory	Precharger.h	/^	int numWriteCellPerOperationMemory;$/;"	m	class:Precharger	typeref:typename:int
numWriteCellPerOperationMemory	SRAMWriteDriver.h	/^	int numWriteCellPerOperationMemory;$/;"	m	class:SRAMWriteDriver	typeref:typename:int
numWriteCellPerOperationMemory	SubArray.h	/^	int numWriteCellPerOperationMemory;$/;"	m	class:SubArray	typeref:typename:int
numWriteCellPerOperationMemory	SwitchMatrix.h	/^	int numWriteCellPerOperationMemory;$/;"	m	class:SwitchMatrix	typeref:typename:int
numWriteCellPerOperationNeuro	NewSwitchMatrix.h	/^	int numWriteCellPerOperationNeuro;$/;"	m	class:NewSwitchMatrix	typeref:typename:int
numWriteCellPerOperationNeuro	Precharger.h	/^	int numWriteCellPerOperationNeuro;$/;"	m	class:Precharger	typeref:typename:int
numWriteCellPerOperationNeuro	SRAMWriteDriver.h	/^	int numWriteCellPerOperationNeuro;$/;"	m	class:SRAMWriteDriver	typeref:typename:int
numWriteCellPerOperationNeuro	SubArray.h	/^	int numWriteCellPerOperationNeuro;  \/\/ For multifunctional mode or neuro only mode$/;"	m	class:SubArray	typeref:typename:int
numWriteCellPerOperationNeuro	SwitchMatrix.h	/^	int numWriteCellPerOperationNeuro;$/;"	m	class:SwitchMatrix	typeref:typename:int
numWriteColMuxed	SubArray.h	/^	int numWriteColMuxed;	\/\/ \/\/ How many columns share 1 write column decoder driver (for memor/;"	m	class:SubArray	typeref:typename:int
numWritePulse	NewSwitchMatrix.h	/^	double numWritePulse;$/;"	m	class:NewSwitchMatrix	typeref:typename:double
numWritePulse	SubArray.h	/^	double numWritePulse;	\/\/ Average number of write pulse$/;"	m	class:SubArray	typeref:typename:double
numWritePulse	SwitchMatrix.h	/^	double numWritePulse;$/;"	m	class:SwitchMatrix	typeref:typename:double
numYbit	LUT.h	/^	int numYbit, numEntry;$/;"	m	class:LUT	typeref:typename:int
numof1	Core.h	/^	int numof1, numof2, numof3, numof4, numof5, numof6, numof7,$/;"	m	class:Core	typeref:typename:int
numof1	HWsim.h	/^	int numof1, numof2, numof3, numof4, numof5, numof6, numof7,$/;"	m	class:HWsim	typeref:typename:int
numof1	HWsim.py	/^        numof1 = _swig_property(_HWsim.HWsim_numof1_get, _HWsim.HWsim_numof1_set)$/;"	v	class:HWsim
numof1	SubArray.h	/^	double numof1, numof2, numof3, numof4, numof5, numof6, numof7, numof8, numof9, numof10;$/;"	m	class:SubArray	typeref:typename:double
numof10	Core.h	/^		numof8, numof9, numof10;$/;"	m	class:Core	typeref:typename:int
numof10	HWsim.h	/^		numof8, numof9, numof10;$/;"	m	class:HWsim	typeref:typename:int
numof10	HWsim.py	/^        numof10 = _swig_property(_HWsim.HWsim_numof10_get, _HWsim.HWsim_numof10_set)$/;"	v	class:HWsim
numof10	SubArray.h	/^	double numof1, numof2, numof3, numof4, numof5, numof6, numof7, numof8, numof9, numof10;$/;"	m	class:SubArray	typeref:typename:double
numof2	Core.h	/^	int numof1, numof2, numof3, numof4, numof5, numof6, numof7,$/;"	m	class:Core	typeref:typename:int
numof2	HWsim.h	/^	int numof1, numof2, numof3, numof4, numof5, numof6, numof7,$/;"	m	class:HWsim	typeref:typename:int
numof2	HWsim.py	/^        numof2 = _swig_property(_HWsim.HWsim_numof2_get, _HWsim.HWsim_numof2_set)$/;"	v	class:HWsim
numof2	SubArray.h	/^	double numof1, numof2, numof3, numof4, numof5, numof6, numof7, numof8, numof9, numof10;$/;"	m	class:SubArray	typeref:typename:double
numof3	Core.h	/^	int numof1, numof2, numof3, numof4, numof5, numof6, numof7,$/;"	m	class:Core	typeref:typename:int
numof3	HWsim.h	/^	int numof1, numof2, numof3, numof4, numof5, numof6, numof7,$/;"	m	class:HWsim	typeref:typename:int
numof3	HWsim.py	/^        numof3 = _swig_property(_HWsim.HWsim_numof3_get, _HWsim.HWsim_numof3_set)$/;"	v	class:HWsim
numof3	SubArray.h	/^	double numof1, numof2, numof3, numof4, numof5, numof6, numof7, numof8, numof9, numof10;$/;"	m	class:SubArray	typeref:typename:double
numof4	Core.h	/^	int numof1, numof2, numof3, numof4, numof5, numof6, numof7,$/;"	m	class:Core	typeref:typename:int
numof4	HWsim.h	/^	int numof1, numof2, numof3, numof4, numof5, numof6, numof7,$/;"	m	class:HWsim	typeref:typename:int
numof4	HWsim.py	/^        numof4 = _swig_property(_HWsim.HWsim_numof4_get, _HWsim.HWsim_numof4_set)$/;"	v	class:HWsim
numof4	SubArray.h	/^	double numof1, numof2, numof3, numof4, numof5, numof6, numof7, numof8, numof9, numof10;$/;"	m	class:SubArray	typeref:typename:double
numof5	Core.h	/^	int numof1, numof2, numof3, numof4, numof5, numof6, numof7,$/;"	m	class:Core	typeref:typename:int
numof5	HWsim.h	/^	int numof1, numof2, numof3, numof4, numof5, numof6, numof7,$/;"	m	class:HWsim	typeref:typename:int
numof5	HWsim.py	/^        numof5 = _swig_property(_HWsim.HWsim_numof5_get, _HWsim.HWsim_numof5_set)$/;"	v	class:HWsim
numof5	SubArray.h	/^	double numof1, numof2, numof3, numof4, numof5, numof6, numof7, numof8, numof9, numof10;$/;"	m	class:SubArray	typeref:typename:double
numof6	Core.h	/^	int numof1, numof2, numof3, numof4, numof5, numof6, numof7,$/;"	m	class:Core	typeref:typename:int
numof6	HWsim.h	/^	int numof1, numof2, numof3, numof4, numof5, numof6, numof7,$/;"	m	class:HWsim	typeref:typename:int
numof6	HWsim.py	/^        numof6 = _swig_property(_HWsim.HWsim_numof6_get, _HWsim.HWsim_numof6_set)$/;"	v	class:HWsim
numof6	SubArray.h	/^	double numof1, numof2, numof3, numof4, numof5, numof6, numof7, numof8, numof9, numof10;$/;"	m	class:SubArray	typeref:typename:double
numof7	Core.h	/^	int numof1, numof2, numof3, numof4, numof5, numof6, numof7,$/;"	m	class:Core	typeref:typename:int
numof7	HWsim.h	/^	int numof1, numof2, numof3, numof4, numof5, numof6, numof7,$/;"	m	class:HWsim	typeref:typename:int
numof7	HWsim.py	/^        numof7 = _swig_property(_HWsim.HWsim_numof7_get, _HWsim.HWsim_numof7_set)$/;"	v	class:HWsim
numof7	SubArray.h	/^	double numof1, numof2, numof3, numof4, numof5, numof6, numof7, numof8, numof9, numof10;$/;"	m	class:SubArray	typeref:typename:double
numof8	Core.h	/^		numof8, numof9, numof10;$/;"	m	class:Core	typeref:typename:int
numof8	HWsim.h	/^		numof8, numof9, numof10;$/;"	m	class:HWsim	typeref:typename:int
numof8	HWsim.py	/^        numof8 = _swig_property(_HWsim.HWsim_numof8_get, _HWsim.HWsim_numof8_set)$/;"	v	class:HWsim
numof8	SubArray.h	/^	double numof1, numof2, numof3, numof4, numof5, numof6, numof7, numof8, numof9, numof10;$/;"	m	class:SubArray	typeref:typename:double
numof9	Core.h	/^		numof8, numof9, numof10;$/;"	m	class:Core	typeref:typename:int
numof9	HWsim.h	/^		numof8, numof9, numof10;$/;"	m	class:HWsim	typeref:typename:int
numof9	HWsim.py	/^        numof9 = _swig_property(_HWsim.HWsim_numof9_get, _HWsim.HWsim_numof9_set)$/;"	v	class:HWsim
numof9	SubArray.h	/^	double numof1, numof2, numof3, numof4, numof5, numof6, numof7, numof8, numof9, numof10;$/;"	m	class:SubArray	typeref:typename:double
operator !=	HWsim_wrap.cxx	/^    bool operator != (const SwigPyIterator& x) const$/;"	f	struct:swig::SwigPyIterator	typeref:typename:bool	file:
operator &	HWsim_wrap.cxx	/^  T *operator&() { return pointer.ptr; }$/;"	f	class:SwigValueWrapper	typeref:typename:T *	file:
operator +	HWsim_wrap.cxx	/^    SwigPyIterator* operator + (ptrdiff_t n) const$/;"	f	struct:swig::SwigPyIterator	typeref:typename:SwigPyIterator *	file:
operator +=	HWsim_wrap.cxx	/^    SwigPyIterator& operator += (ptrdiff_t n)$/;"	f	struct:swig::SwigPyIterator	typeref:typename:SwigPyIterator &	file:
operator -	HWsim_wrap.cxx	/^    SwigPyIterator* operator - (ptrdiff_t n) const$/;"	f	struct:swig::SwigPyIterator	typeref:typename:SwigPyIterator *	file:
operator -	HWsim_wrap.cxx	/^    ptrdiff_t operator - (const SwigPyIterator& x) const$/;"	f	struct:swig::SwigPyIterator	typeref:typename:ptrdiff_t	file:
operator -=	HWsim_wrap.cxx	/^    SwigPyIterator& operator -= (ptrdiff_t n)$/;"	f	struct:swig::SwigPyIterator	typeref:typename:SwigPyIterator &	file:
operator ->	HWsim_wrap.cxx	/^    PyObject *operator->() const$/;"	f	class:swig::SwigPtr_PyObject	typeref:typename:PyObject *	file:
operator =	HWsim_wrap.cxx	/^    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; /;"	f	struct:SwigValueWrapper::SwigMovePointer	typeref:typename:SwigMovePointer &	file:
operator =	HWsim_wrap.cxx	/^    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) $/;"	f	class:swig::SwigPtr_PyObject	typeref:typename:SwigPtr_PyObject &	file:
operator =	HWsim_wrap.cxx	/^    SwigVar_PyObject & operator = (PyObject* obj)$/;"	f	struct:swig::SwigVar_PyObject	typeref:typename:SwigVar_PyObject &	file:
operator =	HWsim_wrap.cxx	/^  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return/;"	f	class:SwigValueWrapper	typeref:typename:SwigValueWrapper &	file:
operator ==	HWsim_wrap.cxx	/^    bool operator == (const SwigPyIterator& x)  const$/;"	f	struct:swig::SwigPyIterator	typeref:typename:bool	file:
operator PyObject*	HWsim_wrap.cxx	/^    operator PyObject *() const$/;"	f	class:swig::SwigPtr_PyObject	file:
operator T&	HWsim_wrap.cxx	/^  operator T&() const { return *pointer.ptr; }$/;"	f	class:SwigValueWrapper	file:
outputFilePrefix	ReadParam.h	/^	std::string outputFilePrefix;	\/* Output file name *\/$/;"	m	class:ReadParam	typeref:typename:std::string
own	HWsim_wrap.cxx	/^  int own;$/;"	m	struct:__anon571c7d070308	typeref:typename:int	file:
owndata	HWsim_wrap.cxx	/^  int                    owndata;		\/* flag if the structure owns the clientdata *\/$/;"	m	struct:swig_type_info	typeref:typename:int	file:
pack	HWsim_wrap.cxx	/^  void *pack;$/;"	m	struct:__anon571c7d070408	typeref:typename:PyObject_HEAD void *	file:
parallel	CurrentSenseAmp.h	/^	bool parallel;$/;"	m	class:CurrentSenseAmp	typeref:typename:bool
parallel	RowDecoder.h	/^	bool parallel;    \/\/ for mux decoder of parallel reading mode$/;"	m	class:RowDecoder	typeref:typename:bool
parallelCurrentSenseAmp	SubArray.h	/^	CurrentSenseAmp parallelCurrentSenseAmp;$/;"	m	class:SubArray	typeref:typename:CurrentSenseAmp
parallelWrite	NewSwitchMatrix.h	/^	bool parallelWrite;$/;"	m	class:NewSwitchMatrix	typeref:typename:bool
parallelWrite	SubArray.h	/^	bool parallelWrite; \/\/ Parameter for crossbar RRAM in neuro mode$/;"	m	class:SubArray	typeref:typename:bool
parallelWrite	SwitchMatrix.h	/^	bool parallelWrite;$/;"	m	class:SwitchMatrix	typeref:typename:bool
params	HWsim.h	/^	ReadParam params;$/;"	m	class:HWsim	typeref:typename:ReadParam
params	HWsim.py	/^        params = _swig_property(_HWsim.HWsim_params_get, _HWsim.HWsim_params_set)$/;"	v	class:HWsim
pht_module	setup.py	/^pht_module = Extension("_HWsim",$/;"	v
phyGateLength	Technology.h	/^	double phyGateLength;	\/* Physical gate length, Unit: m *\/$/;"	m	class:Technology	typeref:typename:double
pitchSenseAmp	SenseAmp.h	/^	double pitchSenseAmp;	\/* The maximum width allowed for one sense amplifier layout *\/$/;"	m	class:SenseAmp	typeref:typename:double
pnSizeRatio	Technology.h	/^	double pnSizeRatio;		\/* PMOS to NMOS size ratio *\/$/;"	m	class:Technology	typeref:typename:double
pointer	HWsim_wrap.cxx	/^  } pointer;$/;"	m	class:SwigValueWrapper	typeref:struct:SwigValueWrapper::SwigMovePointer	file:
precharger	SubArray.h	/^	Precharger precharger;$/;"	m	class:SubArray	typeref:typename:Precharger
prev	HWsim_wrap.cxx	/^  struct swig_cast_info  *prev;			\/* pointer to the previous cast *\/$/;"	m	struct:swig_cast_info	typeref:struct:swig_cast_info *	file:
previous	HWsim.py	/^    def previous(self):$/;"	m	class:SwigPyIterator
previous	HWsim_wrap.cxx	/^    PyObject *previous()$/;"	f	struct:swig::SwigPyIterator	typeref:typename:PyObject *	file:
processNode	InputParameter.h	/^	int processNode;				\/* Process node (nm) *\/$/;"	m	class:InputParameter	typeref:typename:int
processNode	MemCell.h	/^	int processNode;        \/* Cell original process technology node, Unit: nm*\/$/;"	m	class:MemCell	typeref:typename:int
processNode	ReadParam.h	/^	int processNode;				\/* Process node (nm) *\/$/;"	m	class:ReadParam	typeref:typename:int
ptr	HWsim_wrap.cxx	/^    T *ptr;$/;"	m	struct:SwigValueWrapper::SwigMovePointer	typeref:typename:T *	file:
ptr	HWsim_wrap.cxx	/^  void *ptr;$/;"	m	struct:__anon571c7d070308	typeref:typename:PyObject_HEAD void *	file:
ptype	HWsim_wrap.cxx	/^  swig_type_info **ptype;$/;"	m	struct:swig_const_info	typeref:typename:swig_type_info **	file:
pvalue	HWsim_wrap.cxx	/^  void   *pvalue;$/;"	m	struct:swig_const_info	typeref:typename:void *	file:
pytype	HWsim_wrap.cxx	/^  PyTypeObject *pytype;$/;"	m	struct:__anon571c7d070208	typeref:typename:PyTypeObject *	file:
rampInput	ActivationFunc.h	/^	double rampInput;$/;"	m	class:ActivationFunc	typeref:typename:double
rampInput	Adder.h	/^	double rampInput, rampOutput;$/;"	m	class:Adder	typeref:typename:double
rampInput	Comparator.h	/^	double rampInput, rampOutput;$/;"	m	class:Comparator	typeref:typename:double
rampInput	DFF.h	/^	double rampInput, rampOutput;$/;"	m	class:DFF	typeref:typename:double
rampInput	DeMux.h	/^	double rampInput, rampOutput;$/;"	m	class:DeMux	typeref:typename:double
rampInput	DecoderDriver.h	/^	double rampInput, rampOutput;$/;"	m	class:DecoderDriver	typeref:typename:double
rampInput	LUT.h	/^	double rampInput, rampOutput;$/;"	m	class:LUT	typeref:typename:double
rampInput	MultilevelSAEncoder.h	/^	double rampInput, rampOutput;$/;"	m	class:MultilevelSAEncoder	typeref:typename:double
rampInput	Mux.h	/^	double rampInput, rampOutput;$/;"	m	class:Mux	typeref:typename:double
rampInput	NewSwitchMatrix.h	/^	double rampInput, rampOutput;$/;"	m	class:NewSwitchMatrix	typeref:typename:double
rampInput	Precharger.h	/^	double rampInput, rampOutput;$/;"	m	class:Precharger	typeref:typename:double
rampInput	ReadCircuit.h	/^	double rampInput, rampOutput;$/;"	m	class:ReadCircuit	typeref:typename:double
rampInput	RowDecoder.h	/^	double rampInput, rampOutput;$/;"	m	class:RowDecoder	typeref:typename:double
rampInput	SRAMWriteDriver.h	/^	double rampInput, rampOutput;$/;"	m	class:SRAMWriteDriver	typeref:typename:double
rampInput	ShiftAdd.h	/^	double rampInput, rampOutput;$/;"	m	class:ShiftAdd	typeref:typename:double
rampInput	SwitchMatrix.h	/^	double rampInput, rampOutput;$/;"	m	class:SwitchMatrix	typeref:typename:double
rampInput	VoltageSenseAmp.h	/^	double rampInput, rampOutput;$/;"	m	class:VoltageSenseAmp	typeref:typename:double
rampInput	WLDecoderOutput.h	/^	double rampInput, rampOutput;$/;"	m	class:WLDecoderOutput	typeref:typename:double
rampInput	WLNewDecoderDriver.h	/^	double rampInput, rampOutput;$/;"	m	class:WLNewDecoderDriver	typeref:typename:double
rampOutput	Adder.h	/^	double rampInput, rampOutput;$/;"	m	class:Adder	typeref:typename:double
rampOutput	Comparator.h	/^	double rampInput, rampOutput;$/;"	m	class:Comparator	typeref:typename:double
rampOutput	DFF.h	/^	double rampInput, rampOutput;$/;"	m	class:DFF	typeref:typename:double
rampOutput	DeMux.h	/^	double rampInput, rampOutput;$/;"	m	class:DeMux	typeref:typename:double
rampOutput	DecoderDriver.h	/^	double rampInput, rampOutput;$/;"	m	class:DecoderDriver	typeref:typename:double
rampOutput	LUT.h	/^	double rampInput, rampOutput;$/;"	m	class:LUT	typeref:typename:double
rampOutput	MultilevelSAEncoder.h	/^	double rampInput, rampOutput;$/;"	m	class:MultilevelSAEncoder	typeref:typename:double
rampOutput	Mux.h	/^	double rampInput, rampOutput;$/;"	m	class:Mux	typeref:typename:double
rampOutput	NewSwitchMatrix.h	/^	double rampInput, rampOutput;$/;"	m	class:NewSwitchMatrix	typeref:typename:double
rampOutput	Precharger.h	/^	double rampInput, rampOutput;$/;"	m	class:Precharger	typeref:typename:double
rampOutput	ReadCircuit.h	/^	double rampInput, rampOutput;$/;"	m	class:ReadCircuit	typeref:typename:double
rampOutput	RowDecoder.h	/^	double rampInput, rampOutput;$/;"	m	class:RowDecoder	typeref:typename:double
rampOutput	SRAMWriteDriver.h	/^	double rampInput, rampOutput;$/;"	m	class:SRAMWriteDriver	typeref:typename:double
rampOutput	ShiftAdd.h	/^	double rampInput, rampOutput;$/;"	m	class:ShiftAdd	typeref:typename:double
rampOutput	SwitchMatrix.h	/^	double rampInput, rampOutput;$/;"	m	class:SwitchMatrix	typeref:typename:double
rampOutput	VoltageSenseAmp.h	/^	double rampInput, rampOutput;$/;"	m	class:VoltageSenseAmp	typeref:typename:double
rampOutput	WLDecoderOutput.h	/^	double rampInput, rampOutput;$/;"	m	class:WLDecoderOutput	typeref:typename:double
rampOutput	WLNewDecoderDriver.h	/^	double rampInput, rampOutput;$/;"	m	class:WLNewDecoderDriver	typeref:typename:double
readCircuit	SubArray.h	/^	ReadCircuit readCircuit;$/;"	m	class:SubArray	typeref:typename:ReadCircuit
readCircuitMode	SubArray.h	/^	ReadCircuitMode readCircuitMode;$/;"	m	class:SubArray	typeref:typename:ReadCircuitMode
readDynamicEnergy	FunctionUnit.h	/^	double readDynamicEnergy, writeDynamicEnergy;	\/* Unit: J *\/$/;"	m	class:FunctionUnit	typeref:typename:double
readDynamicEnergy	HWsim.py	/^        readDynamicEnergy = _swig_property(_HWsim.FunctionUnit_readDynamicEnergy_get, _HWsim.Fun/;"	v	class:FunctionUnit
readDynamicEnergyArray	SubArray.h	/^	double readDynamicEnergyArray, writeDynamicEnergyArray;$/;"	m	class:SubArray	typeref:typename:double
readLatency	FunctionUnit.h	/^	double readLatency, writeLatency;		\/* Unit: s *\/$/;"	m	class:FunctionUnit	typeref:typename:double
readLatency	HWsim.py	/^        readLatency = _swig_property(_HWsim.FunctionUnit_readLatency_get, _HWsim.FunctionUnit_re/;"	v	class:FunctionUnit
readParam	ActivationFunc.h	/^	const ReadParam& readParam;$/;"	m	class:ActivationFunc	typeref:typename:const ReadParam &
readParam	Core.h	/^	const ReadParam& readParam;$/;"	m	class:Core	typeref:typename:const ReadParam &
readPower	FunctionUnit.h	/^	double readPower, writePower;$/;"	m	class:FunctionUnit	typeref:typename:double
readPower	HWsim.py	/^        readPower = _swig_property(_HWsim.FunctionUnit_readPower_get, _HWsim.FunctionUnit_readPo/;"	v	class:FunctionUnit
readPulseWidth	MemCell.h	/^	double readPulseWidth;$/;"	m	class:MemCell	typeref:typename:double
readVoltage	MemCell.h	/^	double readVoltage;$/;"	m	class:MemCell	typeref:typename:double
readbufferproc	HWsim_wrap.cxx	/^typedef getreadbufferproc readbufferproc;$/;"	t	typeref:typename:getreadbufferproc	file:
relaxArrayCellHeight	SubArray.h	/^	bool relaxArrayCellHeight;	\/\/ true: relax the memory cell height to match the height of perip/;"	m	class:SubArray	typeref:typename:bool
relaxArrayCellWidth	SubArray.h	/^	bool relaxArrayCellWidth;	\/\/ true: relax the memory cell width to match the width of peripera/;"	m	class:SubArray	typeref:typename:bool
resCellAccess	MemCell.h	/^	double resCellAccess;$/;"	m	class:MemCell	typeref:typename:double
resCellAccess	SubArray.h	/^	double resCellAccess;	\/\/ Resistance of access device, Unit: ohm$/;"	m	class:SubArray	typeref:typename:double
resCol	SubArray.h	/^	double resCol;		\/\/ Column resistance, Unit: ohm$/;"	m	class:SubArray	typeref:typename:double
resLoad	DecoderDriver.h	/^	double resLoad;	\/* Output resistance, unit: ohm *\/$/;"	m	class:DecoderDriver	typeref:typename:double
resLoad	NewSwitchMatrix.h	/^	double resLoad;$/;"	m	class:NewSwitchMatrix	typeref:typename:double
resLoad	Precharger.h	/^	double capLoad, resLoad;$/;"	m	class:Precharger	typeref:typename:double
resLoad	SRAMWriteDriver.h	/^	double capLoad, resLoad;$/;"	m	class:SRAMWriteDriver	typeref:typename:double
resLoad	SwitchMatrix.h	/^	double resLoad;$/;"	m	class:SwitchMatrix	typeref:typename:double
resLoad	WLDecoderOutput.h	/^	double resLoad;	\/* Output resistance, unit: ohm *\/$/;"	m	class:WLDecoderOutput	typeref:typename:double
resLoad	WLNewDecoderDriver.h	/^	double resLoad;	\/* Output resistance, unit: ohm *\/$/;"	m	class:WLNewDecoderDriver	typeref:typename:double
resMemCellAvg	MemCell.h	/^	double resMemCellAvg;	\/\/ At on-chip Vr (different than the Vr in the reported measurement dat/;"	m	class:MemCell	typeref:typename:double
resMemCellAvgAtHalfVw	MemCell.h	/^	double resMemCellAvgAtHalfVw;$/;"	m	class:MemCell	typeref:typename:double
resMemCellAvgAtVw	MemCell.h	/^	double resMemCellAvgAtVw;$/;"	m	class:MemCell	typeref:typename:double
resMemCellOff	MemCell.h	/^	double resMemCellOff;	\/\/ At on-chip Vr (different than the Vr in the reported measurement dat/;"	m	class:MemCell	typeref:typename:double
resMemCellOffAtHalfVw	MemCell.h	/^	double resMemCellOffAtHalfVw;$/;"	m	class:MemCell	typeref:typename:double
resMemCellOffAtVw	MemCell.h	/^	double resMemCellOffAtVw;$/;"	m	class:MemCell	typeref:typename:double
resMemCellOn	MemCell.h	/^	double resMemCellOn;	\/\/ At on-chip Vr (different than the Vr in the reported measurement data/;"	m	class:MemCell	typeref:typename:double
resMemCellOnAtHalfVw	MemCell.h	/^	double resMemCellOnAtHalfVw;$/;"	m	class:MemCell	typeref:typename:double
resMemCellOnAtVw	MemCell.h	/^	double resMemCellOnAtVw;$/;"	m	class:MemCell	typeref:typename:double
resPrecharge	VoltageSenseAmp.h	/^	double resPrecharge;$/;"	m	class:VoltageSenseAmp	typeref:typename:double
resRow	SubArray.h	/^	double resRow;		\/\/ Row resistance, Unit: ohm$/;"	m	class:SubArray	typeref:typename:double
resTg	DeMux.h	/^	double resTg;$/;"	m	class:DeMux	typeref:typename:double
resTg	DecoderDriver.h	/^	double resTg;$/;"	m	class:DecoderDriver	typeref:typename:double
resTg	Mux.h	/^	double resTg;$/;"	m	class:Mux	typeref:typename:double
resTg	NewSwitchMatrix.h	/^	double resTg;$/;"	m	class:NewSwitchMatrix	typeref:typename:double
resTg	SwitchMatrix.h	/^	double resTg;$/;"	m	class:SwitchMatrix	typeref:typename:double
resTg	WLDecoderOutput.h	/^	double resTg;$/;"	m	class:WLDecoderOutput	typeref:typename:double
resTg	WLNewDecoderDriver.h	/^	double resTg;$/;"	m	class:WLNewDecoderDriver	typeref:typename:double
resWireLoadPerColumn	Precharger.h	/^	double capWireLoadPerColumn, resWireLoadPerColumn;$/;"	m	class:Precharger	typeref:typename:double
resistanceAvg	MemCell.h	/^	double resistanceAvg;$/;"	m	class:MemCell	typeref:typename:double
resistanceOff	MemCell.h	/^	double resistanceOff;	\/* Turn-off resistance *\/$/;"	m	class:MemCell	typeref:typename:double
resistanceOn	MemCell.h	/^	double resistanceOn;	\/* Turn-on resistance *\/$/;"	m	class:MemCell	typeref:typename:double
rowCurrentSenseAmp	SubArray.h	/^	CurrentSenseAmp rowCurrentSenseAmp;$/;"	m	class:SubArray	typeref:typename:CurrentSenseAmp
rowbyrow	CurrentSenseAmp.h	/^	bool rowbyrow;$/;"	m	class:CurrentSenseAmp	typeref:typename:bool
save	HWsim_wrap.cxx	/^         PyThreadState *save;$/;"	m	class:SWIG_Python_Thread_Allow	typeref:typename:PyThreadState *	file:
segcountproc	HWsim_wrap.cxx	/^typedef getsegcountproc segcountproc;$/;"	t	typeref:typename:getsegcountproc	file:
senseAmp	SubArray.h	/^	SenseAmp senseAmp;$/;"	m	class:SubArray	typeref:typename:SenseAmp
senseVoltage	SenseAmp.h	/^	double senseVoltage;	\/* Minimum sensible voltage *\/$/;"	m	class:SenseAmp	typeref:typename:double
set_attr	HWsim_wrap.cxx	/^    int       (*set_attr)(PyObject *); \/* Set the value *\/$/;"	m	struct:swig_globalvar	typeref:typename:int (*)(PyObject *)	file:
shiftAdd	Core.h	/^	ShiftAdd shiftAdd;$/;"	m	class:Core	typeref:typename:ShiftAdd
shiftAdd	SubArray.h	/^	ShiftAdd shiftAdd;$/;"	m	class:SubArray	typeref:typename:ShiftAdd
shiftAddEnable	SubArray.h	/^	bool shiftAddEnable;    \/\/ 0 for partition because the shift-and-add circuit will be after th/;"	m	class:SubArray	typeref:typename:bool
size	HWsim_wrap.cxx	/^  size_t                 size;		        \/* Number of types in this module *\/$/;"	m	struct:swig_module_info	typeref:typename:size_t	file:
size	HWsim_wrap.cxx	/^  size_t size;$/;"	m	struct:__anon571c7d070408	typeref:typename:size_t	file:
slSwitchMatrix	SubArray.h	/^	SwitchMatrix    slSwitchMatrix;$/;"	m	class:SubArray	typeref:typename:SwitchMatrix
slots	HWsim_wrap.cxx	/^  PyObject *name, *slots;$/;"	m	struct:__anon571c7d070108	typeref:typename:PyObject *	file:
spikingMode	ReadCircuit.h	/^	SpikingMode spikingMode;$/;"	m	class:ReadCircuit	typeref:typename:SpikingMode
spikingMode	ShiftAdd.h	/^	SpikingMode spikingMode;$/;"	m	class:ShiftAdd	typeref:typename:SpikingMode
spikingMode	SubArray.h	/^	SpikingMode spikingMode;	\/\/ NONSPIKING: input data using pulses in binary representation$/;"	m	class:SubArray	typeref:typename:SpikingMode
sramWriteDriver	SubArray.h	/^	SRAMWriteDriver sramWriteDriver;$/;"	m	class:SubArray	typeref:typename:SRAMWriteDriver
ssizeargfunc	HWsim_wrap.cxx	/^typedef intargfunc ssizeargfunc;$/;"	t	typeref:typename:intargfunc	file:
ssizeobjargproc	HWsim_wrap.cxx	/^typedef intobjargproc ssizeobjargproc;$/;"	t	typeref:typename:intobjargproc	file:
ssizessizeargfunc	HWsim_wrap.cxx	/^typedef intintargfunc ssizessizeargfunc;$/;"	t	typeref:typename:intintargfunc	file:
ssizessizeobjargproc	HWsim_wrap.cxx	/^typedef intintobjargproc ssizessizeobjargproc;$/;"	t	typeref:typename:intintobjargproc	file:
state	HWsim_wrap.cxx	/^         PyGILState_STATE state;$/;"	m	class:SWIG_Python_Thread_Block	typeref:typename:PyGILState_STATE	file:
status	HWsim_wrap.cxx	/^         bool status;$/;"	m	class:SWIG_Python_Thread_Allow	typeref:typename:bool	file:
status	HWsim_wrap.cxx	/^         bool status;$/;"	m	class:SWIG_Python_Thread_Block	typeref:typename:bool	file:
stop_iteration	HWsim_wrap.cxx	/^  struct stop_iteration {$/;"	s	namespace:swig	file:
str	HWsim_wrap.cxx	/^  const char             *str;			\/* human readable name of this type *\/$/;"	m	struct:swig_type_info	typeref:typename:const char *	file:
subArray	Core.h	/^	SubArray subArray;$/;"	m	class:Core	typeref:typename:SubArray
sum_add	Core.h	/^	Sum sum_add;$/;"	m	class:Core	typeref:typename:Sum
swig	HWsim_wrap.cxx	/^namespace swig {$/;"	n	file:
swig_cast_info	HWsim_wrap.cxx	/^typedef struct swig_cast_info {$/;"	s	file:
swig_cast_info	HWsim_wrap.cxx	/^} swig_cast_info;$/;"	t	typeref:struct:swig_cast_info	file:
swig_cast_initial	HWsim_wrap.cxx	/^static swig_cast_info *swig_cast_initial[] = {$/;"	v	typeref:typename:swig_cast_info * []	file:
swig_const_info	HWsim_wrap.cxx	/^typedef struct swig_const_info {$/;"	s	file:
swig_const_info	HWsim_wrap.cxx	/^} swig_const_info;$/;"	t	typeref:struct:swig_const_info	file:
swig_const_table	HWsim_wrap.cxx	/^static swig_const_info swig_const_table[] = {$/;"	v	typeref:typename:swig_const_info[]	file:
swig_converter_func	HWsim_wrap.cxx	/^typedef void *(*swig_converter_func)(void *, int *);$/;"	t	typeref:typename:void * (*)(void *,int *)	file:
swig_dycast_func	HWsim_wrap.cxx	/^typedef struct swig_type_info *(*swig_dycast_func)(void **);$/;"	t	typeref:struct:swig_type_info * (*)(void **)	file:
swig_globalvar	HWsim_wrap.cxx	/^  typedef struct swig_globalvar {$/;"	s	file:
swig_globalvar	HWsim_wrap.cxx	/^  } swig_globalvar;$/;"	t	typeref:struct:swig_globalvar	file:
swig_import_helper	HWsim.py	/^    def swig_import_helper():$/;"	f
swig_module	HWsim_wrap.cxx	/^static swig_module_info swig_module = {swig_types, 10, 0, 0, 0, 0};$/;"	v	typeref:typename:swig_module_info	file:
swig_module_info	HWsim_wrap.cxx	/^typedef struct swig_module_info {$/;"	s	file:
swig_module_info	HWsim_wrap.cxx	/^} swig_module_info;$/;"	t	typeref:struct:swig_module_info	file:
swig_owntype	HWsim_wrap.cxx	/^#define swig_owntype /;"	d	file:
swig_this	HWsim_wrap.cxx	/^static PyObject *swig_this = NULL;$/;"	v	typeref:typename:PyObject *	file:
swig_type_info	HWsim_wrap.cxx	/^typedef struct swig_type_info {$/;"	s	file:
swig_type_info	HWsim_wrap.cxx	/^} swig_type_info;$/;"	t	typeref:struct:swig_type_info	file:
swig_type_initial	HWsim_wrap.cxx	/^static swig_type_info *swig_type_initial[] = {$/;"	v	typeref:typename:swig_type_info * []	file:
swig_types	HWsim_wrap.cxx	/^static swig_type_info *swig_types[11];$/;"	v	typeref:typename:swig_type_info * [11]	file:
swig_varlink_dealloc	HWsim_wrap.cxx	/^  swig_varlink_dealloc(swig_varlinkobject *v) {$/;"	f	typeref:typename:SWIGINTERN void
swig_varlink_getattr	HWsim_wrap.cxx	/^  swig_varlink_getattr(swig_varlinkobject *v, char *n) {$/;"	f	typeref:typename:SWIGINTERN PyObject *
swig_varlink_print	HWsim_wrap.cxx	/^  swig_varlink_print(swig_varlinkobject *v, FILE *fp, int SWIGUNUSEDPARM(flags)) {$/;"	f	typeref:typename:SWIGINTERN int
swig_varlink_repr	HWsim_wrap.cxx	/^  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {$/;"	f	typeref:typename:SWIGINTERN PyObject *
swig_varlink_setattr	HWsim_wrap.cxx	/^  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {$/;"	f	typeref:typename:SWIGINTERN int
swig_varlink_str	HWsim_wrap.cxx	/^  swig_varlink_str(swig_varlinkobject *v) {$/;"	f	typeref:typename:SWIGINTERN PyObject *
swig_varlink_type	HWsim_wrap.cxx	/^  swig_varlink_type(void) {$/;"	f	typeref:typename:SWIGINTERN PyTypeObject *
swig_varlinkobject	HWsim_wrap.cxx	/^  typedef struct swig_varlinkobject {$/;"	s	file:
swig_varlinkobject	HWsim_wrap.cxx	/^  } swig_varlinkobject;$/;"	t	typeref:struct:swig_varlinkobject	file:
swigobject_methods	HWsim_wrap.cxx	/^swigobject_methods[] = {$/;"	v	typeref:typename:PyMethodDef[]	file:
tech	ActivationFunc.h	/^	const Technology& tech;$/;"	m	class:ActivationFunc	typeref:typename:const Technology &
tech	Adder.h	/^	const Technology& tech;$/;"	m	class:Adder	typeref:typename:const Technology &
tech	Comparator.h	/^	const Technology& tech;$/;"	m	class:Comparator	typeref:typename:const Technology &
tech	Core.h	/^	const Technology& tech;$/;"	m	class:Core	typeref:typename:const Technology &
tech	CurrentSenseAmp.h	/^	const Technology& tech;$/;"	m	class:CurrentSenseAmp	typeref:typename:const Technology &
tech	DFF.h	/^	const Technology& tech;$/;"	m	class:DFF	typeref:typename:const Technology &
tech	DeMux.h	/^	const Technology& tech;$/;"	m	class:DeMux	typeref:typename:const Technology &
tech	DecoderDriver.h	/^	const Technology& tech;$/;"	m	class:DecoderDriver	typeref:typename:const Technology &
tech	HWsim.h	/^	Technology tech;$/;"	m	class:HWsim	typeref:typename:Technology
tech	HWsim.py	/^        tech = _swig_property(_HWsim.HWsim_tech_get, _HWsim.HWsim_tech_set)$/;"	v	class:HWsim
tech	LUT.h	/^	const Technology& tech;$/;"	m	class:LUT	typeref:typename:const Technology &
tech	MultilevelSAEncoder.h	/^	const Technology& tech;$/;"	m	class:MultilevelSAEncoder	typeref:typename:const Technology &
tech	MultilevelSenseAmp.h	/^	const Technology& tech;$/;"	m	class:MultilevelSenseAmp	typeref:typename:const Technology &
tech	Mux.h	/^	const Technology& tech;$/;"	m	class:Mux	typeref:typename:const Technology &
tech	NewSwitchMatrix.h	/^	const Technology& tech;$/;"	m	class:NewSwitchMatrix	typeref:typename:const Technology &
tech	Precharger.h	/^	const Technology& tech;$/;"	m	class:Precharger	typeref:typename:const Technology &
tech	ReadCircuit.h	/^	const Technology& tech;$/;"	m	class:ReadCircuit	typeref:typename:const Technology &
tech	RippleCounter.h	/^	const Technology& tech;$/;"	m	class:RippleCounter	typeref:typename:const Technology &
tech	RowDecoder.h	/^	const Technology& tech;$/;"	m	class:RowDecoder	typeref:typename:const Technology &
tech	SRAMWriteDriver.h	/^	const Technology& tech;$/;"	m	class:SRAMWriteDriver	typeref:typename:const Technology &
tech	SenseAmp.h	/^	const Technology& tech;$/;"	m	class:SenseAmp	typeref:typename:const Technology &
tech	ShiftAdd.h	/^	const Technology& tech;$/;"	m	class:ShiftAdd	typeref:typename:const Technology &
tech	SubArray.h	/^	Technology& tech;$/;"	m	class:SubArray	typeref:typename:Technology &
tech	Sum.h	/^	const Technology& tech;$/;"	m	class:Sum	typeref:typename:const Technology &
tech	SwitchMatrix.h	/^	const Technology& tech;$/;"	m	class:SwitchMatrix	typeref:typename:const Technology &
tech	VoltageSenseAmp.h	/^	const Technology& tech;$/;"	m	class:VoltageSenseAmp	typeref:typename:const Technology &
tech	WLDecoderOutput.h	/^	const Technology& tech;$/;"	m	class:WLDecoderOutput	typeref:typename:const Technology &
tech	WLNewDecoderDriver.h	/^	const Technology& tech;$/;"	m	class:WLNewDecoderDriver	typeref:typename:const Technology &
temperature	InputParameter.h	/^	int temperature;				\/* The ambient temperature, Unit: K *\/$/;"	m	class:InputParameter	typeref:typename:int
temperature	ReadParam.h	/^	int temperature;				\/* The ambient temperature, Unit: K *\/$/;"	m	class:ReadParam	typeref:typename:int
totalArea	FunctionUnit.h	/^	double totalArea;		\/* Unit: m^2 *\/$/;"	m	class:FunctionUnit	typeref:typename:double
totalArea	HWsim.py	/^        totalArea = _swig_property(_HWsim.FunctionUnit_totalArea_get, _HWsim.FunctionUnit_totalA/;"	v	class:FunctionUnit
transistorType	InputParameter.h	/^	TransistorType transistorType;	\/* Conventional CMOS, 2D FET, or TFET *\/$/;"	m	class:InputParameter	typeref:typename:TransistorType
transistorType	ReadParam.h	/^	TransistorType transistorType;  \/* Conventional CMOS, 2D FET, or TF    ET *\/$/;"	m	class:ReadParam	typeref:typename:TransistorType
transistorType	Technology.h	/^	TransistorType transistorType;$/;"	m	class:Technology	typeref:typename:TransistorType
tsqinghua	SubArray.h	/^	bool tsqinghua;       \/\/ tsqinghua's design (crossbar array)$/;"	m	class:SubArray	typeref:typename:bool
ty	HWsim_wrap.cxx	/^  swig_type_info *ty;$/;"	m	struct:__anon571c7d070308	typeref:typename:swig_type_info *	file:
ty	HWsim_wrap.cxx	/^  swig_type_info *ty;$/;"	m	struct:__anon571c7d070408	typeref:typename:swig_type_info *	file:
type	HWsim_wrap.cxx	/^  PyTypeObject type;$/;"	m	struct:__anon571c7d070108	typeref:typename:PyTypeObject	file:
type	HWsim_wrap.cxx	/^  int type;$/;"	m	struct:swig_const_info	typeref:typename:int	file:
type	HWsim_wrap.cxx	/^  swig_type_info         *type;			\/* pointer to type that is equivalent to this type *\/$/;"	m	struct:swig_cast_info	typeref:typename:swig_type_info *	file:
type_initial	HWsim_wrap.cxx	/^  swig_type_info         **type_initial;	\/* Array of initially generated type structures *\/$/;"	m	struct:swig_module_info	typeref:typename:swig_type_info **	file:
types	HWsim_wrap.cxx	/^  swig_type_info         **types;		\/* Array of pointers to swig_type_info structures that are i/;"	m	struct:swig_module_info	typeref:typename:swig_type_info **	file:
unitWireRes	SubArray.h	/^	double unitWireRes;	\/\/ Unit wire resistance, Unit ohm\/m$/;"	m	class:SubArray	typeref:typename:double
usedArea	FunctionUnit.h	/^	double usedArea;		\/* Unit: m^2 *\/$/;"	m	class:FunctionUnit	typeref:typename:double
usedArea	HWsim.py	/^        usedArea = _swig_property(_HWsim.FunctionUnit_usedArea_get, _HWsim.FunctionUnit_usedArea/;"	v	class:FunctionUnit
value	HWsim.py	/^    def value(self):$/;"	m	class:SwigPyIterator
vars	HWsim_wrap.cxx	/^    swig_globalvar *vars;$/;"	m	struct:swig_varlinkobject	typeref:typename:PyObject_HEAD swig_globalvar *	file:
vdd	Technology.h	/^	double vdd;			\/* Supply voltage, Unit: V *\/$/;"	m	class:Technology	typeref:typename:double
voltageIntThreshold	ReadCircuit.h	/^	double voltageIntThreshold;$/;"	m	class:ReadCircuit	typeref:typename:double
voltageSenseAmp	LUT.h	/^	VoltageSenseAmp voltageSenseAmp;$/;"	m	class:LUT	typeref:typename:VoltageSenseAmp
voltageSenseAmp	SubArray.h	/^	VoltageSenseAmp voltageSenseAmp;$/;"	m	class:SubArray	typeref:typename:VoltageSenseAmp
voltageSenseDiff	VoltageSenseAmp.h	/^	double voltageSenseDiff;$/;"	m	class:VoltageSenseAmp	typeref:typename:double
vth	Technology.h	/^	double vth;				\/* Threshold voltage, Unit: V *\/$/;"	m	class:Technology	typeref:typename:double
wAdder	Adder.h	/^	double hAdder, wAdder;$/;"	m	class:Adder	typeref:typename:double
wDff	ReadCircuit.h	/^	double areaUnit, hUnit, wUnit, areaReadBody, hReadBody, wReadBody, areaDff, hDff, wDff;$/;"	m	class:ReadCircuit	typeref:typename:double
wInv	ActivationFunc.h	/^	double wInv, hInv;$/;"	m	class:ActivationFunc	typeref:typename:double
wNand	ActivationFunc.h	/^	double wNand, hNand;$/;"	m	class:ActivationFunc	typeref:typename:double
wNmosL	CurrentSenseAmp.h	/^	double hNmosL, wNmosL, hNmosS, wNmosS, hNmosM, wNmosM;$/;"	m	class:CurrentSenseAmp	typeref:typename:double
wNmosM	CurrentSenseAmp.h	/^	double hNmosL, wNmosL, hNmosS, wNmosS, hNmosM, wNmosM;$/;"	m	class:CurrentSenseAmp	typeref:typename:double
wNmosS	CurrentSenseAmp.h	/^	double hNmosL, wNmosL, hNmosS, wNmosS, hNmosM, wNmosM;$/;"	m	class:CurrentSenseAmp	typeref:typename:double
wReadBody	ReadCircuit.h	/^	double areaUnit, hUnit, wUnit, areaReadBody, hReadBody, wReadBody, areaDff, hDff, wDff;$/;"	m	class:ReadCircuit	typeref:typename:double
wUnit	ReadCircuit.h	/^	double areaUnit, hUnit, wUnit, areaReadBody, hReadBody, wReadBody, areaDff, hDff, wDff;$/;"	m	class:ReadCircuit	typeref:typename:double
width	FunctionUnit.h	/^	double width;		\/* Unit: m *\/$/;"	m	class:FunctionUnit	typeref:typename:double
width	HWsim.py	/^        width = _swig_property(_HWsim.FunctionUnit_width_get, _HWsim.FunctionUnit_width_set)$/;"	v	class:FunctionUnit
widthAccessCMOS	MemCell.h	/^	double widthAccessCMOS;	\/* The gate width of CMOS access transistor, Unit: F *\/$/;"	m	class:MemCell	typeref:typename:double
widthArray	CurrentSenseAmp.h	/^	double widthArray;$/;"	m	class:CurrentSenseAmp	typeref:typename:double
widthArray	SubArray.h	/^	double widthArray;$/;"	m	class:SubArray	typeref:typename:double
widthDffInvN	ReadCircuit.h	/^	double widthDffTgN, widthDffTgP, widthDffInvN, widthDffInvP, widthDffNorN, widthDffNorP, widthT/;"	m	class:ReadCircuit	typeref:typename:double
widthDffInvP	ReadCircuit.h	/^	double widthDffTgN, widthDffTgP, widthDffInvN, widthDffInvP, widthDffNorN, widthDffNorP, widthT/;"	m	class:ReadCircuit	typeref:typename:double
widthDffNorN	ReadCircuit.h	/^	double widthDffTgN, widthDffTgP, widthDffInvN, widthDffInvP, widthDffNorN, widthDffNorP, widthT/;"	m	class:ReadCircuit	typeref:typename:double
widthDffNorP	ReadCircuit.h	/^	double widthDffTgN, widthDffTgP, widthDffInvN, widthDffInvP, widthDffNorN, widthDffNorP, widthT/;"	m	class:ReadCircuit	typeref:typename:double
widthDffTgN	ReadCircuit.h	/^	double widthDffTgN, widthDffTgP, widthDffInvN, widthDffInvP, widthDffNorN, widthDffNorP, widthT/;"	m	class:ReadCircuit	typeref:typename:double
widthDffTgP	ReadCircuit.h	/^	double widthDffTgN, widthDffTgP, widthDffInvN, widthDffInvP, widthDffNorN, widthDffNorP, widthT/;"	m	class:ReadCircuit	typeref:typename:double
widthDriverInvN	RowDecoder.h	/^	double widthInvN, widthInvP, widthNandN, widthNandP, widthNorN, widthNorP, widthDriverInvN, wid/;"	m	class:RowDecoder	typeref:typename:double
widthDriverInvP	RowDecoder.h	/^	double widthInvN, widthInvP, widthNandN, widthNandP, widthNorN, widthNorP, widthDriverInvN, wid/;"	m	class:RowDecoder	typeref:typename:double
widthEnInvN	Mux.h	/^	double widthNandN, widthNandP, widthEnInvN, widthEnInvP, widthTgN, widthTgP, widthMuxInvN, widt/;"	m	class:Mux	typeref:typename:double
widthEnInvP	Mux.h	/^	double widthNandN, widthNandP, widthEnInvN, widthEnInvP, widthTgN, widthTgP, widthMuxInvN, widt/;"	m	class:Mux	typeref:typename:double
widthFin	Technology.h	/^	double widthFin;	\/* Fin width, Unit: m *\/$/;"	m	class:Technology	typeref:typename:double
widthInFeatureSize	MemCell.h	/^	double widthInFeatureSize;	\/* Cell width, Unit: F *\/$/;"	m	class:MemCell	typeref:typename:double
widthInvN	ActivationFunc.h	/^	double widthInvN, widthInvP;$/;"	m	class:ActivationFunc	typeref:typename:double
widthInvN	Comparator.h	/^	double widthInvN, widthInvP, widthNand2N, widthNand2P, widthNand3N, widthNand3P;$/;"	m	class:Comparator	typeref:typename:double
widthInvN	DFF.h	/^	double widthTgN, widthTgP, widthInvN, widthInvP;$/;"	m	class:DFF	typeref:typename:double
widthInvN	DeMux.h	/^	double widthInvN, widthInvP, widthTgN, widthTgP;$/;"	m	class:DeMux	typeref:typename:double
widthInvN	DecoderDriver.h	/^	double widthInvN, widthInvP, widthTgN, widthTgP;$/;"	m	class:DecoderDriver	typeref:typename:double
widthInvN	LUT.h	/^	double widthInvN, widthInvP;$/;"	m	class:LUT	typeref:typename:double
widthInvN	MultilevelSAEncoder.h	/^	double widthInvN, widthInvP, widthNandN, widthNandP;$/;"	m	class:MultilevelSAEncoder	typeref:typename:double
widthInvN	MultilevelSenseAmp.h	/^	double widthInvN;$/;"	m	class:MultilevelSenseAmp	typeref:typename:double
widthInvN	ReadCircuit.h	/^	double widthDffTgN, widthDffTgP, widthDffInvN, widthDffInvP, widthDffNorN, widthDffNorP, widthT/;"	m	class:ReadCircuit	typeref:typename:double
widthInvN	RowDecoder.h	/^	double widthInvN, widthInvP, widthNandN, widthNandP, widthNorN, widthNorP, widthDriverInvN, wid/;"	m	class:RowDecoder	typeref:typename:double
widthInvN	SRAMWriteDriver.h	/^	double widthInvN, widthInvP;$/;"	m	class:SRAMWriteDriver	typeref:typename:double
widthInvN	ShiftAdd.h	/^	double widthInvN, widthInvP, widthNandN, widthNandP;$/;"	m	class:ShiftAdd	typeref:typename:double
widthInvN	WLDecoderOutput.h	/^	double widthNorN, widthNorP, widthInvN, widthInvP, widthTgN, widthTgP, widthNmos;$/;"	m	class:WLDecoderOutput	typeref:typename:double
widthInvN	WLNewDecoderDriver.h	/^	double widthNandN, widthNandP, widthInvN, widthInvP, widthTgN, widthTgP;$/;"	m	class:WLNewDecoderDriver	typeref:typename:double
widthInvP	ActivationFunc.h	/^	double widthInvN, widthInvP;$/;"	m	class:ActivationFunc	typeref:typename:double
widthInvP	Comparator.h	/^	double widthInvN, widthInvP, widthNand2N, widthNand2P, widthNand3N, widthNand3P;$/;"	m	class:Comparator	typeref:typename:double
widthInvP	DFF.h	/^	double widthTgN, widthTgP, widthInvN, widthInvP;$/;"	m	class:DFF	typeref:typename:double
widthInvP	DeMux.h	/^	double widthInvN, widthInvP, widthTgN, widthTgP;$/;"	m	class:DeMux	typeref:typename:double
widthInvP	DecoderDriver.h	/^	double widthInvN, widthInvP, widthTgN, widthTgP;$/;"	m	class:DecoderDriver	typeref:typename:double
widthInvP	LUT.h	/^	double widthInvN, widthInvP;$/;"	m	class:LUT	typeref:typename:double
widthInvP	MultilevelSAEncoder.h	/^	double widthInvN, widthInvP, widthNandN, widthNandP;$/;"	m	class:MultilevelSAEncoder	typeref:typename:double
widthInvP	ReadCircuit.h	/^	double widthDffTgN, widthDffTgP, widthDffInvN, widthDffInvP, widthDffNorN, widthDffNorP, widthT/;"	m	class:ReadCircuit	typeref:typename:double
widthInvP	RowDecoder.h	/^	double widthInvN, widthInvP, widthNandN, widthNandP, widthNorN, widthNorP, widthDriverInvN, wid/;"	m	class:RowDecoder	typeref:typename:double
widthInvP	SRAMWriteDriver.h	/^	double widthInvN, widthInvP;$/;"	m	class:SRAMWriteDriver	typeref:typename:double
widthInvP	ShiftAdd.h	/^	double widthInvN, widthInvP, widthNandN, widthNandP;$/;"	m	class:ShiftAdd	typeref:typename:double
widthInvP	WLDecoderOutput.h	/^	double widthNorN, widthNorP, widthInvN, widthInvP, widthTgN, widthTgP, widthNmos;$/;"	m	class:WLDecoderOutput	typeref:typename:double
widthInvP	WLNewDecoderDriver.h	/^	double widthNandN, widthNandP, widthInvN, widthInvP, widthTgN, widthTgP;$/;"	m	class:WLNewDecoderDriver	typeref:typename:double
widthMuxInvN	Mux.h	/^	double widthNandN, widthNandP, widthEnInvN, widthEnInvP, widthTgN, widthTgP, widthMuxInvN, widt/;"	m	class:Mux	typeref:typename:double
widthMuxInvP	Mux.h	/^	double widthNandN, widthNandP, widthEnInvN, widthEnInvP, widthTgN, widthTgP, widthMuxInvN, widt/;"	m	class:Mux	typeref:typename:double
widthNand2N	Comparator.h	/^	double widthInvN, widthInvP, widthNand2N, widthNand2P, widthNand3N, widthNand3P;$/;"	m	class:Comparator	typeref:typename:double
widthNand2P	Comparator.h	/^	double widthInvN, widthInvP, widthNand2N, widthNand2P, widthNand3N, widthNand3P;$/;"	m	class:Comparator	typeref:typename:double
widthNand3N	Comparator.h	/^	double widthInvN, widthInvP, widthNand2N, widthNand2P, widthNand3N, widthNand3P;$/;"	m	class:Comparator	typeref:typename:double
widthNand3P	Comparator.h	/^	double widthInvN, widthInvP, widthNand2N, widthNand2P, widthNand3N, widthNand3P;$/;"	m	class:Comparator	typeref:typename:double
widthNandN	ActivationFunc.h	/^	double widthNandN, widthNandP;$/;"	m	class:ActivationFunc	typeref:typename:double
widthNandN	Adder.h	/^	double widthNandN, widthNandP;$/;"	m	class:Adder	typeref:typename:double
widthNandN	MultilevelSAEncoder.h	/^	double widthInvN, widthInvP, widthNandN, widthNandP;$/;"	m	class:MultilevelSAEncoder	typeref:typename:double
widthNandN	Mux.h	/^	double widthNandN, widthNandP, widthEnInvN, widthEnInvP, widthTgN, widthTgP, widthMuxInvN, widt/;"	m	class:Mux	typeref:typename:double
widthNandN	RowDecoder.h	/^	double widthInvN, widthInvP, widthNandN, widthNandP, widthNorN, widthNorP, widthDriverInvN, wid/;"	m	class:RowDecoder	typeref:typename:double
widthNandN	ShiftAdd.h	/^	double widthInvN, widthInvP, widthNandN, widthNandP;$/;"	m	class:ShiftAdd	typeref:typename:double
widthNandN	WLNewDecoderDriver.h	/^	double widthNandN, widthNandP, widthInvN, widthInvP, widthTgN, widthTgP;$/;"	m	class:WLNewDecoderDriver	typeref:typename:double
widthNandP	ActivationFunc.h	/^	double widthNandN, widthNandP;$/;"	m	class:ActivationFunc	typeref:typename:double
widthNandP	Adder.h	/^	double widthNandN, widthNandP;$/;"	m	class:Adder	typeref:typename:double
widthNandP	MultilevelSAEncoder.h	/^	double widthInvN, widthInvP, widthNandN, widthNandP;$/;"	m	class:MultilevelSAEncoder	typeref:typename:double
widthNandP	Mux.h	/^	double widthNandN, widthNandP, widthEnInvN, widthEnInvP, widthTgN, widthTgP, widthMuxInvN, widt/;"	m	class:Mux	typeref:typename:double
widthNandP	RowDecoder.h	/^	double widthInvN, widthInvP, widthNandN, widthNandP, widthNorN, widthNorP, widthDriverInvN, wid/;"	m	class:RowDecoder	typeref:typename:double
widthNandP	ShiftAdd.h	/^	double widthInvN, widthInvP, widthNandN, widthNandP;$/;"	m	class:ShiftAdd	typeref:typename:double
widthNandP	WLNewDecoderDriver.h	/^	double widthNandN, widthNandP, widthInvN, widthInvP, widthTgN, widthTgP;$/;"	m	class:WLNewDecoderDriver	typeref:typename:double
widthNmos	CurrentSenseAmp.h	/^	double widthNmos, widthPmos;$/;"	m	class:CurrentSenseAmp	typeref:typename:double
widthNmos	VoltageSenseAmp.h	/^	double widthNmos, widthPmos;$/;"	m	class:VoltageSenseAmp	typeref:typename:double
widthNmos	WLDecoderOutput.h	/^	double widthNorN, widthNorP, widthInvN, widthInvP, widthTgN, widthTgP, widthNmos;$/;"	m	class:WLDecoderOutput	typeref:typename:double
widthNmos1	ReadCircuit.h	/^	double widthNmos1, widthPmos1, widthNmos2, widthNmos3, widthPmos3, widthNmos4, widthPmos4, widt/;"	m	class:ReadCircuit	typeref:typename:double
widthNmos2	ReadCircuit.h	/^	double widthNmos1, widthPmos1, widthNmos2, widthNmos3, widthPmos3, widthNmos4, widthPmos4, widt/;"	m	class:ReadCircuit	typeref:typename:double
widthNmos3	ReadCircuit.h	/^	double widthNmos1, widthPmos1, widthNmos2, widthNmos3, widthPmos3, widthNmos4, widthPmos4, widt/;"	m	class:ReadCircuit	typeref:typename:double
widthNmos4	ReadCircuit.h	/^	double widthNmos1, widthPmos1, widthNmos2, widthNmos3, widthPmos3, widthNmos4, widthPmos4, widt/;"	m	class:ReadCircuit	typeref:typename:double
widthNmos5	ReadCircuit.h	/^	double widthNmos1, widthPmos1, widthNmos2, widthNmos3, widthPmos3, widthNmos4, widthPmos4, widt/;"	m	class:ReadCircuit	typeref:typename:double
widthNmos6	ReadCircuit.h	/^	double widthNmos1, widthPmos1, widthNmos2, widthNmos3, widthPmos3, widthNmos4, widthPmos4, widt/;"	m	class:ReadCircuit	typeref:typename:double
widthNmos7	ReadCircuit.h	/^	double widthNmos1, widthPmos1, widthNmos2, widthNmos3, widthPmos3, widthNmos4, widthPmos4, widt/;"	m	class:ReadCircuit	typeref:typename:double
widthNmos8	ReadCircuit.h	/^	double widthNmos1, widthPmos1, widthNmos2, widthNmos3, widthPmos3, widthNmos4, widthPmos4, widt/;"	m	class:ReadCircuit	typeref:typename:double
widthNorN	RowDecoder.h	/^	double widthInvN, widthInvP, widthNandN, widthNandP, widthNorN, widthNorP, widthDriverInvN, wid/;"	m	class:RowDecoder	typeref:typename:double
widthNorN	WLDecoderOutput.h	/^	double widthNorN, widthNorP, widthInvN, widthInvP, widthTgN, widthTgP, widthNmos;$/;"	m	class:WLDecoderOutput	typeref:typename:double
widthNorP	RowDecoder.h	/^	double widthInvN, widthInvP, widthNandN, widthNandP, widthNorN, widthNorP, widthDriverInvN, wid/;"	m	class:RowDecoder	typeref:typename:double
widthNorP	WLDecoderOutput.h	/^	double widthNorN, widthNorP, widthInvN, widthInvP, widthTgN, widthTgP, widthNmos;$/;"	m	class:WLDecoderOutput	typeref:typename:double
widthPMOSBitlineEqual	Precharger.h	/^	double widthPMOSBitlinePrecharger, widthPMOSBitlineEqual;$/;"	m	class:Precharger	typeref:typename:double
widthPMOSBitlinePrecharger	Precharger.h	/^	double widthPMOSBitlinePrecharger, widthPMOSBitlineEqual;$/;"	m	class:Precharger	typeref:typename:double
widthPmos	CurrentSenseAmp.h	/^	double widthNmos, widthPmos;$/;"	m	class:CurrentSenseAmp	typeref:typename:double
widthPmos	VoltageSenseAmp.h	/^	double widthNmos, widthPmos;$/;"	m	class:VoltageSenseAmp	typeref:typename:double
widthPmos1	ReadCircuit.h	/^	double widthNmos1, widthPmos1, widthNmos2, widthNmos3, widthPmos3, widthNmos4, widthPmos4, widt/;"	m	class:ReadCircuit	typeref:typename:double
widthPmos3	ReadCircuit.h	/^	double widthNmos1, widthPmos1, widthNmos2, widthNmos3, widthPmos3, widthNmos4, widthPmos4, widt/;"	m	class:ReadCircuit	typeref:typename:double
widthPmos4	ReadCircuit.h	/^	double widthNmos1, widthPmos1, widthNmos2, widthNmos3, widthPmos3, widthNmos4, widthPmos4, widt/;"	m	class:ReadCircuit	typeref:typename:double
widthPmos5	ReadCircuit.h	/^	double widthNmos1, widthPmos1, widthNmos2, widthNmos3, widthPmos3, widthNmos4, widthPmos4, widt/;"	m	class:ReadCircuit	typeref:typename:double
widthPmos8	ReadCircuit.h	/^	double widthNmos1, widthPmos1, widthNmos2, widthNmos3, widthPmos3, widthNmos4, widthPmos4, widt/;"	m	class:ReadCircuit	typeref:typename:double
widthSRAMCellNMOS	MemCell.h	/^	double widthSRAMCellNMOS;	\/* The gate width of NMOS in SRAM cells, Unit: F *\/$/;"	m	class:MemCell	typeref:typename:double
widthSRAMCellPMOS	MemCell.h	/^	double widthSRAMCellPMOS;	\/* The gate width of PMOS in SRAM cells, Unit: F *\/$/;"	m	class:MemCell	typeref:typename:double
widthTgN	DFF.h	/^	double widthTgN, widthTgP, widthInvN, widthInvP;$/;"	m	class:DFF	typeref:typename:double
widthTgN	DeMux.h	/^	double widthInvN, widthInvP, widthTgN, widthTgP;$/;"	m	class:DeMux	typeref:typename:double
widthTgN	DecoderDriver.h	/^	double widthInvN, widthInvP, widthTgN, widthTgP;$/;"	m	class:DecoderDriver	typeref:typename:double
widthTgN	Mux.h	/^	double widthNandN, widthNandP, widthEnInvN, widthEnInvP, widthTgN, widthTgP, widthMuxInvN, widt/;"	m	class:Mux	typeref:typename:double
widthTgN	NewSwitchMatrix.h	/^	double widthTgN, widthTgP;$/;"	m	class:NewSwitchMatrix	typeref:typename:double
widthTgN	ReadCircuit.h	/^	double widthDffTgN, widthDffTgP, widthDffInvN, widthDffInvP, widthDffNorN, widthDffNorP, widthT/;"	m	class:ReadCircuit	typeref:typename:double
widthTgN	SwitchMatrix.h	/^	double widthTgN, widthTgP;$/;"	m	class:SwitchMatrix	typeref:typename:double
widthTgN	WLDecoderOutput.h	/^	double widthNorN, widthNorP, widthInvN, widthInvP, widthTgN, widthTgP, widthNmos;$/;"	m	class:WLDecoderOutput	typeref:typename:double
widthTgN	WLNewDecoderDriver.h	/^	double widthNandN, widthNandP, widthInvN, widthInvP, widthTgN, widthTgP;$/;"	m	class:WLNewDecoderDriver	typeref:typename:double
widthTgP	DFF.h	/^	double widthTgN, widthTgP, widthInvN, widthInvP;$/;"	m	class:DFF	typeref:typename:double
widthTgP	DeMux.h	/^	double widthInvN, widthInvP, widthTgN, widthTgP;$/;"	m	class:DeMux	typeref:typename:double
widthTgP	DecoderDriver.h	/^	double widthInvN, widthInvP, widthTgN, widthTgP;$/;"	m	class:DecoderDriver	typeref:typename:double
widthTgP	Mux.h	/^	double widthNandN, widthNandP, widthEnInvN, widthEnInvP, widthTgN, widthTgP, widthMuxInvN, widt/;"	m	class:Mux	typeref:typename:double
widthTgP	NewSwitchMatrix.h	/^	double widthTgN, widthTgP;$/;"	m	class:NewSwitchMatrix	typeref:typename:double
widthTgP	ReadCircuit.h	/^	double widthDffTgN, widthDffTgP, widthDffInvN, widthDffInvP, widthDffNorN, widthDffNorP, widthT/;"	m	class:ReadCircuit	typeref:typename:double
widthTgP	SwitchMatrix.h	/^	double widthTgN, widthTgP;$/;"	m	class:SwitchMatrix	typeref:typename:double
widthTgP	WLDecoderOutput.h	/^	double widthNorN, widthNorP, widthInvN, widthInvP, widthTgN, widthTgP, widthNmos;$/;"	m	class:WLDecoderOutput	typeref:typename:double
widthTgP	WLNewDecoderDriver.h	/^	double widthNandN, widthNandP, widthInvN, widthInvP, widthTgN, widthTgP;$/;"	m	class:WLNewDecoderDriver	typeref:typename:double
widthTgShared	Mux.h	/^	double widthTgShared;$/;"	m	class:Mux	typeref:typename:double
widthVoltageSenseAmp	VoltageSenseAmp.h	/^	double widthVoltageSenseAmp;$/;"	m	class:VoltageSenseAmp	typeref:typename:double
wireWidth	HWsim.h	/^	int wireWidth;	\/* The Width of the wire, unit: nm*\/$/;"	m	class:HWsim	typeref:typename:int
wireWidth	HWsim.py	/^        wireWidth = _swig_property(_HWsim.HWsim_wireWidth_get, _HWsim.HWsim_wireWidth_set)$/;"	v	class:HWsim
wireWidth	ReadParam.h	/^	int wireWidth;					\/* Interwire Width, Unit: nm *\/$/;"	m	class:ReadParam	typeref:typename:int
wlDecoder	SubArray.h	/^	RowDecoder  wlDecoder;$/;"	m	class:SubArray	typeref:typename:RowDecoder
wlDecoderDriver	SubArray.h	/^	DecoderDriver wlDecoderDriver;$/;"	m	class:SubArray	typeref:typename:DecoderDriver
wlDecoderOutput	SubArray.h	/^	WLDecoderOutput wlDecoderOutput;$/;"	m	class:SubArray	typeref:typename:WLDecoderOutput
wlNewDecoderDriver	SubArray.h	/^	WLNewDecoderDriver wlNewDecoderDriver;$/;"	m	class:SubArray	typeref:typename:WLNewDecoderDriver
wlNewSwitchMatrix	SubArray.h	/^	NewSwitchMatrix wlNewSwitchMatrix;$/;"	m	class:SubArray	typeref:typename:NewSwitchMatrix
wlSwitchMatrix	SubArray.h	/^	SwitchMatrix    wlSwitchMatrix;$/;"	m	class:SubArray	typeref:typename:SwitchMatrix
writeDynamicEnergy	FunctionUnit.h	/^	double readDynamicEnergy, writeDynamicEnergy;	\/* Unit: J *\/$/;"	m	class:FunctionUnit	typeref:typename:double
writeDynamicEnergy	HWsim.py	/^        writeDynamicEnergy = _swig_property(_HWsim.FunctionUnit_writeDynamicEnergy_get, _HWsim.F/;"	v	class:FunctionUnit
writeDynamicEnergyArray	SubArray.h	/^	double readDynamicEnergyArray, writeDynamicEnergyArray;$/;"	m	class:SubArray	typeref:typename:double
writeLatency	FunctionUnit.h	/^	double readLatency, writeLatency;		\/* Unit: s *\/$/;"	m	class:FunctionUnit	typeref:typename:double
writeLatency	HWsim.py	/^        writeLatency = _swig_property(_HWsim.FunctionUnit_writeLatency_get, _HWsim.FunctionUnit_/;"	v	class:FunctionUnit
writePower	FunctionUnit.h	/^	double readPower, writePower;$/;"	m	class:FunctionUnit	typeref:typename:double
writePower	HWsim.py	/^        writePower = _swig_property(_HWsim.FunctionUnit_writePower_get, _HWsim.FunctionUnit_writ/;"	v	class:FunctionUnit
writePulseWidth	MemCell.h	/^	double writePulseWidth;$/;"	m	class:MemCell	typeref:typename:double
writeVoltage	MemCell.h	/^	double writeVoltage;$/;"	m	class:MemCell	typeref:typename:double
writebufferproc	HWsim_wrap.cxx	/^typedef getwritebufferproc writebufferproc;$/;"	t	typeref:typename:getwritebufferproc	file:
~ActivationFunc	ActivationFunc.h	/^	virtual ~ActivationFunc() {}$/;"	f	class:ActivationFunc
~Adder	Adder.h	/^	virtual ~Adder() {}$/;"	f	class:Adder
~Comparator	Comparator.h	/^	virtual ~Comparator() {}$/;"	f	class:Comparator
~Core	Core.h	/^	virtual ~Core() {}$/;"	f	class:Core
~CurrentSenseAmp	CurrentSenseAmp.cpp	/^CurrentSenseAmp::~CurrentSenseAmp() {$/;"	f	class:CurrentSenseAmp
~DFF	DFF.h	/^	virtual ~DFF() {}$/;"	f	class:DFF
~DeMux	DeMux.h	/^	virtual ~DeMux() {}$/;"	f	class:DeMux
~DecoderDriver	DecoderDriver.h	/^	virtual ~DecoderDriver() {}$/;"	f	class:DecoderDriver
~FunctionUnit	FunctionUnit.h	/^	virtual ~FunctionUnit() {}$/;"	f	class:FunctionUnit
~HWsim	HWsim.h	/^	virtual ~HWsim() {}$/;"	f	class:HWsim
~LUT	LUT.h	/^	virtual ~LUT() {}$/;"	f	class:LUT
~MultilevelSAEncoder	MultilevelSAEncoder.h	/^	virtual ~MultilevelSAEncoder() {}$/;"	f	class:MultilevelSAEncoder
~MultilevelSenseAmp	MultilevelSenseAmp.h	/^	virtual ~MultilevelSenseAmp() {}$/;"	f	class:MultilevelSenseAmp
~Mux	Mux.h	/^	virtual ~Mux() {}$/;"	f	class:Mux
~NewSwitchMatrix	NewSwitchMatrix.cpp	/^NewSwitchMatrix::~NewSwitchMatrix() {$/;"	f	class:NewSwitchMatrix
~Precharger	Precharger.h	/^	virtual ~Precharger() {}$/;"	f	class:Precharger
~ReadCircuit	ReadCircuit.h	/^	virtual ~ReadCircuit() {}$/;"	f	class:ReadCircuit
~ReadParam	ReadParam.h	/^	virtual ~ReadParam() {}$/;"	f	class:ReadParam
~RippleCounter	RippleCounter.h	/^	virtual ~RippleCounter() {}$/;"	f	class:RippleCounter
~RowDecoder	RowDecoder.h	/^	virtual ~RowDecoder() {}$/;"	f	class:RowDecoder
~SRAMWriteDriver	SRAMWriteDriver.h	/^	virtual ~SRAMWriteDriver() {}$/;"	f	class:SRAMWriteDriver
~SWIG_Python_Thread_Allow	HWsim_wrap.cxx	/^         ~SWIG_Python_Thread_Allow() { end(); }$/;"	f	class:SWIG_Python_Thread_Allow	file:
~SWIG_Python_Thread_Block	HWsim_wrap.cxx	/^         ~SWIG_Python_Thread_Block() { end(); }$/;"	f	class:SWIG_Python_Thread_Block	file:
~SenseAmp	SenseAmp.h	/^	virtual ~SenseAmp() {}$/;"	f	class:SenseAmp
~ShiftAdd	ShiftAdd.h	/^	virtual ~ShiftAdd() {}$/;"	f	class:ShiftAdd
~SubArray	SubArray.h	/^	virtual ~SubArray() {}$/;"	f	class:SubArray
~Sum	Sum.h	/^	virtual ~Sum() {}$/;"	f	class:Sum
~SwigMovePointer	HWsim_wrap.cxx	/^    ~SwigMovePointer() { delete ptr; }$/;"	f	struct:SwigValueWrapper::SwigMovePointer	file:
~SwigPtr_PyObject	HWsim_wrap.cxx	/^    ~SwigPtr_PyObject() $/;"	f	class:swig::SwigPtr_PyObject	file:
~SwigPyIterator	HWsim_wrap.cxx	/^    virtual ~SwigPyIterator() {}$/;"	f	struct:swig::SwigPyIterator	file:
~SwitchMatrix	SwitchMatrix.h	/^	virtual ~SwitchMatrix() {}$/;"	f	class:SwitchMatrix
~Technology	Technology.h	/^	virtual ~Technology() {}$/;"	f	class:Technology
~VoltageSenseAmp	VoltageSenseAmp.h	/^	virtual ~VoltageSenseAmp() {}$/;"	f	class:VoltageSenseAmp
~WLDecoderOutput	WLDecoderOutput.h	/^	virtual ~WLDecoderOutput() {}$/;"	f	class:WLDecoderOutput
~WLNewDecoderDriver	WLNewDecoderDriver.cpp	/^WLNewDecoderDriver::~WLNewDecoderDriver() {$/;"	f	class:WLNewDecoderDriver

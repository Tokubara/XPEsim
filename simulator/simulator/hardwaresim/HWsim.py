# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _HWsim
else:
    import _HWsim

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class FunctionUnit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _HWsim.FunctionUnit_swiginit(self, _HWsim.new_FunctionUnit())
    __swig_destroy__ = _HWsim.delete_FunctionUnit

    def PrintProperty(self, str):
        return _HWsim.FunctionUnit_PrintProperty(self, str)

    def SaveOutput(self, str, outputFile):
        return _HWsim.FunctionUnit_SaveOutput(self, str, outputFile)

    def MagicLayout(self):
        return _HWsim.FunctionUnit_MagicLayout(self)

    def OverrideLayout(self):
        return _HWsim.FunctionUnit_OverrideLayout(self)
    height = property(_HWsim.FunctionUnit_height_get, _HWsim.FunctionUnit_height_set)
    width = property(_HWsim.FunctionUnit_width_get, _HWsim.FunctionUnit_width_set)
    area = property(_HWsim.FunctionUnit_area_get, _HWsim.FunctionUnit_area_set)
    emptyArea = property(_HWsim.FunctionUnit_emptyArea_get, _HWsim.FunctionUnit_emptyArea_set)
    usedArea = property(_HWsim.FunctionUnit_usedArea_get, _HWsim.FunctionUnit_usedArea_set)
    totalArea = property(_HWsim.FunctionUnit_totalArea_get, _HWsim.FunctionUnit_totalArea_set)
    readLatency = property(_HWsim.FunctionUnit_readLatency_get, _HWsim.FunctionUnit_readLatency_set)
    writeLatency = property(_HWsim.FunctionUnit_writeLatency_get, _HWsim.FunctionUnit_writeLatency_set)
    readDynamicEnergy = property(_HWsim.FunctionUnit_readDynamicEnergy_get, _HWsim.FunctionUnit_readDynamicEnergy_set)
    writeDynamicEnergy = property(_HWsim.FunctionUnit_writeDynamicEnergy_get, _HWsim.FunctionUnit_writeDynamicEnergy_set)
    leakage = property(_HWsim.FunctionUnit_leakage_get, _HWsim.FunctionUnit_leakage_set)
    newWidth = property(_HWsim.FunctionUnit_newWidth_get, _HWsim.FunctionUnit_newWidth_set)
    newHeight = property(_HWsim.FunctionUnit_newHeight_get, _HWsim.FunctionUnit_newHeight_set)
    readPower = property(_HWsim.FunctionUnit_readPower_get, _HWsim.FunctionUnit_readPower_set)
    writePower = property(_HWsim.FunctionUnit_writePower_get, _HWsim.FunctionUnit_writePower_set)

# Register FunctionUnit in _HWsim:
_HWsim.FunctionUnit_swigregister(FunctionUnit)

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _HWsim.delete_SwigPyIterator

    def value(self):
        return _HWsim.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _HWsim.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _HWsim.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _HWsim.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _HWsim.SwigPyIterator_equal(self, x)

    def copy(self):
        return _HWsim.SwigPyIterator_copy(self)

    def next(self):
        return _HWsim.SwigPyIterator_next(self)

    def __next__(self):
        return _HWsim.SwigPyIterator___next__(self)

    def previous(self):
        return _HWsim.SwigPyIterator_previous(self)

    def advance(self, n):
        return _HWsim.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _HWsim.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _HWsim.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _HWsim.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _HWsim.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _HWsim.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _HWsim.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _HWsim:
_HWsim.SwigPyIterator_swigregister(SwigPyIterator)

class HWsim(FunctionUnit):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _HWsim.HWsim_swiginit(self, _HWsim.new_HWsim())
    __swig_destroy__ = _HWsim.delete_HWsim
    inputParameter = property(_HWsim.HWsim_inputParameter_get, _HWsim.HWsim_inputParameter_set)
    tech = property(_HWsim.HWsim_tech_get, _HWsim.HWsim_tech_set)
    cell = property(_HWsim.HWsim_cell_get, _HWsim.HWsim_cell_set)
    params = property(_HWsim.HWsim_params_get, _HWsim.HWsim_params_set)

    def PrintProperty(self):
        return _HWsim.HWsim_PrintProperty(self)

    def SaveOutput(self, CoreIndex, outputFile):
        return _HWsim.HWsim_SaveOutput(self, CoreIndex, outputFile)

    def Initialize(self):
        return _HWsim.HWsim_Initialize(self)

    def CalculateArea(self):
        return _HWsim.HWsim_CalculateArea(self)

    def CalculateLatency(self):
        return _HWsim.HWsim_CalculateLatency(self)

    def CalculatePower(self, activityRowRead):
        return _HWsim.HWsim_CalculatePower(self, activityRowRead)
    initialized = property(_HWsim.HWsim_initialized_get, _HWsim.HWsim_initialized_set)
    numOutput = property(_HWsim.HWsim_numOutput_get, _HWsim.HWsim_numOutput_set)
    numArrayCol = property(_HWsim.HWsim_numArrayCol_get, _HWsim.HWsim_numArrayCol_set)
    numArrayRow = property(_HWsim.HWsim_numArrayRow_get, _HWsim.HWsim_numArrayRow_set)
    numCellPerSynapse = property(_HWsim.HWsim_numCellPerSynapse_get, _HWsim.HWsim_numCellPerSynapse_set)
    numBitInput = property(_HWsim.HWsim_numBitInput_get, _HWsim.HWsim_numBitInput_set)
    numWeightBit = property(_HWsim.HWsim_numWeightBit_get, _HWsim.HWsim_numWeightBit_set)
    numCellBit = property(_HWsim.HWsim_numCellBit_get, _HWsim.HWsim_numCellBit_set)
    numSABit = property(_HWsim.HWsim_numSABit_get, _HWsim.HWsim_numSABit_set)
    numBitPartialSum = property(_HWsim.HWsim_numBitPartialSum_get, _HWsim.HWsim_numBitPartialSum_set)
    wireWidth = property(_HWsim.HWsim_wireWidth_get, _HWsim.HWsim_wireWidth_set)
    numof1 = property(_HWsim.HWsim_numof1_get, _HWsim.HWsim_numof1_set)
    numof2 = property(_HWsim.HWsim_numof2_get, _HWsim.HWsim_numof2_set)
    numof3 = property(_HWsim.HWsim_numof3_get, _HWsim.HWsim_numof3_set)
    numof4 = property(_HWsim.HWsim_numof4_get, _HWsim.HWsim_numof4_set)
    numof5 = property(_HWsim.HWsim_numof5_get, _HWsim.HWsim_numof5_set)
    numof6 = property(_HWsim.HWsim_numof6_get, _HWsim.HWsim_numof6_set)
    numof7 = property(_HWsim.HWsim_numof7_get, _HWsim.HWsim_numof7_set)
    numof8 = property(_HWsim.HWsim_numof8_get, _HWsim.HWsim_numof8_set)
    numof9 = property(_HWsim.HWsim_numof9_get, _HWsim.HWsim_numof9_set)
    numof10 = property(_HWsim.HWsim_numof10_get, _HWsim.HWsim_numof10_set)
    core = property(_HWsim.HWsim_core_get, _HWsim.HWsim_core_set)

# Register HWsim in _HWsim:
_HWsim.HWsim_swigregister(HWsim)



